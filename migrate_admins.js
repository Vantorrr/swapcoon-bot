const Database = require('./src/models/Database');

// –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã
const ADMINS_TO_MIGRATE = [
    {
        telegramId: 8141463258,
        username: 'main_admin', 
        firstName: '–ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω',
        lastName: null
    },
    {
        telegramId: 461759951,
        username: 'admin_user',
        firstName: 'Admin', 
        lastName: null
    },
    {
        telegramId: 280417617,
        username: null,
        firstName: '–ê–¥–º–∏–Ω',
        lastName: null
    }
];

// –û–ø–µ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
const OPERATORS_TO_MIGRATE = [
    {
        telegramId: 7692725312,
        username: null,
        firstName: '–ù–æ–≤—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä',
        lastName: null
    }
];

async function migrateAdmins() {
    const db = new Database();
    
    // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    try {
        console.log('üöÄ –ú–ò–ì–†–ê–¶–ò–Ø –ê–î–ú–ò–ù–û–í –ò –û–ü–ï–†–ê–¢–û–†–û–í');
        console.log('');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–æ—Å—Ç–∞–≤...');
        const currentStaff = await db.getStaffList();
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ: ${currentStaff.length} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤`);
        
        // –ú–∏–≥—Ä–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–æ–≤
        console.log('');
        console.log('üõ°Ô∏è –î–û–ë–ê–í–õ–Ø–ï–ú –ê–î–ú–ò–ù–û–í:');
        
        for (const admin of ADMINS_TO_MIGRATE) {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ
                const existing = await db.getStaffById(admin.telegramId);
                if (existing) {
                    console.log(`   ‚ö†Ô∏è ${admin.firstName} (${admin.telegramId}) —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
                    continue;
                }
                
                await db.addStaff({
                    telegramId: admin.telegramId,
                    username: admin.username,
                    firstName: admin.firstName,
                    lastName: admin.lastName,
                    role: 'admin',
                    addedBy: 8141463258
                });
                
                console.log(`   ‚úÖ ${admin.firstName} (${admin.telegramId}) –¥–æ–±–∞–≤–ª–µ–Ω`);
                
            } catch (error) {
                console.log(`   ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ${admin.firstName}: ${error.message}`);
            }
        }
        
        // –ú–∏–≥—Ä–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
        console.log('');
        console.log('üë®‚Äçüíº –î–û–ë–ê–í–õ–Ø–ï–ú –û–ü–ï–†–ê–¢–û–†–û–í:');
        
        for (const operator of OPERATORS_TO_MIGRATE) {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ
                const existing = await db.getStaffById(operator.telegramId);
                if (existing) {
                    console.log(`   ‚ö†Ô∏è ${operator.firstName} (${operator.telegramId}) —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
                    continue;
                }
                
                await db.addStaff({
                    telegramId: operator.telegramId,
                    username: operator.username,
                    firstName: operator.firstName,
                    lastName: operator.lastName,
                    role: 'operator',
                    addedBy: 8141463258
                });
                
                console.log(`   ‚úÖ ${operator.firstName} (${operator.telegramId}) –¥–æ–±–∞–≤–ª–µ–Ω`);
                
            } catch (error) {
                console.log(`   ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ${operator.firstName}: ${error.message}`);
            }
        }
        
        console.log('');
        console.log('üìã –ò–¢–û–ì–û–í–´–ô –°–û–°–¢–ê–í:');
        const finalStaff = await db.getStaffList();
        
        const admins = finalStaff.filter(s => s.role === 'admin');
        const operators = finalStaff.filter(s => s.role === 'operator');
        
        console.log('üõ°Ô∏è –ê–î–ú–ò–ù–´:');
        admins.forEach(admin => {
            console.log(`   - ${admin.first_name} (@${admin.username || 'null'}) - ID: ${admin.telegram_id}`);
        });
        
        console.log('üë®‚Äçüíº –û–ü–ï–†–ê–¢–û–†–´:');
        operators.forEach(op => {
            console.log(`   - ${op.first_name} (@${op.username || 'null'}) - ID: ${op.telegram_id}`);
        });
        
        const adminIds = await db.getAdminIds();
        console.log('');
        console.log(`üì¢ –ê–¥–º–∏–Ω—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${adminIds.join(', ')}`);
        
        console.log('');
        console.log('‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!');
        console.log('');
        console.log('üìù –ù–ï –ó–ê–ë–£–î–¨:');
        console.log('   1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å MAIN_ADMIN_ID=8141463258 –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö Railway');
        console.log('   2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ Railway');
        console.log('   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –≤ –±–æ—Ç–µ');
        
        process.exit(0);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —ç—Ç–æ –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª
if (require.main === module) {
    migrateAdmins();
}

module.exports = { migrateAdmins }; 