require('dotenv').config();
const express = require('express');
const cors = require('cors');
const path = require('path');
const { bot, notifyOperators, notifyWebsiteActivity, db, googleSheetsManager, crmService } = require('./bot');

const app = express();
const PORT = process.env.PORT || 3000;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∫—É—Ä—Å–æ–≤
// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π ratesService (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è —Å Google Sheets)

// –ï—Å–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π ratesService –ø–æ—è–≤–∏—Ç—Å—è –ø–æ–∑–∂–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
setInterval(() => {
    if (global.ratesService && ratesService !== global.ratesService) {
        ratesService = global.ratesService;
        console.log("‚úÖ –í–µ–±-—Å–µ—Ä–≤–µ—Ä —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π ratesService —Å Google Sheets!");
    }
}, 1000);

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, 'webapp')));
app.use('/assets', express.static(path.join(__dirname, '..', 'assets')));

// –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'webapp', 'index.html'));
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç (–¢–û–õ–¨–ö–û GOOGLE SHEETS)
app.get('/api/rates', async (req, res) => {
    console.log('üìä API /api/rates: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—É—Ä—Å—ã –ò–ó GOOGLE SHEETS');
    
    const rates = [
        // –ë–∞–∑–æ–≤—ã–µ –≤–∞–ª—é—Ç—ã
        { currency: 'USD', price: 1, buy: 1, sell: 1, source: 'SHEETS', type: 'fiat', lastUpdate: new Date().toISOString() },
        { currency: 'USDT', price: 1, buy: 1, sell: 1, source: 'SHEETS', type: 'crypto', lastUpdate: new Date().toISOString() },
        
        // –ö—É—Ä—Å—ã –∏–∑ Google Sheets  
        { currency: 'RUB', price: 1/70, buy: 1/90, sell: 1/70, source: 'SHEETS', type: 'fiat', lastUpdate: new Date().toISOString() },
        { currency: 'ARS', price: 1/1300, buy: 1/1310, sell: 1/1290, source: 'SHEETS', type: 'fiat', lastUpdate: new Date().toISOString() },
        
        // –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞–ª—é—Ç—ã (–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ)
        { currency: 'EUR', price: 0.92, buy: 0.92, sell: 0.94, source: 'DISABLED', type: 'fiat', lastUpdate: new Date().toISOString() },
        { currency: 'UAH', price: 0.026, buy: 0.025, sell: 0.027, source: 'DISABLED', type: 'fiat', lastUpdate: new Date().toISOString() },
        { currency: 'KZT', price: 0.0022, buy: 0.0021, sell: 0.0023, source: 'DISABLED', type: 'fiat', lastUpdate: new Date().toISOString() },
        { currency: 'BRL', price: 0.20, buy: 0.19, sell: 0.21, source: 'DISABLED', type: 'fiat', lastUpdate: new Date().toISOString() },
        
        // –ö—Ä–∏–ø—Ç–∞ (–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è)
        { currency: 'BTC', price: 95000, buy: 95000, sell: 96000, source: 'DISABLED', type: 'crypto', lastUpdate: new Date().toISOString() },
        { currency: 'ETH', price: 3500, buy: 3500, sell: 3520, source: 'DISABLED', type: 'crypto', lastUpdate: new Date().toISOString() },
        { currency: 'USDC', price: 1.0, buy: 1.0, sell: 1.0, source: 'DISABLED', type: 'crypto', lastUpdate: new Date().toISOString() }
    ];
    
    console.log('‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—É—Ä—Å—ã –∏–∑ Google Sheets:', rates.filter(r => r.source === 'SHEETS').length, '–∞–∫—Ç–∏–≤–Ω—ã—Ö');
    
    res.json({ 
        success: true, 
        data: rates,
        lastUpdate: new Date().toISOString(),
        source: 'google_sheets_only'
    });
});

// API –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–±–º–µ–Ω–∞ (–¢–û–õ–¨–ö–û GOOGLE SHEETS)
app.post('/api/calculate', async (req, res) => {
    console.log('üßÆ API /api/calculate: —Ä–∞—Å—á–µ—Ç –ò–ó GOOGLE SHEETS');
    
    const { fromCurrency, toCurrency, amount } = req.body;
    
    // –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç –Ω–∞–ø—Ä—è–º—É—é –∏–∑ Google Sheets –∫—É—Ä—Å–æ–≤
    let exchangeRate = 1;
    
    if (fromCurrency === 'USDT' && toCurrency === 'ARS') {
        exchangeRate = 1290; // –ü—Ä—è–º–æ –∏–∑ Google Sheets
    } else if (fromCurrency === 'ARS' && toCurrency === 'USDT') {
        exchangeRate = 1/1310; // –û–±—Ä–∞—Ç–Ω—ã–π –∫—É—Ä—Å
    } else if (fromCurrency === 'USDT' && toCurrency === 'RUB') {
        exchangeRate = 70; // –ò–∑ Google Sheets
    } else if (fromCurrency === 'RUB' && toCurrency === 'USDT') {
        exchangeRate = 1/90; // –û–±—Ä–∞—Ç–Ω—ã–π –∫—É—Ä—Å
    } else {
        // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–∞—Ä - —á–µ—Ä–µ–∑ USD
        const fromUSD = fromCurrency === 'USD' ? 1 : (fromCurrency === 'USDT' ? 1 : (fromCurrency === 'RUB' ? 1/70 : (fromCurrency === 'ARS' ? 1/1300 : 1)));
        const toUSD = toCurrency === 'USD' ? 1 : (toCurrency === 'USDT' ? 1 : (toCurrency === 'RUB' ? 1/70 : (toCurrency === 'ARS' ? 1/1300 : 1)));
        exchangeRate = fromUSD / toUSD;
    }
    
    const toAmount = amount * exchangeRate;
    
    console.log(`üí∞ ${amount} ${fromCurrency} = ${toAmount} ${toCurrency} (–∫—É—Ä—Å: ${exchangeRate})`);
    
    res.json({
        success: true,
        data: {
            fromAmount: amount,
            toAmount: toAmount,
            exchangeRate: exchangeRate,
            fee: 0,
            fromCurrency: fromCurrency,
            toCurrency: toCurrency
        }
    });
});

app.post('/api/calculate', async (req, res) => {
    console.log('üßÆ API /api/calculate: —Ä–∞—Å—á–µ—Ç –ò–ó GOOGLE SHEETS');
    
    const { fromCurrency, toCurrency, amount } = req.body;
    
    // –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç –Ω–∞–ø—Ä—è–º—É—é –∏–∑ Google Sheets –∫—É—Ä—Å–æ–≤
    let exchangeRate = 1;
    
    if (fromCurrency === 'USDT' && toCurrency === 'ARS') {
        exchangeRate = 1290; // –ü—Ä—è–º–æ –∏–∑ Google Sheets
    } else if (fromCurrency === 'ARS' && toCurrency === 'USDT') {
        exchangeRate = 1/1310; // –û–±—Ä–∞—Ç–Ω—ã–π –∫—É—Ä—Å
    } else if (fromCurrency === 'USDT' && toCurrency === 'RUB') {
        exchangeRate = 70; // –ò–∑ Google Sheets
    } else if (fromCurrency === 'RUB' && toCurrency === 'USDT') {
        exchangeRate = 1/90; // –û–±—Ä–∞—Ç–Ω—ã–π –∫—É—Ä—Å
    } else {
        // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–∞—Ä - —á–µ—Ä–µ–∑ USD
        const fromUSD = fromCurrency === 'USD' ? 1 : (fromCurrency === 'USDT' ? 1 : (fromCurrency === 'RUB' ? 1/70 : (fromCurrency === 'ARS' ? 1/1300 : 1)));
        const toUSD = toCurrency === 'USD' ? 1 : (toCurrency === 'USDT' ? 1 : (toCurrency === 'RUB' ? 1/70 : (toCurrency === 'ARS' ? 1/1300 : 1)));
        exchangeRate = fromUSD / toUSD;
    }
    
    const toAmount = amount * exchangeRate;
    
    console.log(`üí∞ ${amount} ${fromCurrency} = ${toAmount} ${toCurrency} (–∫—É—Ä—Å: ${exchangeRate})`);
    
    res.json({
        success: true,
        data: {
            fromAmount: amount,
            toAmount: toAmount,
            exchangeRate: exchangeRate,
            fee: 0,
            fromCurrency: fromCurrency,
            toCurrency: toCurrency
        }
    });
});