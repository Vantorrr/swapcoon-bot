require('dotenv').config();
const express = require('express');
const cors = require('cors');
const path = require('path');
const { bot, notifyOperators, notifyWebsiteActivity, db, googleSheetsManager, crmService } = require('./bot');

const app = express();
const PORT = process.env.PORT || 3000;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∫—É—Ä—Å–æ–≤
// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π ratesService (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è —Å Google Sheets)

let ratesService = global.ratesService || null;
// –ï—Å–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π ratesService –ø–æ—è–≤–∏—Ç—Å—è –ø–æ–∑–∂–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
setInterval(() => {
    if (global.ratesService && ratesService !== global.ratesService) {
        ratesService = global.ratesService;
        console.log("‚úÖ –í–µ–±-—Å–µ—Ä–≤–µ—Ä —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π ratesService —Å Google Sheets!");
    }
}, 1000);

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, 'webapp')));
app.use('/assets', express.static(path.join(__dirname, '..', 'assets')));

// –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'webapp', 'index.html'));
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç (–¢–û–õ–¨–ö–û GOOGLE SHEETS)
app.get('/api/rates', async (req, res) => {
    console.log('üìä API /api/rates: —á–∏—Ç–∞–µ–º –∫—É—Ä—Å—ã –ò–ó RatesService —Å Google Sheets');
    
    try {
        let rates = [];
        
        // üî• –ß–ò–¢–ê–ï–ú –ò–ó GLOBAL.RATESSERVICE (—Å Google Sheets —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π)
        if (global.ratesService) {
            console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º global.ratesService —Å Google Sheets');
            rates = await global.ratesService.getRates();
            console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${rates.length} –∫—É—Ä—Å–æ–≤ –∏–∑ RatesService`);
        } else if (ratesService) {
            console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π ratesService');
            rates = await ratesService.getRates();
            console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${rates.length} –∫—É—Ä—Å–æ–≤ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ RatesService`);
        } else {
            console.log('‚ö†Ô∏è RatesService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –∫—É—Ä—Å—ã');
            // Fallback –∫—É—Ä—Å—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ RatesService –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            rates = [
                { currency: "USD", price: 1, buy: 1, sell: 1, source: "FALLBACK", type: "fiat", lastUpdate: new Date().toISOString() },
                { currency: "USDT", price: 1, buy: 1, sell: 1, source: "FALLBACK", type: "crypto", lastUpdate: new Date().toISOString() }
            ];        }
        
        // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫—É—Ä—Å–æ–≤
        console.log('üìä –û–¢–ü–†–ê–í–õ–Ø–ï–ú–´–ï –ö–£–†–°–´:');
        rates.forEach(rate => {
            console.log(`   ${rate.currency}: ${rate.price} (–∏—Å—Ç–æ—á–Ω–∏–∫: ${rate.source || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'})`);
        });
        
        res.json({ 
            success: true, 
            data: rates,
            lastUpdate: new Date().toISOString(),
            source: global.ratesService ? 'rates_service_with_sheets' : (ratesService ? 'local_rates_service' : 'fallback'),
            count: rates.length
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤:', error.message);
        res.status(500).json({ 
            success: false, 
            error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤',
            source: 'error'
        });
    }
});

// API –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–±–º–µ–Ω–∞ (–ò–ó RatesService —Å Google Sheets)
app.post('/api/calculate', async (req, res) => {
    console.log('üßÆ API /api/calculate: —Ä–∞—Å—á–µ—Ç –ò–ó RatesService —Å Google Sheets');
    
    const { fromCurrency, toCurrency, amount } = req.body;
    
    try {
        let exchangeRate = 1;
        
        // üî• –ò–°–ü–û–õ–¨–ó–£–ï–ú RATESSERVICE –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞
        if (global.ratesService && global.ratesService.getExchangeRate) {
            console.log(`üßÆ –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å ${fromCurrency} ‚Üí ${toCurrency} –∏–∑ RatesService`);
            exchangeRate = await global.ratesService.getExchangeRate(fromCurrency, toCurrency);
            console.log(`üìä –ö—É—Ä—Å –∏–∑ RatesService: ${exchangeRate}`);
        } else if (ratesService && ratesService.getExchangeRate) {
            console.log(`üßÆ –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å ${fromCurrency} ‚Üí ${toCurrency} –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ RatesService`);
            exchangeRate = await ratesService.getExchangeRate(fromCurrency, toCurrency);
            console.log(`üìä –ö—É—Ä—Å –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ RatesService: ${exchangeRate}`);
        } else {
            console.log('‚ö†Ô∏è RatesService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ä–∞—Å—á–µ—Ç');
            
            // Fallback —Ä–∞—Å—á–µ—Ç –µ—Å–ª–∏ RatesService –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            if (fromCurrency === 'USDT' && toCurrency === 'ARS') {
                exchangeRate = 1290;
            } else if (fromCurrency === 'ARS' && toCurrency === 'USDT') {
                exchangeRate = 1/1290;
            } else if (fromCurrency === 'USDT' && toCurrency === 'RUB') {
                exchangeRate = 78;
            } else if (fromCurrency === 'RUB' && toCurrency === 'USDT') {
                exchangeRate = 1/78;
            } else {
                const fromUSD = fromCurrency === 'USD' ? 1 : (fromCurrency === 'USDT' ? 1 : (fromCurrency === 'RUB' ? 1/78 : (fromCurrency === 'ARS' ? 1/1290 : 1)));
                const toUSD = toCurrency === 'USD' ? 1 : (toCurrency === 'USDT' ? 1 : (toCurrency === 'RUB' ? 1/78 : (toCurrency === 'ARS' ? 1/1290 : 1)));
                exchangeRate = fromUSD / toUSD;
            }
        }
        
        const toAmount = amount * exchangeRate;
        
        console.log(`ÔøΩÔøΩ –†–ï–ó–£–õ–¨–¢–ê–¢: ${amount} ${fromCurrency} = ${toAmount} ${toCurrency} (–∫—É—Ä—Å: ${exchangeRate})`);
        
        res.json({
            success: true,
            data: {
                fromAmount: amount,
                toAmount: toAmount,
                exchangeRate: exchangeRate,
                fee: 0,
                fromCurrency: fromCurrency,
                toCurrency: toCurrency,
                source: global.ratesService ? 'rates_service' : 'fallback'
            }
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –æ–±–º–µ–Ω–∞:', error.message);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –æ–±–º–µ–Ω–∞'
        });
    }
});

// API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
app.post('/api/create-order', async (req, res) => {
    try {
        console.log('üöÄ API CREATE-ORDER –ü–û–õ–£–ß–ò–õ –î–ê–ù–ù–´–ï:', req.body);
        console.log('üö® === –í–´–ó–û–í notifyOperators ===');
        
        const {
            userId,
            fromCurrency,
            toCurrency,
            fromAmount,
            toAmount,
            fromAddress,
            toAddress,
            exchangeRate,
            fee,
            amlFromResult,
            amlToResult,
            pairType
        } = req.body;

        // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const order = await db.createOrder({
            user_id: userId,
            from_currency: fromCurrency,
            to_currency: toCurrency,
            from_amount: fromAmount,
            to_amount: toAmount,
            from_address: fromAddress || '',
            to_address: toAddress || '',
            exchange_rate: exchangeRate,
            fee: fee || 0,
            aml_status: JSON.stringify({ from: amlFromResult, to: amlToResult }),
            status: 'pending',
            source: 'web'
        });

        console.log('‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ –±–∞–∑–µ:', order.id);

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        const user = await db.getUser(userId) || {
            firstName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            username: `user${userId}`
        };

        // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–∫–∞–∑ –≤ Google Sheets
        if (googleSheetsManager && googleSheetsManager.isReady()) {
            await googleSheetsManager.logOrder({
                id: order.id,
                user_id: userId,
                userName: user.first_name || user.username || `User_${userId}`,
                fromCurrency: fromCurrency,
                toCurrency: toCurrency,
                fromAmount: fromAmount,
                toAmount: toAmount,
                exchangeRate: exchangeRate,
                fee: fee || 0,
                status: 'pending',
                aml_status: JSON.stringify({ from: amlFromResult, to: amlToResult })
            });
        }

        console.log('üìã –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:', order.id, order.from_currency, order.to_currency);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º
        await notifyOperators({
            id: order.id,
            userName: user.first_name || user.username || `User_${userId}`,
            fromAmount: order.from_amount,
            fromCurrency: order.from_currency,
            toCurrency: order.to_currency,
            fromAddress: order.from_address || '',
            toAddress: order.to_address || '',
            pairType: pairType || 'fiat'
        });

        console.log('‚úÖ –í–´–ó–û–í notifyOperators –ó–ê–í–ï–†–®–ï–ù');

        res.json({
            success: true,
            orderId: order.id,
            message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞'
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏'
        });
    }
});
