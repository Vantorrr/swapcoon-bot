require('dotenv').config();
const { Bot, InlineKeyboard, webhookCallback } = require('grammy');
const express = require('express');
const { exec } = require('child_process');
const Database = require('./models/Database');
const GoogleSheetsManager = require('./services/GoogleSheetsManager');
const CRMService = require('./services/CRMService');
const fs = require('fs');
const path = require('path');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Bot(process.env.BOT_TOKEN);

// –î–æ–±–∞–≤–ª—è–µ–º error handler —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –ø–∞–¥–∞–ª
bot.catch((err) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:', err);
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const db = new Database();

// üõ°Ô∏è –•–ê–†–î–ö–û–î –ê–î–ú–ò–ù–û–í - –ù–ò–ö–û–ì–î–ê –ù–ï –ü–û–¢–ï–†–Ø–Æ–¢–°–Ø!
const HARDCODED_ADMINS = [8141463258, 461759951, 280417617];
const HARDCODED_OPERATORS = [7692725312]; // @ExMachinaXSupport

// üî• –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –†–û–õ–ï–ô (–ë–ï–ó –ë–ê–ó–´ –î–ê–ù–ù–´–•)
async function isAdmin(userId) {
    const isHardcodedAdmin = HARDCODED_ADMINS.includes(userId);
    console.log(`üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞ ${userId}: ${isHardcodedAdmin ? '–î–ê (—Ö–∞—Ä–¥–∫–æ–¥)' : '–ù–ï–¢'}`);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –ë–î (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
    try {
        const dbRole = await db.getUserRole(userId);
        console.log(`üìã –†–æ–ª—å –≤ –ë–î: ${dbRole || '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}`);
        return isHardcodedAdmin || dbRole === 'admin';
    } catch (error) {
        console.log('‚ö†Ô∏è –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ö–∞—Ä–¥–∫–æ–¥');
        return isHardcodedAdmin;
    }
}

async function isOperator(userId) {
    const isHardcodedOperator = HARDCODED_OPERATORS.includes(userId);
    console.log(`üë®‚Äçüíº –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ ${userId}: ${isHardcodedOperator ? '–î–ê (—Ö–∞—Ä–¥–∫–æ–¥)' : '–ù–ï–¢'}`);
    
    try {
        const dbRole = await db.getUserRole(userId);
        return isHardcodedOperator || dbRole === 'operator' || dbRole === 'admin';
    } catch (error) {
        console.log('‚ö†Ô∏è –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞');
        return isHardcodedOperator;
    }
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ —á–∞—Ç–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
const chatContexts = new Map();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
let googleSheetsManager = null;
const crmService = new CRMService();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets
async function initGoogleSheets() {
    console.log('üîç –í–•–û–î –í initGoogleSheets()');
    try {
        console.log('üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets...');
        
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è Railway)
        console.log('üîç –ß–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
        const envSpreadsheetId = process.env.GOOGLE_SHEETS_ID;
        const envCredentials = process.env.GOOGLE_SHEETS_CREDENTIALS;
        const envEnabled = process.env.GOOGLE_SHEETS_ENABLED !== 'false';
        console.log('‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã');
        
        // üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê
        console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø:');
        console.log('   GOOGLE_SHEETS_ID:', envSpreadsheetId ? '–ï–°–¢–¨' : '–ù–ï–¢');
        console.log('   GOOGLE_SHEETS_CREDENTIALS:', envCredentials ? '–ï–°–¢–¨' : '–ù–ï–¢');
        console.log('   GOOGLE_SHEETS_ENABLED:', envEnabled);
        
        if (envCredentials) {
            console.log('   –î–ª–∏–Ω–∞ CREDENTIALS:', envCredentials.length);
            console.log('   –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤:', envCredentials.substring(0, 100));
        }
        
        let config = null;
        
        if (envSpreadsheetId && envCredentials && envEnabled) {
            console.log('üåç –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Google Sheets');
            try {
                console.log('üîç –ü–∞—Ä—Å–∏–º JSON credentials...');
                const parsedCredentials = JSON.parse(envCredentials);
                console.log('‚úÖ JSON credentials —Å–ø–∞—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
                
                config = {
                    enabled: true,
                    spreadsheet_id: envSpreadsheetId,
                    credentials: parsedCredentials,
                    auto_export_interval: 3600000
                };
                console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
            } catch (parseError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ GOOGLE_SHEETS_CREDENTIALS:', parseError.message);
                console.error('üìã JSON parseError stack:', parseError.stack);
                console.log('üö® –ö–†–ò–¢–ò–ß–ù–û: JSON credentials –Ω–µ–≤–∞–ª–∏–¥–Ω—ã!');
            }
        } else {
            console.log('‚ö†Ô∏è –ù–ï –í–°–ï –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã');
            console.log('   envSpreadsheetId:', !!envSpreadsheetId);
            console.log('   envCredentials:', !!envCredentials);  
            console.log('   envEnabled:', envEnabled);
        }
        
        // Fallback: —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
        if (!config) {
            console.log('üìÇ –ò—â–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ config/google-sheets.json...');
            const configPath = path.join(__dirname, '..', 'config', 'google-sheets.json');
            if (fs.existsSync(configPath)) {
                config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
                console.log('üìÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ —Ñ–∞–π–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
            } else {
                console.log('‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
        }
        
        if (config && config.enabled && config.credentials && config.spreadsheet_id) {
            console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google Sheets Manager...');
            console.log('üìä Spreadsheet ID:', config.spreadsheet_id);
            console.log('üîë Credentials –Ω–∞–π–¥–µ–Ω—ã:', !!config.credentials);
            
            googleSheetsManager = new GoogleSheetsManager();
            console.log('üì¶ GoogleSheetsManager —Å–æ–∑–¥–∞–Ω:', !!googleSheetsManager);
            
            const success = await googleSheetsManager.init(config.credentials, config.spreadsheet_id);
            console.log('üîå –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API:', success);
            
            if (success) {
                await googleSheetsManager.createWorksheets();
                console.log('‚úÖ Google Sheets –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞!');
                console.log('üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É: https://docs.google.com/spreadsheets/d/' + config.spreadsheet_id + '/edit');
                
                // üåç –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ì–õ–û–ë–ê–õ–¨–ù–û
                global.googleSheetsManager = googleSheetsManager;
                console.log('üåç Google Sheets Manager —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ!');
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–æ—Ä—Ç
                if (config.auto_export_interval) {
                    setInterval(async () => {
                        console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–æ—Ä—Ç –≤ Google Sheets...');
                        await googleSheetsManager.exportAll(db);
                    }, config.auto_export_interval);
                }
            } else {
                console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets API');
            }
        } else {
            console.log('‚ùå Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            console.log('üîç –ü—Ä–∏—á–∏–Ω—ã:');
            console.log('   config —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', !!config);
            if (config) {
                console.log('   config.enabled:', config.enabled);
                console.log('   config.credentials:', !!config.credentials);
                console.log('   config.spreadsheet_id:', !!config.spreadsheet_id);
            }
            console.log('üí° –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ Railway –¥–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
            console.log('   GOOGLE_SHEETS_ID=your_spreadsheet_id');
            console.log('   GOOGLE_SHEETS_CREDENTIALS={"type":"service_account",...}');
            console.log('   GOOGLE_SHEETS_ENABLED=true');
            console.log('üí° –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª config/google-sheets.json');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets:', error.message);
        console.error('üìã –ü–æ–ª–Ω—ã–π stack trace:', error.stack);
        console.log('üö® –ö–†–ò–¢–ò–ß–ù–û: initGoogleSheets() —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π!');
    }
    console.log('üîç –í–´–•–û–î –ò–ó initGoogleSheets()');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
async function createMainKeyboard(userId) {
    const keyboard = new InlineKeyboard();
    
    // –î–æ–±–∞–≤–ª—è–µ–º WebApp –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ URL –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç HTTPS
    const webappUrl = process.env.WEBAPP_URL;
    if (webappUrl && webappUrl.startsWith('https://')) {
        keyboard.webApp('üöÄ –û—Ç–∫—Ä—ã—Ç—å ExMachinaX', `${webappUrl}?user=${userId}`).row();
    } else {
        // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è 
        keyboard.text('üöÄ –û—Ç–∫—Ä—ã—Ç—å ExMachinaX', 'webapp_launch').row();
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
    try {
        const userRole = await db.getUserRole(userId);
        
        if (userRole === 'admin') {
            keyboard.text('üõ°Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'open_admin_panel')
                .text('üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞', 'open_operator_panel')
                .row();
        } else if (userRole === 'operator') {
            keyboard.text('üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞', 'open_operator_panel').row();
        }
    } catch (error) {
        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
    }
    
    keyboard.text('üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º', 'contact_operator')
        .row()
        .text('‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', 'info');
    
    return keyboard;
}

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –∫—É—Ä—Å–æ–≤: /init_rates_table
bot.command('init_rates_table', async (ctx) => {
    const userId = ctx.from.id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
    if (!(await isAdmin(userId))) {
        return await ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –∫—É—Ä—Å–æ–≤');
    }
    
    try {
        await ctx.reply('üîÑ –°–æ–∑–¥–∞—é –ª–∏—Å—Ç –∫—É—Ä—Å–æ–≤ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü–µ...');
        
        // üî• –†–ê–î–ò–ö–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï: –°–û–ó–î–ê–ï–ú GOOGLE SHEETS MANAGER –ü–†–Ø–ú–û –ó–î–ï–°–¨
        console.log('üî• –†–ê–î–ò–ö–ê–õ–¨–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø Google Sheets Manager –≤ –∫–æ–º–∞–Ω–¥–µ!');
        
        const GoogleSheetsManager = require('./services/GoogleSheetsManager');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        const envSpreadsheetId = process.env.GOOGLE_SHEETS_ID;
        const envCredentials = process.env.GOOGLE_SHEETS_CREDENTIALS;
        const envEnabled = process.env.GOOGLE_SHEETS_ENABLED !== 'false';
        
        console.log('üî• –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –í –ö–û–ú–ê–ù–î–ï:');
        console.log('   GOOGLE_SHEETS_ID:', envSpreadsheetId ? '–ï–°–¢–¨' : '–ù–ï–¢');
        console.log('   GOOGLE_SHEETS_CREDENTIALS:', envCredentials ? '–ï–°–¢–¨' : '–ù–ï–¢');
        console.log('   GOOGLE_SHEETS_ENABLED:', envEnabled);
        
        if (envCredentials) {
            console.log('üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê JSON:');
            console.log('   –î–ª–∏–Ω–∞:', envCredentials.length);
            console.log('   –ü–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤:', envCredentials.substring(0, 50));
            console.log('   –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–∏–º–≤–æ–ª–æ–≤:', envCredentials.substring(envCredentials.length - 50));
            console.log('   –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å {:', envCredentials.trim().startsWith('{'));
            console.log('   –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ }:', envCredentials.trim().endsWith('}'));
        }
        
        if (!envSpreadsheetId || !envCredentials || !envEnabled) {
            return await ctx.reply(
                '‚ùå <b>Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!</b>\n\n' +
                'üîß <b>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ Railway:</b>\n' +
                '‚Ä¢ GOOGLE_SHEETS_ID\n' +
                '‚Ä¢ GOOGLE_SHEETS_CREDENTIALS\n' +
                '‚Ä¢ GOOGLE_SHEETS_ENABLED=true\n\n' +
                'üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Railway Dashboard ‚Üí Variables',
                { parse_mode: 'HTML' }
            );
        }
        
        console.log('üî• –°–æ–∑–¥–∞–µ–º Google Sheets Manager –ø—Ä—è–º–æ –≤ –∫–æ–º–∞–Ω–¥–µ...');
        const sheetsManager = new GoogleSheetsManager();
        
        // üîß –ò–°–ü–†–ê–í–õ–Ø–ï–ú –ü–†–û–ë–õ–ï–ú–£ –° –õ–ò–®–ù–ò–ú –°–ò–ú–í–û–õ–û–ú = –í –ù–ê–ß–ê–õ–ï JSON
        let cleanCredentials = envCredentials.trim();
        if (cleanCredentials.startsWith('=')) {
            console.log('üîß –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–π —Å–∏–º–≤–æ–ª = –≤ –Ω–∞—á–∞–ª–µ JSON credentials');
            cleanCredentials = cleanCredentials.substring(1);
        }
        
        const parsedCredentials = JSON.parse(cleanCredentials);
        const success = await sheetsManager.init(parsedCredentials, envSpreadsheetId);
        
        if (!success) {
            return await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ credentials.');
        }
        
        console.log('üî• Google Sheets Manager —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
        
        // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç Manual_Rates –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        try {
            await sheetsManager.createWorksheet('Manual_Rates', 
                ['–ü–∞—Ä–∞ –≤–∞–ª—é—Ç', '–ö—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏', '–ö—É—Ä—Å –ø–æ–∫—É–ø–∫–∏', '–°–ø—Ä–µ–¥ (%)', '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ', '–°—Ç–∞—Ç—É—Å', '–ò—Å—Ç–æ—á–Ω–∏–∫', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π']);
            console.log('‚úÖ –õ–∏—Å—Ç Manual_Rates —Å–æ–∑–¥–∞–Ω');
        } catch (error) {
            // –õ–∏—Å—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            console.log('‚ÑπÔ∏è –õ–∏—Å—Ç Manual_Rates —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞:', error.message);
        }
        
        // –¢–µ–ø–µ—Ä—å –∑–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏
        const initSuccess = await sheetsManager.initializeRatesTable();
        
        if (initSuccess) {
            await ctx.reply(
                '‚úÖ <b>–¢–ê–ë–õ–ò–¶–ê –ö–£–†–°–û–í –°–û–ó–î–ê–ù–ê!</b>\n\n' +
                'üìä –î–æ–±–∞–≤–ª–µ–Ω—ã –≤—Å–µ –≤–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã:\n' +
                '‚Ä¢ –ö—Ä–∏–ø—Ç–æ ‚Üí USD (BTC, ETH, USDT –∏ –¥—Ä.)\n' +
                '‚Ä¢ USD ‚Üí –§–∏–∞—Ç (RUB, ARS, EUR –∏ –¥—Ä.)\n' +
                '‚Ä¢ –ö—Ä–∏–ø—Ç–æ ‚Üí –§–∏–∞—Ç (–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞—Ä—ã)\n\n' +
                'üí° <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n' +
                '1. –û—Ç–∫—Ä–æ–π—Ç–µ Google Sheets —Ç–∞–±–ª–∏—Ü—É\n' +
                '2. –ù–∞–π–¥–∏—Ç–µ –ª–∏—Å—Ç "Manual_Rates"\n' +
                '3. –ò–∑–º–µ–Ω–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –Ω–∞ "MANUAL"\n' +
                '4. –£–∫–∞–∂–∏—Ç–µ –∫—É—Ä—Å—ã –ø—Ä–æ–¥–∞–∂–∏ –∏ –ø–æ–∫—É–ø–∫–∏\n' +
                '5. –ë–æ—Ç –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫\n\n' +
                `üîó <a href="${sheetsManager.getSpreadsheetUrl()}">–û—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É</a>`,
                { 
                    parse_mode: 'HTML',
                    disable_web_page_preview: true
                }
                            );
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
            global.googleSheetsManager = sheetsManager;
            console.log('üî• Google Sheets Manager —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ –∏–∑ –∫–æ–º–∞–Ω–¥—ã!');
            
            // üîÑ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ó–ê–ü–£–°–ö–ê–ï–ú –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Æ
            setTimeout(async () => {
                try {
                    console.log('üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∫—É—Ä—Å–æ–≤...');
                    const RatesService = require('./services/RatesService');
                    const ratesService = new RatesService();
                    await ratesService.syncWithGoogleSheets();
                    console.log('‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
                } catch (syncError) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', syncError);
                }
            }, 3000);
            
        } else {
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –∫—É—Ä—Å–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.');
        }
        
    } catch (error) {
        console.error('üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ –∫–æ–º–∞–Ω–¥–µ init_rates_table:', error);
        console.error('üî• Stack trace:', error.stack);
        await ctx.reply(
            `‚ùå <b>–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê</b>\n\n` +
            `–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –∫—É—Ä—Å–æ–≤\n` +
            `–ü—Ä–∏—á–∏–Ω–∞: ${error.message}\n\n` +
            `üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Railway`,
            { parse_mode: 'HTML' }
        );
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞: /setrate BTC 95000
bot.command('setrate', async (ctx) => {
    const userId = ctx.from.id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
    if (!(await isAdmin(userId))) {
        return await ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å –∫—É—Ä—Å—ã');
    }
    
    const args = ctx.message.text.split(' ').slice(1); // –£–±–∏—Ä–∞–µ–º /setrate
    
    if (args.length !== 2) {
        return await ctx.reply(
            '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n' +
            'üìù <b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:</b>\n' +
            '<code>/setrate BTC 95000</code>\n' +
            '<code>/setrate USDT 1.02</code>\n' +
            '<code>/setrate RUB 0.0105</code>\n\n' +
            'üí° –ü–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä - –≤–∞–ª—é—Ç–∞, –≤—Ç–æ—Ä–æ–π - –Ω–æ–≤—ã–π –∫—É—Ä—Å –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö',
            { parse_mode: 'HTML' }
        );
    }
    
    const currency = args[0].toUpperCase();
    const newPrice = parseFloat(args[1]);
    
    if (isNaN(newPrice) || newPrice <= 0) {
        return await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫—É—Ä—Å! –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.');
    }
    
    try {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –∫—É—Ä—Å
        const RatesService = require('./services/RatesService');
        const ratesService = new RatesService();
        await ratesService.setAbsoluteRate(currency, newPrice, 3600000); // –ù–∞ 1 —á–∞—Å
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
        await notifyOperators(`‚úèÔ∏è <b>–ö–£–†–° ${currency} –ò–ó–ú–ï–ù–ï–ù –ö–û–ú–ê–ù–î–û–ô</b>\n\n–ù–æ–≤—ã–π –∫—É—Ä—Å: $${newPrice.toFixed(currency === 'BTC' ? 0 : 4)}\n–ò–∑–º–µ–Ω–∏–ª: –∞–¥–º–∏–Ω ${ctx.from.first_name}\n–ö–æ–º–∞–Ω–¥–∞: /setrate`);
        
        await ctx.reply(
            `‚úÖ <b>–ö–£–†–° ${currency} –£–°–¢–ê–ù–û–í–õ–ï–ù</b>\n\n` +
            `üí± –í–∞–ª—é—Ç–∞: ${currency}\n` +
            `üí∞ –ù–æ–≤—ã–π –∫—É—Ä—Å: $${newPrice.toFixed(currency === 'BTC' ? 0 : 4)}\n` +
            `‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç: 1 —á–∞—Å\n` +
            `üîî –û–ø–µ—Ä–∞—Ç–æ—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã\n\n` +
            `üí° –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ`,
            { parse_mode: 'HTML' }
        );
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫—É—Ä—Å–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É:', error);
        await ctx.reply(
            `‚ùå <b>–û–®–ò–ë–ö–ê –£–°–¢–ê–ù–û–í–ö–ò –ö–£–†–°–ê</b>\n\n` +
            `–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å ${currency}\n` +
            `–ü—Ä–∏—á–∏–Ω–∞: ${error.message}\n\n` +
            `üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã`,
            { parse_mode: 'HTML' }
        );
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: /test_sync
bot.command('test_sync', async (ctx) => {
    const userId = ctx.from.id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
    if (!(await isAdmin(userId))) {
        return await ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é');
    }
    
    try {
        await ctx.reply('üîç –¢–µ—Å—Ç–∏—Ä—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å Google Sheets...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
        if (!global.googleSheetsManager) {
            return await ctx.reply('‚ùå global.googleSheetsManager –Ω–µ –Ω–∞–π–¥–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ /init_rates_table');
        }
        
        if (!global.googleSheetsManager.isReady()) {
            return await ctx.reply('‚ùå Google Sheets Manager –Ω–µ –≥–æ—Ç–æ–≤! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.');
        }
        
        // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–ø—Ä—è–º—É—é
        console.log('üîç –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets...');
        const manualRates = await global.googleSheetsManager.readManualRatesFromTable();
        
        let resultText = 'üìä <b>–†–ï–ó–£–õ–¨–¢–ê–¢ –ß–¢–ï–ù–ò–Ø –¢–ê–ë–õ–ò–¶–´:</b>\n\n';
        
        if (!manualRates || manualRates.length === 0) {
            resultText += '‚ùå –†—É—á–Ω—ã–µ –∫—É—Ä—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ\n';
            resultText += 'üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å—Ç–∞—Ç—É—Å = "MANUAL"';
        } else {
            resultText += `‚úÖ –ù–∞–π–¥–µ–Ω–æ ${manualRates.length} —Ä—É—á–Ω—ã—Ö –∫—É—Ä—Å–æ–≤:\n\n`;
            
            for (const rate of manualRates) {
                resultText += `‚Ä¢ ${rate.pair}: –ø—Ä–æ–¥–∞–∂–∞ ${rate.sellRate}, –ø–æ–∫—É–ø–∫–∞ ${rate.buyRate}\n`;
            }
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ì–õ–û–ë–ê–õ–¨–ù–´–ô RatesService
            resultText += '\nüîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è—é –∫—É—Ä—Å—ã...\n';
            
            if (global.ratesService) {
                console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π ratesService –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
                await global.ratesService.syncWithGoogleSheets();
            } else {
                console.log('‚ö†Ô∏è –ì–ª–æ–±–∞–ª—å–Ω—ã–π ratesService –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π');
                const RatesService = require('./services/RatesService');
                const ratesService = new RatesService();
                await ratesService.syncWithGoogleSheets();
            }
            
            resultText += '‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!';
        }
        
        await ctx.reply(resultText, { parse_mode: 'HTML' });
        
    } catch (error) {
        console.error('üî• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
        await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∫—É—Ä—Å–æ–≤: /debug_rates
bot.command('debug_rates', async (ctx) => {
    const userId = ctx.from.id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
    if (!(await isAdmin(userId))) {
        return await ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –æ—Ç–ª–∞–∂–∏–≤–∞—Ç—å –∫—É—Ä—Å—ã');
    }
    
    try {
        await ctx.reply('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫—É—Ä—Å–æ–≤...');
        
        // –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–π ratesService
        if (global.ratesService) {
            const rates = await global.ratesService.getRates();
            
            // –ò—â–µ–º RUB –∫—É—Ä—Å
            const rubRate = rates.find(r => r.currency === 'RUB');
            
            let resultText = 'üìä <b>–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–£–†–°–û–í:</b>\n\n';
            
            if (rubRate) {
                resultText += `‚úÖ RUB –∫—É—Ä—Å –Ω–∞–π–¥–µ–Ω:\n`;
                resultText += `‚Ä¢ –ü—Ä–æ–¥–∞–∂–∞: ${rubRate.sell}\n`;
                resultText += `‚Ä¢ –ü–æ–∫—É–ø–∫–∞: ${rubRate.buy}\n`;  
                resultText += `‚Ä¢ –¶–µ–Ω–∞: ${rubRate.price}\n`;
                resultText += `‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫: ${rubRate.source || 'API'}\n`;
                resultText += `‚Ä¢ –¢–∏–ø: ${rubRate.type || 'unknown'}\n`;
            } else {
                resultText += '‚ùå RUB –∫—É—Ä—Å –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –º–∞—Å—Å–∏–≤–µ –∫—É—Ä—Å–æ–≤';
            }
            
            resultText += `\nüìà –í—Å–µ–≥–æ –∫—É—Ä—Å–æ–≤: ${rates.length}`;
            
            await ctx.reply(resultText, { parse_mode: 'HTML' });
        } else {
            await ctx.reply('‚ùå global.ratesService –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
    } catch (error) {
        console.error('üî• –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∫—É—Ä—Å–æ–≤:', error);
        await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.command('start', async (ctx) => {
    const userId = ctx.from.id;
    const username = ctx.from.username;
    const firstName = ctx.from.first_name;
    const lastName = ctx.from.last_name;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    let referralCode = null;
    if (ctx.match) {
        referralCode = parseInt(ctx.match.trim());
        console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø—Ä–∏—à–µ–ª –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –æ—Ç ${referralCode}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existingUser = await db.getUser(userId);
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É —Å—Ç–∞–≤–∏–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
    await db.upsertUser({
        telegramId: userId,
        username: username,
        firstName: firstName,
        lastName: lastName,
        referredBy: existingUser ? existingUser.referred_by : referralCode
    });

    // –ï—Å–ª–∏ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—à–µ–ª –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ, —É–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
    if (!existingUser && referralCode) {
        try {
            await ctx.api.sendMessage(referralCode, 
                `üéâ <b>–ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!</b>\n\n` +
                `üë§ –ö –≤–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${firstName || username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n` +
                `üí∞ –í—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–º–∏—Å—Å–∏—é —Å –∫–∞–∂–¥–æ–≥–æ –µ–≥–æ –æ–±–º–µ–Ω–∞!`,
                { parse_mode: 'HTML' }
            );
        } catch (error) {
            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞:', error.message);
        }
    }

    const keyboard = await createMainKeyboard(userId);

    await ctx.replyWithPhoto('https://i.ibb.co/Y7bVwSgJ/image.png', {
        caption: `üöÄ ExMachinaX –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–±—è!\n\n` +
            `‚ö° –ë—ã—Å—Ç—Ä—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –æ–±–º–µ–Ω–∞ –≤–∞–ª—é—Ç\n\n` +
            `üî• –ù–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ:\n` +
            `üí± –û–±–º–µ–Ω—è—Ç—å —Ä—É–±–ª–∏\n` +
            `üí± –û–±–º–µ–Ω—è—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã\n` +
            `üíµ –û–±–º–µ–Ω –Ω–∞–ª–∏—á–Ω—ã—Ö –≤ –æ—Ñ–∏—Å–∞—Ö\n` +
            `üåç –ü–µ—Ä–µ–≤–æ–¥—ã –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É\n` +
            `üõ°Ô∏è –ë—ã—Å—Ç—Ä—ã–π –æ–±–º–µ–Ω\n` +
            `üìä –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π\n` +
            `üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ (0.2%)\n` +
            `üì± –£–¥–æ–±–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n\n` +
            `üéØ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±–º–µ–Ω!`,
        parse_mode: 'HTML',
        reply_markup: keyboard
    });
});

// –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
bot.command('weblogs', async (ctx) => {
    const userId = ctx.from.id;
    const userRole = await db.getUserRole(userId);
    
    if (userRole !== 'admin') {
        return ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º');
    }
    
    const stats = await db.getAdminStats();
    const currentTime = new Date().toLocaleString('ru-RU', {
        timeZone: 'Europe/Moscow'
    });
    
    const message = 
        `üåê <b>–ê–ö–¢–ò–í–ù–û–°–¢–¨ –í–ï–ë–ê –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò</b>\n\n` +
        `‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${currentTime}\n\n` +
        `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n` +
        `üÜï –ó–∞—è–≤–æ–∫ —Å —Å–∞–π—Ç–∞: ${stats.ordersToday || 0}\n` +
        `üë• –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.newUsersToday || 0}\n` +
        `üí∞ –û–±–æ—Ä–æ—Ç: $${(stats.volumeToday || 0).toFixed(2)}\n\n` +
        `üî• <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã:</b>\n` +
        `üìã –í –æ–∂–∏–¥–∞–Ω–∏–∏: ${stats.pendingOrders || 0}\n` +
        `üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: ${stats.processingOrders || 0}\n\n` +
        `üìà –í—Å–µ –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ø–∞–¥—É—Ç –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!\n\n` +
        `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /daily_stats –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏`;
    
    const keyboard = new InlineKeyboard()
        .text('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'refresh_weblogs')
        .text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–Ω—è', 'daily_stats')
        .row()
        .text('üõ°Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'open_admin_panel');
    
    await ctx.reply(message, {
        parse_mode: 'HTML',
        reply_markup: keyboard
    });
});

// –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
bot.command('check_env', async (ctx) => {
    const userId = ctx.from.id;
    const userRole = await db.getUserRole(userId);
    
    if (userRole !== 'admin') {
        return ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º');
    }
    
    const webappUrl = process.env.WEBAPP_URL;
    const botToken = process.env.BOT_TOKEN ? '–Ω–∞—Å—Ç—Ä–æ–µ–Ω' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
    const mainAdminId = process.env.MAIN_ADMIN_ID || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
    const adminIds = process.env.ADMIN_IDS || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
    const operatorIds = process.env.OPERATOR_IDS || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
    const port = process.env.PORT || '3000';
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –∏–∑ –±–∞–∑—ã
    const staffList = await db.getStaffList();
    const currentAdmins = staffList.filter(s => s.role === 'admin');
    const currentOperators = staffList.filter(s => s.role === 'operator');
    
    await ctx.reply(
        `üîç <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è</b>\n\n` +
        `üåê <b>WEBAPP_URL:</b> ${webappUrl || '–ù–ï –ù–ê–°–¢–†–û–ï–ù–û'}\n` +
        `ü§ñ <b>BOT_TOKEN:</b> ${botToken}\n` +
        `üëë <b>MAIN_ADMIN_ID:</b> ${mainAdminId}\n` +
        `üë• <b>ADMIN_IDS:</b> ${adminIds}\n` +
        `üë®‚Äçüíº <b>OPERATOR_IDS:</b> ${operatorIds}\n` +
        `üö™ <b>PORT:</b> ${port}\n\n` +
        `${webappUrl ? (webappUrl.startsWith('https://') ? '‚úÖ URL –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π' : '‚ùå URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://') : '‚ùå WEBAPP_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n\n` +
        `<b>–¢–µ–∫—É—â–∏–π –ø–µ—Ä—Å–æ–Ω–∞–ª –≤ –±–∞–∑–µ:</b>\n` +
        `üëë –ê–¥–º–∏–Ω—ã: ${currentAdmins.length} (${currentAdmins.map(a => a.telegram_id).join(', ')})\n` +
        `üë®‚Äçüíº –û–ø–µ—Ä–∞—Ç–æ—Ä—ã: ${currentOperators.length} (${currentOperators.map(o => o.telegram_id).join(', ')})\n\n` +
        `<b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è Railway:</b>\n` +
        `‚Ä¢ WEBAPP_URL = https://exmachinax-bot-production.up.railway.app\n` +
        `‚Ä¢ BOT_TOKEN = –≤–∞—à_—Ç–æ–∫–µ–Ω\n` +
        `‚Ä¢ MAIN_ADMIN_ID = ${userId}\n` +
        `‚Ä¢ ADMIN_IDS = 461759951,280417617\n` +
        `‚Ä¢ OPERATOR_IDS = —Å–ø–∏—Å–æ–∫_–æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤_—á–µ—Ä–µ–∑_–∑–∞–ø—è—Ç—É—é`,
        { parse_mode: 'HTML' }
    );
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
bot.command('reinit_staff', async (ctx) => {
    const userId = ctx.from.id;
    const userRole = await db.getUserRole(userId);
    
    if (userRole !== 'admin') {
        return ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º');
    }
    
    try {
        await ctx.reply('üîÑ –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã...');
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        await db.initializeAllStaff();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const staffList = await db.getStaffList();
        const admins = staffList.filter(s => s.role === 'admin');
        const operators = staffList.filter(s => s.role === 'operator');
        
        await ctx.reply(
            `‚úÖ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!</b>\n\n` +
            `üëë <b>–ê–¥–º–∏–Ω—ã (${admins.length}):</b>\n` +
            admins.map(a => `‚Ä¢ ${a.telegram_id} - ${a.first_name}`).join('\n') + '\n\n' +
            `üë®‚Äçüíº <b>–û–ø–µ—Ä–∞—Ç–æ—Ä—ã (${operators.length}):</b>\n` +
            (operators.length > 0 ? operators.map(o => `‚Ä¢ ${o.telegram_id} - ${o.first_name}`).join('\n') : '‚Ä¢ –ù–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤'),
            { parse_mode: 'HTML' }
        );
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ WebApp (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
bot.command('setup_webapp', async (ctx) => {
    const userId = ctx.from.id;
    const userRole = await db.getUserRole(userId);
    
    if (userRole !== 'admin') {
        return ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º');
    }
    
    try {
        const webappUrl = process.env.WEBAPP_URL;
        if (!webappUrl) {
            return ctx.reply('‚ùå WEBAPP_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
        }
        
        if (!webappUrl.startsWith('https://')) {
            return ctx.reply('‚ùå WEBAPP_URL –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTTPS');
        }
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Menu Button
        await bot.api.setChatMenuButton({
            menu_button: {
                type: 'web_app',
                text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å ExMachinaX',
                web_app: {
                    url: webappUrl
                }
            }
        });
        
        await ctx.reply(
            `‚úÖ <b>WebApp —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!</b>\n\n` +
            `üåê URL: ${webappUrl}\n` +
            `üì± Menu Button –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞\n\n` +
            `–¢–µ–ø–µ—Ä—å —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ "üöÄ –û—Ç–∫—Ä—ã—Ç—å ExMachinaX" –≤–æ–∑–ª–µ –ø–æ–ª—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è!`,
            { parse_mode: 'HTML' }
        );
        
    } catch (error) {
        await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ WebApp: ${error.message}`);
    }
});

// –ê–í–ê–†–ò–ô–ù–ê–Ø –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ (—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤)
bot.command('emergency_admin', async (ctx) => {
    const currentUserId = ctx.from.id;
    const targetUserId = ctx.match ? parseInt(ctx.match.trim()) : currentUserId;
    
    await ctx.reply(`üîç –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ ${targetUserId}...\nüîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö...`);
    
    try {
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
        await db.initializeAllStaff();
        
        // –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        await db.addStaffFromEnv(targetUserId, `emergency_${targetUserId}`, 'Emergency Admin', 'admin');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
        const staffList = await db.getStaffList();
        const admins = staffList.filter(s => s.role === 'admin');
        
        await ctx.reply(
            `‚úÖ <b>–≠–ö–°–¢–†–ï–ù–ù–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!</b>\n\n` +
            `üëë <b>–í—Å–µ –∞–¥–º–∏–Ω—ã (${admins.length}):</b>\n` +
            admins.map(a => `‚Ä¢ ${a.telegram_id} - ${a.first_name}`).join('\n') + '\n\n' +
            `üõ°Ô∏è –í–∞—à–∞ —Ä–æ–ª—å: ${await db.getUserRole(targetUserId)}\n` +
            `üìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏`,
            { parse_mode: 'HTML' }
        );
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ emergency_admin:', error);
        await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.message}\n\nüîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /reinit_staff`);
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–Ω—è
bot.command('daily_stats', async (ctx) => {
    const userId = ctx.from.id;
    const userRole = await db.getUserRole(userId);
    
    if (!userRole || !['admin', 'operator'].includes(userRole)) {
        return ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º');
    }
    
    const stats = await db.getAdminStats();
    const currentTime = new Date().toLocaleString('ru-RU', {
        timeZone: 'Europe/Moscow',
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });
    
    await ctx.reply(
        `üìä <b>–ë–´–°–¢–†–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>\n\n` +
        `üìÖ ${currentTime}\n\n` +
        `üöÄ <b>–°–µ–≥–æ–¥–Ω—è —Å —Å–∞–π—Ç–∞:</b>\n` +
        `‚Ä¢ –ó–∞—è–≤–æ–∫: ${stats.ordersToday || 0}\n` +
        `‚Ä¢ –û–±–æ—Ä–æ—Ç: $${(stats.volumeToday || 0).toFixed(2)}\n` +
        `‚Ä¢ –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.newUsersToday || 0}\n\n` +
        `‚ö° <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ–π—á–∞—Å:</b>\n` +
        `‚Ä¢ –û–∂–∏–¥–∞—é—Ç: ${stats.pendingOrders || 0}\n` +
        `‚Ä¢ –í —Ä–∞–±–æ—Ç–µ: ${stats.processingOrders || 0}\n` +
        `‚Ä¢ –û–ø–µ—Ä–∞—Ç–æ—Ä—ã: ${stats.activeOperators || 0}\n\n` +
        `üí∞ –†–∞—Å—á–µ—Ç–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: $${((stats.volumeToday || 0) * 0.03).toFixed(2)}`,
        {
            parse_mode: 'HTML',
            reply_markup: new InlineKeyboard()
                .text('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'daily_stats')
                .text('üìä –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'admin_full_stats')
                .row()
                .text('üåê –í–µ–±-–ª–æ–≥–∏', 'refresh_weblogs')
        }
    );
});

bot.command('help', async (ctx) => {
    const userId = ctx.from.id;
    const userRole = await db.getUserRole(userId);
    const webappUrl = process.env.WEBAPP_URL;
    let helpKeyboard = new InlineKeyboard();
    
    if (webappUrl && webappUrl.startsWith('https://')) {
        helpKeyboard.webApp('üöÄ –û—Ç–∫—Ä—ã—Ç—å ExMachinaX', `${webappUrl}?user=${userId}`);
    } else {
        helpKeyboard.text('üöÄ –û—Ç–∫—Ä—ã—Ç—å ExMachinaX', 'webapp_launch');
    }

    let helpText = `‚ö° <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ ExMachinaX Bot</b>\n\n` +
        `<b>üéÆ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n` +
        `/start - –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∏ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n` +
        `/ref - –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –∏ –∑–∞—Ä–∞–±–æ—Ç–æ–∫\n` +
        `/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n`;

    // –î–ª—è –∞–¥–º–∏–Ω–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    if (userRole === 'admin') {
        helpText += `<b>üõ°Ô∏è –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n` +
            `/admin - –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —Å –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π\n` +
            `/operator - –ü–∞–Ω–µ–ª—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞\n` +
            `/setrate BTC 95000 - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã\n` +
            `/init_rates_table - –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –∫—É—Ä—Å–æ–≤\n` +
            `/weblogs - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞\n` +
            `/setup_webapp - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Menu Button –¥–ª—è WebApp\n` +
            `/add_operator ID - –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞\n` +
            `/add_operator_forward - –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n\n`;
    }

    // –î–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    if (userRole === 'operator') {
        helpText += `<b>üë®‚Äçüíº –ö–æ–º–∞–Ω–¥—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:</b>\n` +
            `/operator - –ü–∞–Ω–µ–ª—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞\n` +
            `/daily_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å\n` +
            `üìã –ü—Ä–∏–Ω–∏–º–∞–π—Ç–µ –∑–∞–∫–∞–∑—ã –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –∫–ª–∏–µ–Ω—Ç–æ–≤\n\n`;
    }

            helpText += `<b>üî• –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã:</b>\n` +
        `üí± –û–±–º–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç (42 –ø–∞—Ä—ã)\n` +
        `üíµ –û–±–º–µ–Ω –Ω–∞–ª–∏—á–Ω—ã—Ö –≤ –æ—Ñ–∏—Å–∞—Ö\n` +
        `üõ°Ô∏è –ë—ã—Å—Ç—Ä—ã–π –æ–±–º–µ–Ω\n` +
        `üìä –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π\n` +
        `üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ (0.2%)\n\n` +
        `üöÄ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:`;

    await ctx.reply(helpText, { 
        parse_mode: 'HTML',
        reply_markup: helpKeyboard
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
bot.on('callback_query:data', async (ctx) => {
    const data = ctx.callbackQuery.data;
    const userId = ctx.from.id;
    
    console.log(`üîò –ü–æ–ª—É—á–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞: ${data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    
    if (data === 'webapp_launch') {
        try {
            await ctx.answerCallbackQuery();
            const webappUrl = process.env.WEBAPP_URL;
            
            console.log(`üîç WEBAPP_URL check: ${webappUrl ? 'exists' : 'missing'}`);
            
            if (webappUrl && webappUrl.startsWith('https://')) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å WebApp –∫–Ω–æ–ø–∫–æ–π
            await ctx.reply(
                'üöÄ <b>ExMachinaX –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–±—è!</b>\n\n' +
                'üåü –£–¥–æ–±–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ–±–º–µ–Ω–∞ –≤–∞–ª—é—Ç\n' +
                'üí± 42 –≤–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã\n' +
                'üõ°Ô∏è –ë—ã—Å—Ç—Ä—ã–π –æ–±–º–µ–Ω\n' +
                'üìä –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π\n' +
                'üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n\n' +
                'üì± –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä—è–º–æ –≤ Telegram!',
                { 
                    parse_mode: 'HTML',
                    reply_markup: new InlineKeyboard()
                        .webApp('üöÄ –û—Ç–∫—Ä—ã—Ç—å ExMachinaX', `${webappUrl}?user=${userId}`)
                        .row()
                        .text('üè† –ù–∞–∑–∞–¥ –∫ –±–æ—Ç—É', 'back_to_main')
                }
            );
        } else {
            // Fallback –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            await ctx.reply(
                '‚ö†Ô∏è <b>WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n\n' +
                '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ HTTPS URL.\n' +
                '–°–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.',
                { 
                    parse_mode: 'HTML',
                    reply_markup: new InlineKeyboard()
                        .text('üè† –ù–∞–∑–∞–¥ –∫ –±–æ—Ç—É', 'back_to_main')
                }
            );
        }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ webapp_launch:', error);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }
    
    if (data === 'contact_operator') {
        await ctx.answerCallbackQuery();
        await ctx.reply(
            'üìû <b>–°–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º</b>\n\n' +
            '–ù–∞—à–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å –≤–∞–º 24/7!\n\n' +
                    '‚úàÔ∏è Telegram: @ExMachinaXSupport\n' +
        'üìß Email: support@exmachinax.com\n' +
        'üì± –ö–∞–Ω–∞–ª: https://t.me/ExchangeMachinaX\n' +
            '‚è∞ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: –¥–æ 15 –º–∏–Ω—É—Ç',
            { 
                parse_mode: 'HTML',
                reply_markup: new InlineKeyboard()
                    .text('üè† –ù–∞–∑–∞–¥ –∫ –±–æ—Ç—É', 'back_to_main')
            }
        );
    }
    
    if (data === 'info') {
        await ctx.answerCallbackQuery();
        await ctx.reply(
            '‚ÑπÔ∏è <b>–û —Å–µ—Ä–≤–∏—Å–µ ExMachinaX</b>\n\n' +
            'üåü –ë—ã—Å—Ç—Ä—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ–±–º–µ–Ω –≤–∞–ª—é—Ç\n' +
            'üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ AML –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n' +
            'üí∞ –í—ã–≥–æ–¥–Ω—ã–µ –∫—É—Ä—Å—ã –æ–±–º–µ–Ω–∞\n' +
            'üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n' +
            'üì± –£–¥–æ–±–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n\n' +
            'üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n' +
            '‚úàÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @ExMachinaXSupport\n' +
            'üì± –ö–∞–Ω–∞–ª: https://t.me/ExchangeMachinaX\n\n' +
            'üí° –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ –Ω–∞—à—É –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Å–∏—Å—Ç–µ–º—É!',
            { 
                parse_mode: 'HTML',
                reply_markup: new InlineKeyboard()
                    .text('üè† –ù–∞–∑–∞–¥ –∫ –±–æ—Ç—É', 'back_to_main')
            }
        );
    }
    
    if (data === 'referral_stats') {
        await ctx.answerCallbackQuery();
        const stats = await db.getReferralStats(userId);
        const referrals = await db.getReferralList(userId);
        
        let message = `üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤</b>\n\n`;
        message += `üë§ –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${stats.total_referrals}\n`;
        message += `üíµ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: $${(stats.total_commission || 0).toFixed(2)}\n`;
        message += `üìà –û–±–º–µ–Ω–æ–≤: ${stats.successful_orders}\n\n`;
        
        if (referrals.length > 0) {
            message += `<b>–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:</b>\n`;
            referrals.slice(0, 10).forEach((ref, index) => {
                const name = ref.first_name || ref.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
                message += `${index + 1}. ${name} - ${ref.orders_count} –æ–±–º–µ–Ω–æ–≤, $${(ref.total_earned || 0).toFixed(2)}\n`;
            });
            
            if (referrals.length > 10) {
                message += `\n... –∏ –µ—â–µ ${referrals.length - 10} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤`;
            }
        } else {
            message += `üòä –ü–æ–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –Ω–µ—Ç. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–æ–π!`;
        }
        
        await ctx.replyWithPhoto('https://i.ibb.co/Y7bVwSgJ/image.png', {
            caption: message,
            parse_mode: 'HTML',
            reply_markup: await createMainKeyboard(userId)
        });
    }

    // === –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ ===
    
    // –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if (data === 'admin_full_stats') {
        if (!(await isAdmin(userId))) return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        
        await ctx.answerCallbackQuery();
        const stats = await db.getAdminStats();
        const topReferrers = await db.getTopReferrers(5);
        
        let referrersText = '';
        topReferrers.forEach((ref, i) => {
            referrersText += `${i + 1}. ${ref.first_name || ref.username || 'User'}: ${ref.referrals_count} —Ä–µ—Ñ. ($${ref.total_earned.toFixed(2)})\n`;
        });
        
        const statsKeyboard = new InlineKeyboard()
            .text('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'admin_full_stats')
            .text('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–Ω—è', 'admin_daily_stats')
            .row()
            .text('üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ', 'admin_back');

        await ctx.reply(
            `üìä <b>–ü–û–î–†–û–ë–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>\n\n` +
            `üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n` +
            `‚Ä¢ –í—Å–µ–≥–æ: ${stats.totalUsers}\n` +
            `‚Ä¢ –°–µ–≥–æ–¥–Ω—è: +${stats.newUsersToday}\n\n` +
            `üìã <b>–ó–∞–∫–∞–∑—ã:</b>\n` +
            `‚Ä¢ –í—Å–µ–≥–æ: ${stats.totalOrders}\n` +
            `‚Ä¢ –°–µ–≥–æ–¥–Ω—è: ${stats.ordersToday}\n` +
            `‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${stats.completedOrders}\n` +
            `‚Ä¢ –í –æ–∂–∏–¥–∞–Ω–∏–∏: ${stats.pendingOrders}\n` +
            `‚Ä¢ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: ${stats.processingOrders}\n\n` +
            `üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã:</b>\n` +
            `‚Ä¢ –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç: $${(stats.totalVolume || 0).toFixed(2)}\n` +
            `‚Ä¢ –°–µ–≥–æ–¥–Ω—è: $${(stats.volumeToday || 0).toFixed(2)}\n` +
            `‚Ä¢ –û–±—â–∏–µ –∫–æ–º–∏—Å—Å–∏–∏: $${(stats.totalCommissions || 0).toFixed(2)}\n\n` +
            `üë®‚Äçüíº <b>–ü–µ—Ä—Å–æ–Ω–∞–ª:</b>\n` +
            `‚Ä¢ –í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${stats.activeStaff}\n` +
            `‚Ä¢ –û–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤: ${stats.activeOperators}\n` +
            `‚Ä¢ –ù–∞–∑–Ω–∞—á–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${stats.assignedOrders}\n\n` +
            `üèÜ <b>–¢–æ–ø —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤:</b>\n${referrersText || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}`,
            { 
                parse_mode: 'HTML',
                reply_markup: statsKeyboard
            }
        );
    }
    
    // –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–Ω—è
    if (data === 'daily_stats') {
        const userRole = await db.getUserRole(userId);
        if (!userRole || !['admin', 'operator'].includes(userRole)) {
            return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        }
        
        await ctx.answerCallbackQuery();
        const stats = await db.getAdminStats();
        const currentTime = new Date().toLocaleString('ru-RU', {
            timeZone: 'Europe/Moscow',
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
        
        await ctx.reply(
            `üìä <b>–ê–ö–¢–ò–í–ù–û–°–¢–¨ –ó–ê –°–ï–ì–û–î–ù–Ø</b>\n\n` +
            `üìÖ ${currentTime}\n\n` +
            `üöÄ <b>–ó–∞—è–≤–∫–∏ —Å —Å–∞–π—Ç–∞:</b>\n` +
            `‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫: ${stats.ordersToday || 0}\n` +
            `‚Ä¢ –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç: $${(stats.volumeToday || 0).toFixed(2)}\n` +
            `‚Ä¢ –í –æ–∂–∏–¥–∞–Ω–∏–∏: ${stats.pendingOrders || 0}\n` +
            `‚Ä¢ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: ${stats.processingOrders || 0}\n\n` +
            `üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n` +
            `‚Ä¢ –ù–æ–≤—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: ${stats.newUsersToday || 0}\n` +
            `‚Ä¢ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.totalUsers || 0}\n\n` +
            `üí∞ <b>–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:</b>\n` +
            `‚Ä¢ –ö–æ–º–∏—Å—Å–∏–∏ –∑–∞ –¥–µ–Ω—å: $${((stats.volumeToday || 0) * 0.03).toFixed(2)}\n` +
            `‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã: $${((stats.volumeToday || 0) * 0.002).toFixed(2)}\n\n` +
            `üéØ <b>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n` +
            `‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è –∑–∞—è–≤–æ–∫: ${stats.ordersToday > 0 ? Math.round((stats.completedOrders || 0) / stats.ordersToday * 100) : 0}%\n` +
            `‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: $${stats.ordersToday > 0 ? ((stats.volumeToday || 0) / stats.ordersToday).toFixed(0) : 0}`,
            { 
                parse_mode: 'HTML',
                reply_markup: new InlineKeyboard()
                    .text('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'daily_stats')
                    .text('üìä –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'admin_full_stats')
                    .row()
                    .text('üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ', 'admin_back')
                         }
         );
     }
     
     // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ–±-–ª–æ–≥–æ–≤
     if (data === 'refresh_weblogs') {
         const userRole = await db.getUserRole(userId);
         if (userRole !== 'admin') return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
         
         await ctx.answerCallbackQuery('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º...');
         const stats = await db.getAdminStats();
         const currentTime = new Date().toLocaleString('ru-RU', {
             timeZone: 'Europe/Moscow'
         });
         
         const message = 
             `üåê <b>–ê–ö–¢–ò–í–ù–û–°–¢–¨ –í–ï–ë–ê –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò</b>\n\n` +
             `‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${currentTime}\n\n` +
             `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n` +
             `üÜï –ó–∞—è–≤–æ–∫ —Å —Å–∞–π—Ç–∞: ${stats.ordersToday || 0}\n` +
             `üë• –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.newUsersToday || 0}\n` +
             `üí∞ –û–±–æ—Ä–æ—Ç: $${(stats.volumeToday || 0).toFixed(2)}\n\n` +
             `üî• <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã:</b>\n` +
             `üìã –í –æ–∂–∏–¥–∞–Ω–∏–∏: ${stats.pendingOrders || 0}\n` +
             `üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: ${stats.processingOrders || 0}\n\n` +
             `üìà –í—Å–µ –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ø–∞–¥—É—Ç –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!\n\n` +
             `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /daily_stats –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏`;
         
         const keyboard = new InlineKeyboard()
             .text('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'refresh_weblogs')
             .text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–Ω—è', 'daily_stats')
             .row()
             .text('üõ°Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'open_admin_panel');
         
         await ctx.editMessageText(message, {
             parse_mode: 'HTML',
             reply_markup: keyboard
         });
     }
     
     // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º
    if (data === 'admin_staff') {
        const userRole = await db.getUserRole(userId);
        if (userRole !== 'admin') return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        
        await ctx.answerCallbackQuery();
        const staff = await db.getStaffList();
        
        // üéØ –ö–†–ê–°–ò–í–´–ô –ú–ê–ü–ü–ò–ù–ì –ü–ï–†–°–û–ù–ê–õ–ê –° –ò–ú–ï–ù–ê–ú–ò –ò –°–°–´–õ–ö–ê–ú–ò
        const staffInfo = {
            '461759951': { name: 'NIC Admin', username: 'simeply', role: 'admin' },
            '280417617': { name: 'ART Admin', username: 'MISTERNECH', role: 'admin' },
            '7692725312': { name: '–û–ø–µ—Ä–∞—Ç–æ—Ä', username: 'ExMachinaXSupport', role: 'operator' },
            '8141463258': { name: 'DEV', username: 'pavel_xdev', role: 'admin' }
        };
        
        let staffText = '';
        staff.forEach(member => {
            const roleEmoji = member.role === 'admin' ? 'üõ°Ô∏è' : 'üë®‚Äçüíº';
            const statusEmoji = member.is_active ? '‚úÖ' : '‚ùå';
            
            // –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –∏–º—è –∏ —Å—Å—ã–ª–∫—É
            const memberInfo = staffInfo[member.telegram_id.toString()];
            let displayName;
            
            if (memberInfo) {
                displayName = `<b>${memberInfo.name}</b> (@${memberInfo.username})`;
            } else {
                // Fallback –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
                displayName = `${member.first_name || member.username || member.telegram_id}`;
            }
            
            staffText += `${roleEmoji} ${statusEmoji} ${displayName}\n`;
            staffText += `   üìä –ó–∞–∫–∞–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${member.orders_handled || 0}\n`;
            staffText += `   üÜî ID: <code>${member.telegram_id}</code>\n\n`;
        });
        
        const staffKeyboard = new InlineKeyboard()
            .text('‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞', 'admin_add_operator')
            .text('‚ûñ –£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', 'admin_remove_staff')
            .row()
            .text('üîô –ù–∞–∑–∞–¥', 'admin_back');
        
        await ctx.reply(
            `üë• <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–ï–†–°–û–ù–ê–õ–û–ú</b>\n\n` +
            `${staffText || '–ü–µ—Ä—Å–æ–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'}`,
            { 
                parse_mode: 'HTML',
                reply_markup: staffKeyboard
            }
        );
    }
    


    // === –û–ü–ï–†–ê–¢–û–†–°–ö–ê–Ø –ü–ê–ù–ï–õ–¨ ===
    
    // –°–≤–æ–±–æ–¥–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    if (data === 'op_unassigned_orders') {
        const userRole = await db.getUserRole(userId);
        if (!userRole || !['admin', 'operator'].includes(userRole)) {
            return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        }
        
        await ctx.answerCallbackQuery();
        const orders = await db.getUnassignedOrders();
        
        if (orders.length === 0) {
            return ctx.reply('üìã –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤');
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–∞–∫–∞–∑–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–∏–Ω—è—Ç–∏—è
        let ordersText = `üìã <b>–°–í–û–ë–û–î–ù–´–ï –ó–ê–ö–ê–ó–´ (${orders.length})</b>\n\n`;
        const keyboard = new InlineKeyboard();
        
        orders.slice(0, 3).forEach((order, i) => {
            ordersText += `üÜî <b>–ó–∞–∫–∞–∑ #${order.id}</b>\n`;
            ordersText += `üí± ${order.from_amount} ${order.from_currency} ‚Üí ${order.to_currency}\n`;
            ordersText += `üë§ ${order.first_name || order.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n`;
            ordersText += `üìÖ ${new Date(order.created_at).toLocaleString('ru')}\n`;
            ordersText += `üí∞ –°—É–º–º–∞: ~$${(order.to_amount || order.from_amount * 50000).toFixed(0)}\n\n`;
            
            keyboard.text(`‚úÖ –ü—Ä–∏–Ω—è—Ç—å #${order.id}`, `take_order_${order.id}`);
            if (i % 2 === 1) keyboard.row();
        });
        
        keyboard.row().text('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'op_unassigned_orders').text('üîô –ù–∞–∑–∞–¥', 'op_back');
        
        await ctx.reply(ordersText, { 
            parse_mode: 'HTML',
            reply_markup: keyboard
        });
    }
    
    // –ú–æ–∏ –∑–∞–∫–∞–∑—ã
    if (data === 'op_my_orders') {
        const userRole = await db.getUserRole(userId);
        if (!userRole || !['admin', 'operator'].includes(userRole)) {
            return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        }
        
        await ctx.answerCallbackQuery();
        const myOrders = await db.getOperatorOrders(userId);
        
        if (myOrders.length === 0) {
            return ctx.reply('üìù –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤');
        }
        
        let ordersText = `üìù <b>–ú–û–ò –ó–ê–ö–ê–ó–´ (${myOrders.length})</b>\n\n`;
        const keyboard = new InlineKeyboard();
        
        myOrders.slice(0, 5).forEach((order, i) => {
            const statusEmoji = {
                'assigned': 'üìã',
                'in_progress': 'üîÑ', 
                'completed': '‚úÖ',
                'cancelled': '‚ùå'
            }[order.assignment_status] || 'üìã';
            
            ordersText += `${statusEmoji} <b>–ó–∞–∫–∞–∑ #${order.id}</b>\n`;
            ordersText += `üí± ${order.from_amount} ${order.from_currency} ‚Üí ${order.to_currency}\n`;
            ordersText += `üë§ ${order.first_name || order.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n`;
            ordersText += `üìÖ ${new Date(order.assigned_at).toLocaleString('ru')}\n`;
            ordersText += `üìä –°—Ç–∞—Ç—É—Å: ${order.assignment_status}\n\n`;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
            keyboard.text(`‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ #${order.id}`, `manage_order_${order.id}`);
            if (i % 2 === 1) keyboard.row();
        });
        
        keyboard.row().text('üîô –ù–∞–∑–∞–¥', 'op_back');
        
        await ctx.reply(ordersText, { 
            parse_mode: 'HTML',
            reply_markup: keyboard
        });
    }
    
    // –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–∫–∞–∑–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
    if (data.startsWith('take_order_')) {
        const userRole = await db.getUserRole(userId);
        if (!userRole || !['admin', 'operator'].includes(userRole)) {
            return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        }
        
        const orderId = parseInt(data.replace('take_order_', ''));
        
        try {
            await db.assignOrder(orderId, userId);
            await ctx.answerCallbackQuery('‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!');
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const order = (await db.getOperatorOrders(userId)).find(o => o.id === orderId);
            if (order) {
                try {
                    await ctx.api.sendMessage(order.user_id,
                        `‚úÖ <b>–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º!</b>\n\n` +
                        `üÜî –ó–∞–∫–∞–∑ #${orderId}\n` +
                        `üí± ${order.from_amount} ${order.from_currency} ‚Üí ${order.to_currency}\n\n` +
                        `üë®‚Äçüíº –° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–º–µ–Ω–∞.`,
                        { parse_mode: 'HTML' }
                    );
                } catch (error) {
                    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
                }
            }
            
            await ctx.reply(
                `‚úÖ <b>–ó–∞–∫–∞–∑ #${orderId} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç!</b>\n\n` +
                `üîÑ –ó–∞–∫–∞–∑ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫.\n` +
                `üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–º–µ–Ω–∞.\n\n` +
                `üí° –û—Ç–∫—Ä–æ–π—Ç–µ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–æ–º:`,
                { 
                    parse_mode: 'HTML',
                    reply_markup: new InlineKeyboard()
                        .text('üéõÔ∏è –û—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É', `manage_order_${orderId}`)
                        .text('üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã', 'op_my_orders')
                        .row()
                        .text('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main')
                }
            );
            
        } catch (error) {
            await ctx.answerCallbackQuery(`‚ùå ${error.message}`);
        }
    }
    
    // –í–∑—è—Ç–∏–µ –∑–∞–∫–∞–∑–∞ –≤ —Ä–∞–±–æ—Ç—É
    if (data.startsWith('start_order_')) {
        const userRole = await db.getUserRole(userId);
        if (!userRole || !['admin', 'operator'].includes(userRole)) {
            return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        }
        
        const orderId = parseInt(data.replace('start_order_', ''));
        
        try {
            await db.updateOrderAssignmentStatus(orderId, 'in_progress');
            await ctx.answerCallbackQuery('üîÑ –ó–∞–∫–∞–∑ –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É!');
            
            await ctx.reply(
                `üîÑ <b>–ó–∞–∫–∞–∑ #${orderId} –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É!</b>\n\n` +
                `üíº –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "–í –ø—Ä–æ—Ü–µ—Å—Å–µ".\n` +
                `üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.`,
                { parse_mode: 'HTML' }
            );
            
        } catch (error) {
            await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
        }
    }

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–º
    if (data.startsWith('manage_order_')) {
        const userRole = await db.getUserRole(userId);
        if (!userRole || !['admin', 'operator'].includes(userRole)) {
            return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        }
        
        const orderId = parseInt(data.replace('manage_order_', ''));
        
        try {
            await ctx.answerCallbackQuery('‚öôÔ∏è –û—Ç–∫—Ä—ã–≤–∞—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...');
            
            const order = await db.getOrderWithClient(orderId);
            if (!order) {
                return ctx.reply('‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∑–∞–∫–∞–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            if (order.operator_id !== userId) {
                return ctx.reply('‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à –∑–∞–∫–∞–∑');
            }
            
            const statusText = {
                'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç',
                'processing': 'üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ',
                'payment_details_sent': 'üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã',
                'payment_waiting': '‚è∞ –ñ–¥–µ–º –æ–ø–ª–∞—Ç—É',
                'payment_received': 'üí∞ –ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω',
                'payment_confirmed': '‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞',
                'sending': 'üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º',
                'completed': 'üéâ –ó–∞–≤–µ—Ä—à–µ–Ω',
                'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω'
            }[order.status] || order.status;
            
            let orderText = `‚öôÔ∏è <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–û–ú #${order.id}</b>\n\n`;
            orderText += `üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> ${order.client_first_name || order.client_username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n`;
            orderText += `üí± <b>–û–±–º–µ–Ω:</b> ${order.from_amount} ${order.from_currency} ‚Üí ${order.to_amount} ${order.to_currency}\n`;
            orderText += `üìä <b>–°—Ç–∞—Ç—É—Å:</b> ${statusText}\n`;
            orderText += `üè¶ <b>–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω–∏—è:</b> <code>${order.to_address}</code>\n`;
            orderText += `üí≥ <b>–ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> <code>${order.from_address}</code>\n`;
            orderText += `üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> ${new Date(order.created_at).toLocaleString('ru')}\n\n`;
            
            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            const keyboard = new InlineKeyboard();
            
            if (order.status === 'pending' || order.status === 'processing') {
                keyboard
                    .text('üí≥ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã', `send_payment_details_${orderId}`)
                    .text('üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É', `chat_with_client_${orderId}`)
                    .row();
            }
            
            if (order.status === 'payment_details_sent' || order.status === 'payment_waiting') {
                keyboard
                    .text('‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞', `payment_received_${orderId}`)
                    .text('üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É', `chat_with_client_${orderId}`)
                    .row();
            }
            
            if (order.status === 'payment_received') {
                keyboard
                    .text('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É', `confirm_payment_${orderId}`)
                    .text('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É', `reject_payment_${orderId}`)
                    .row()
                    .text('üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É', `chat_with_client_${orderId}`);
            }
            
            if (order.status === 'payment_confirmed') {
                keyboard
                    .text('üì§ –°—Ä–µ–¥—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã', `funds_sent_${orderId}`)
                    .text('üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É', `chat_with_client_${orderId}`)
                    .row();
            }
            
            if (order.status === 'sending') {
                keyboard
                    .text('üéâ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑', `complete_order_${orderId}`)
                    .text('üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É', `chat_with_client_${orderId}`)
                    .row();
            }
            
            // –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
            keyboard
                .text('üí¨ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞', `view_chat_${orderId}`)
                .text('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', `cancel_order_${orderId}`)
                .row()
                .text('üîô –ö –º–æ–∏–º –∑–∞–∫–∞–∑–∞–º', 'op_my_orders');
            
            await ctx.reply(orderText, {
                parse_mode: 'HTML',
                reply_markup: keyboard
            });
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–º:', error);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–∞');
        }
    }

    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–¢–ê–¢–£–°–û–í –ó–ê–ö–ê–ó–û–í ===

    // –í—ã–±–æ—Ä —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    if (data.startsWith('send_payment_details_')) {
        const userRole = await db.getUserRole(userId);
        if (!userRole || !['admin', 'operator'].includes(userRole)) {
            return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        }
        
        const orderId = parseInt(data.replace('send_payment_details_', ''));
        
        await ctx.answerCallbackQuery('üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã...');
        
        try {
            const order = await db.getOrderWithClient(orderId);
            if (!order) {
                return ctx.reply('‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            await ctx.reply(
                `üí≥ <b>–í–´–ë–û–† –†–ï–ö–í–ò–ó–ò–¢–û–í</b>\n\n` +
                `üÜî –ó–∞–∫–∞–∑ #${orderId}\n` +
                `üë§ –ö–ª–∏–µ–Ω—Ç: ${order.client_first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n` +
                `üí∞ –ö –æ–ø–ª–∞—Ç–µ: ${order.from_amount} ${order.from_currency}\n\n` +
                `üìã –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–µ –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ:`,
                {
                    parse_mode: 'HTML',
                    reply_markup: new InlineKeyboard()
                        .text('üî¥ TRC-20 USDT', `send_preset_details_${orderId}_trc20`)
                        .text('üí∏ BEP-20 USDT', `send_preset_details_${orderId}_bep20`)
                        .row()
                        .text('üí∏ ByBit ID', `send_preset_details_${orderId}_bybit`)
                        .row()
                        .text('‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã', `custom_details_${orderId}`)
                        .row()
                        .text('üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑—É', `manage_order_${orderId}`)
                }
            );
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤:', error);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–∞');
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ—Ç–æ–≤—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
    if (data.startsWith('send_preset_details_')) {
        const userRole = await db.getUserRole(userId);
        if (!userRole || !['admin', 'operator'].includes(userRole)) {
            return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        }
        
        const parts = data.replace('send_preset_details_', '').split('_');
        const orderId = parseInt(parts[0]);
        const bankType = parts[1];
        
        const presetDetails = {
            trc20: {
                name: 'TRC-20 USDT',
                address: 'THcSDj69NjoD9Ev53mK9cx3jF7AswMDtcW',
                network: 'TRON (TRC-20)',
                currency: 'USDT',
                emoji: 'üî¥'
            },
            bep20: {
                name: 'BEP-20 USDT',
                address: '0x1d0aea9b2ba322de2e5a2e0745dd42a943320ea6',
                network: 'BSC (BEP-20)',
                currency: 'USDT',
                emoji: 'üí∏'
            },
            bybit: {
                name: 'ByBit ID',
                address: '47028037',
                network: 'ByBit Exchange',
                currency: 'USDT/USDC/BTC/ETH',
                emoji: 'üí∏'
            }
        };
        
        const details = presetDetails[bankType];
        if (!details) {
            return ctx.answerCallbackQuery('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤');
        }
        
        try {
            const result = await db.updateOrderStatusWithMessage(orderId, 'payment_details_sent', userId, 
                `üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã ${details.name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç—É. –û–∂–∏–¥–∞–µ–º –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤.`);
            
            const order = await db.getOrderWithClient(orderId);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∫–ª–∏–µ–Ω—Ç—É
            await ctx.api.sendMessage(order.client_id,
                `üí≥ <b>–ê–î–†–ï–° –î–õ–Ø –ü–ï–†–ï–í–û–î–ê</b>\n\n` +
                `üÜî –ó–∞–∫–∞–∑ #${orderId}\n` +
                `üí∞ –ö –ø–µ—Ä–µ–≤–æ–¥—É: <b>${order.from_amount} ${order.from_currency}</b>\n\n` +
                `${details.emoji} <b>${details.name}</b>\n` +
                `üè¶ –°–µ—Ç—å: ${details.network}\n` +
                `üíé –í–∞–ª—é—Ç–∞: ${details.currency}\n` +
                `üìç –ê–¥—Ä–µ—Å: <code>${details.address}</code>\n\n` +
                `‚ö†Ô∏è <b>–í–ê–ñ–ù–û:</b>\n` +
                `‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥–∏—Ç–µ –¢–û–ß–ù–£–Æ —Å—É–º–º—É: ${order.from_amount} ${order.from_currency}\n` +
                `‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ç—å –ø–µ—Ä–µ–≤–æ–¥–∞!\n` +
                `‚Ä¢ –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –û—Ç–ø—Ä–∞–≤–∏–ª"\n` +
                `‚Ä¢ –í—Ä–µ–º—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è: 5-30 –º–∏–Ω—É—Ç\n\n` +
                `üìû –í–æ–ø—Ä–æ—Å—ã? –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É!`,
                { 
                    parse_mode: 'HTML',
                    reply_markup: new InlineKeyboard()
                        .text('‚úÖ –Ø –æ—Ç–ø—Ä–∞–≤–∏–ª', `client_paid_${orderId}`)
                        .text('üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º', `client_chat_${orderId}`)
                        .row()
                        .text('üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å', `copy_address_${details.address}`)
                }
            );
            
            await ctx.answerCallbackQuery(`‚úÖ –ê–¥—Ä–µ—Å ${details.name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!`);
            await ctx.reply(
                `‚úÖ <b>–ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n` +
                `üè¶ –°–µ—Ç—å: ${details.name}\n` +
                `üìç –ê–¥—Ä–µ—Å: ${details.address}\n` +
                `üÜî –ó–∞–∫–∞–∑ #${orderId}\n\n` +
                `${result.message}`,
                { 
                    parse_mode: 'HTML',
                    reply_markup: new InlineKeyboard()
                        .text('üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–º', `manage_order_${orderId}`)
                }
            );
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ—Ç–æ–≤—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤:', error);
            await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤');
        }
    }

    // –í–≤–æ–¥ –Ω–æ–≤—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
    if (data.startsWith('custom_details_')) {
        const userRole = await db.getUserRole(userId);
        if (!userRole || !['admin', 'operator'].includes(userRole)) {
            return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        }
        
        const orderId = parseInt(data.replace('custom_details_', ''));
        
        await ctx.answerCallbackQuery('‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã...');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        chatContexts.set(userId, { 
            action: 'input_custom_details',
            orderId: orderId
        });
        
        await ctx.reply(
            `‚úçÔ∏è <b>–í–í–û–î –ù–û–í–û–ì–û –ê–î–†–ï–°–ê</b>\n\n` +
            `üÜî –ó–∞–∫–∞–∑ #${orderId}\n\n` +
            `üìù –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n` +
            `<b>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ç–∏</b>\n` +
            `üìç –ê–¥—Ä–µ—Å\n` +
            `üè¶ –û–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ç–∏\n` +
            `üíé –í–∞–ª—é—Ç–∞\n\n` +
            `<b>–ü—Ä–∏–º–µ—Ä:</b>\n` +
            `TRC-20 USDT\n` +
            `THcSDj69NjoD9Ev53mK9cx3jF7AswMDtcW\n` +
            `TRON (TRC-20)\n` +
            `USDT`,
            { 
                parse_mode: 'HTML',
                reply_markup: new InlineKeyboard()
                    .text('‚ùå –û—Ç–º–µ–Ω–∞', `send_payment_details_${orderId}`)
            }
        );
    }

    // –ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω
    if (data.startsWith('payment_received_')) {
        const userRole = await db.getUserRole(userId);
        if (!userRole || !['admin', 'operator'].includes(userRole)) {
            return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        }
        
        const orderId = parseInt(data.replace('payment_received_', ''));
        
        try {
            const result = await db.updateOrderStatusWithMessage(orderId, 'payment_received', userId,
                'üí∞ –ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω! –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤...');
            
            const order = await db.getOrderWithClient(orderId);
            
            await ctx.api.sendMessage(order.client_id,
                `üí∞ <b>–ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω!</b>\n\n` +
                `üÜî –ó–∞–∫–∞–∑ #${orderId}\n` +
                `‚úÖ –í–∞—à –ø–ª–∞—Ç–µ–∂ –ø–æ—Å—Ç—É–ø–∏–ª –∫ –Ω–∞–º\n` +
                `üîÑ –ü—Ä–æ–≤–æ–¥–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ä–µ–¥—Å—Ç–≤\n\n` +
                `‚è∞ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: –¥–æ 10 –º–∏–Ω—É—Ç\n` +
                `üì± –£–≤–µ–¥–æ–º–∏–º –≤–∞—Å –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ!`,
                { parse_mode: 'HTML' }
            );
            
            await ctx.answerCallbackQuery('‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!');
            await ctx.reply(`‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #${orderId} –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n${result.message}`);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
            await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
        }
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É
    if (data.startsWith('confirm_payment_')) {
        const userRole = await db.getUserRole(userId);
        if (!userRole || !['admin', 'operator'].includes(userRole)) {
            return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        }
        
        const orderId = parseInt(data.replace('confirm_payment_', ''));
        
        try {
            const result = await db.updateOrderStatusWithMessage(orderId, 'payment_confirmed', userId,
                '‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Ä–µ–¥—Å—Ç–≤...');
            
            const order = await db.getOrderWithClient(orderId);
            
            await ctx.api.sendMessage(order.client_id,
                `‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n` +
                `üÜî –ó–∞–∫–∞–∑ #${orderId}\n` +
                `üí∞ –°—É–º–º–∞: ${order.from_amount} ${order.from_currency}\n` +
                `‚úÖ –°—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã\n\n` +
                `üì§ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞ –≤–∞—à –∞–¥—Ä–µ—Å:\n` +
                `üè¶ <code>${order.to_address}</code>\n\n` +
                `‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: –¥–æ 30 –º–∏–Ω—É—Ç`,
                { parse_mode: 'HTML' }
            );
            
            await ctx.answerCallbackQuery('‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!');
            await ctx.reply(`‚úÖ –û–ø–ª–∞—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #${orderId} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n${result.message}`);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã:', error);
            await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã');
        }
    }

    // –°—Ä–µ–¥—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
    if (data.startsWith('funds_sent_')) {
        console.log(`üî• –ù–ê–ñ–ê–¢–ê –ö–ù–û–ü–ö–ê –°–†–ï–î–°–¢–í–ê –û–¢–ü–†–ê–í–õ–ï–ù–´! User: ${userId}, Data: ${data}`);
        
        const userRole = await db.getUserRole(userId);
        console.log(`üë§ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userRole}`);
        
        if (!userRole || !['admin', 'operator'].includes(userRole)) {
            console.log(`‚ùå –ù–µ—Ç –ø—Ä–∞–≤! –†–æ–ª—å: ${userRole}`);
            return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        }
        
        const orderId = parseInt(data.replace('funds_sent_', ''));
        console.log(`üìã Order ID: ${orderId}`);
        
        try {
            console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ${orderId} –Ω–∞ 'sending'...`);
            const result = await db.updateOrderStatusWithMessage(orderId, 'sending', userId,
                'üì§ –°—Ä–µ–¥—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –∞–¥—Ä–µ—Å! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è...');
            console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω:`, result);
            
            const order = await db.getOrderWithClient(orderId);
            console.log(`üìã –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:`, order ? `ID: ${order.id}, Client: ${order.client_id}` : '–ù–ï –ù–ê–ô–î–ï–ù');
            
            await ctx.api.sendMessage(order.client_id,
                `üì§ <b>–°—Ä–µ–¥—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!</b>\n\n` +
                `üÜî –ó–∞–∫–∞–∑ #${orderId}\n` +
                `üí∞ –°—É–º–º–∞: ${order.to_amount} ${order.to_currency}\n` +
                `üè¶ –ù–∞ –∞–¥—Ä–µ—Å: <code>${order.to_address}</code>\n\n` +
                `‚è∞ –í—Ä–µ–º—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è: 10-60 –º–∏–Ω—É—Ç\n` +
                `üîç –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≤–∞—à–µ–º –∫–æ—à–µ–ª—å–∫–µ\n\n` +
                `‚úÖ –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤ –±–æ—Ç–µ!`,
                { 
                    parse_mode: 'HTML',
                    reply_markup: new InlineKeyboard()
                        .text('‚úÖ –ü–æ–ª—É—á–∏–ª —Å—Ä–µ–¥—Å—Ç–≤–∞', `client_received_${orderId}`)
                        .text('‚ùì –ù–µ –ø–æ–ª—É—á–∏–ª', `client_not_received_${orderId}`)
                }
            );
            
            console.log(`üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º callback –∏ –æ—Ç–≤–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä—É...`);
            await ctx.answerCallbackQuery('‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!');
            await ctx.reply(`‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #${orderId} –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n${result.message}`);
            console.log(`üéâ –í–°–ï –£–°–ü–ï–®–ù–û! –ö–Ω–æ–ø–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Å—Ä–∞–±–æ—Ç–∞–ª–∞!`);
            
        } catch (error) {
            console.error('‚ùåüî• –û–®–ò–ë–ö–ê –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ funds_sent_:', error);
            await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
        }
    }

    // –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑
    if (data.startsWith('complete_order_')) {
        const userRole = await db.getUserRole(userId);
        if (!userRole || !['admin', 'operator'].includes(userRole)) {
            return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        }
        
        const orderId = parseInt(data.replace('complete_order_', ''));
        
        try {
            const result = await db.updateOrderStatusWithMessage(orderId, 'completed', userId,
                'üéâ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ExMachinaX!');
            
            const order = await db.getOrderWithClient(orderId);
            
            await ctx.api.sendMessage(order.client_id,
                `üéâ <b>–ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n` +
                `üÜî –ó–∞–∫–∞–∑ #${orderId}\n` +
                `‚úÖ –û–±–º–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω\n` +
                `üí∞ –ü–æ–ª—É—á–µ–Ω–æ: ${order.to_amount} ${order.to_currency}\n\n` +
                `üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ExMachinaX!\n` +
                `‚≠ê –û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à —Å–µ—Ä–≤–∏—Å: /feedback\n` +
                `üí∞ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π: /ref`,
                { parse_mode: 'HTML' }
            );
            
            await ctx.answerCallbackQuery('üéâ –ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!');
            await ctx.reply(`üéâ –ó–∞–∫–∞–∑ #${orderId} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n${result.message}`);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
            await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞');
        }
    }

    // –ü—Ä–æ—Å–º–æ—Ç—Ä —á–∞—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º
    if (data.startsWith('view_chat_')) {
        const userRole = await db.getUserRole(userId);
        if (!userRole || !['admin', 'operator'].includes(userRole)) {
            return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        }
        
        const orderId = parseInt(data.replace('view_chat_', ''));
        
        try {
            await ctx.answerCallbackQuery('üí¨ –ó–∞–≥—Ä—É–∂–∞—é —á–∞—Ç...');
            
            const [order, messages] = await Promise.all([
                db.getOrderWithClient(orderId),
                db.getOrderMessages(orderId)
            ]);
            
            if (!order) {
                return ctx.reply('‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            let chatText = `üí¨ <b>–ß–ê–¢ –ü–û –ó–ê–ö–ê–ó–£ #${orderId}</b>\n`;
            chatText += `üë§ –ö–ª–∏–µ–Ω—Ç: ${order.client_first_name || order.client_username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n\n`;
            
            if (messages.length === 0) {
                chatText += `üìù –°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç\n\n`;
            } else {
                messages.slice(-10).forEach(msg => {
                    const time = new Date(msg.created_at).toLocaleTimeString('ru', { 
                        hour: '2-digit', 
                        minute: '2-digit' 
                    });
                    const sender = msg.sender_type === 'operator' ? 'üë®‚Äçüíº' : 'üë§';
                    chatText += `${sender} <b>${msg.sender_name}:</b> [${time}]\n${msg.message}\n\n`;
                });
                
                if (messages.length > 10) {
                    chatText += `... –∏ –µ—â–µ ${messages.length - 10} —Å–æ–æ–±—â–µ–Ω–∏–π\n\n`;
                }
            }
            
            const keyboard = new InlineKeyboard()
                .text('üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É', `chat_with_client_${orderId}`)
                .text('üîô –ö –∑–∞–∫–∞–∑—É', `manage_order_${orderId}`);
            
            await ctx.reply(chatText, {
                parse_mode: 'HTML',
                reply_markup: keyboard
            });
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–∞:', error);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–∞');
        }
    }

    // –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É
    if (data.startsWith('chat_with_client_')) {
        const userRole = await db.getUserRole(userId);
        if (!userRole || !['admin', 'operator'].includes(userRole)) {
            return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        }
        
        const orderId = parseInt(data.replace('chat_with_client_', ''));
        
        try {
            await ctx.answerCallbackQuery('üí¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...');
            
            const order = await db.getOrderWithClient(orderId);
            if (!order) {
                return ctx.reply('‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            chatContexts.set(userId, { orderId, action: 'send_message_to_client' });
            
            await ctx.reply(
                `üí¨ <b>–ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É</b>\n\n` +
                `üÜî –ó–∞–∫–∞–∑ #${orderId}\n` +
                `üë§ –ö–ª–∏–µ–Ω—Ç: ${order.client_first_name || order.client_username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n\n` +
                `üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:`,
                { 
                    parse_mode: 'HTML',
                    reply_markup: new InlineKeyboard()
                        .text('‚ùå –û—Ç–º–µ–Ω–∞', `manage_order_${orderId}`)
                }
            );
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —á–∞—Ç–∞:', error);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞');
        }
    }

    // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ –±–æ—Ç—É" - –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if (data === 'back_to_main') {
        await ctx.answerCallbackQuery('üè† –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –∫ –±–æ—Ç—É...');
        
        const keyboard = await createMainKeyboard(userId);

        await ctx.replyWithPhoto('https://i.ibb.co/Y7bVwSgJ/image.png', {
            caption: `üöÄ <b>ExMachinaX —Å–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–±—è!</b>\n\n` +
                `‚ö° –ë—ã—Å—Ç—Ä—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –æ–±–º–µ–Ω–∞ –≤–∞–ª—é—Ç\n\n` +
                `<b>üî• –ù–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ:</b>\n` +
                `üí± –û–±–º–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç (42 –ø–∞—Ä—ã)\n` +
                `üíµ –û–±–º–µ–Ω –Ω–∞–ª–∏—á–Ω—ã—Ö –≤ –æ—Ñ–∏—Å–∞—Ö\n` +
                `üõ°Ô∏è –ë—ã—Å—Ç—Ä—ã–π –æ–±–º–µ–Ω\n` +
                `üìä –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π\n` +
                `üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ (0.2%)\n` +
                `üì± –£–¥–æ–±–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n\n` +
                `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
            parse_mode: 'HTML',
            reply_markup: keyboard
        });
    }

    // –ö–Ω–æ–ø–∫–∞ "–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é" –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ
    if (data === 'startup_open_menu') {
        await ctx.answerCallbackQuery('üöÄ –û—Ç–∫—Ä—ã–≤–∞—é –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...');
        
        const keyboard = await createMainKeyboard(userId);

        await ctx.replyWithPhoto('https://i.ibb.co/Y7bVwSgJ/image.png', {
                        caption: `üöÄ <b>ExMachinaX –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–±—è!</b>\n\n` +
            `‚ö° –ë—ã—Å—Ç—Ä—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –æ–±–º–µ–Ω–∞ –≤–∞–ª—é—Ç\n\n` +
            `<b>üî• –ù–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ:</b>\n` +
                `üí± –û–±–º–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç (42 –ø–∞—Ä—ã)\n` +
                `üíµ –û–±–º–µ–Ω –Ω–∞–ª–∏—á–Ω—ã—Ö –≤ –æ—Ñ–∏—Å–∞—Ö\n` +
                `üõ°Ô∏è –ë—ã—Å—Ç—Ä—ã–π –æ–±–º–µ–Ω\n` +
                `üìä –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π\n` +
                `üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ (0.2%)\n` +
                `üì± –£–¥–æ–±–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n\n` +
                `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
            parse_mode: 'HTML',
            reply_markup: keyboard
        });
    }

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ (–∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é)
    if (data === 'open_admin_panel') {
        const userRole = await db.getUserRole(userId);
        if (userRole !== 'admin') {
            return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        }
        
        await ctx.answerCallbackQuery('üîÑ –û—Ç–∫—Ä—ã–≤–∞—é –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å...');
        
        const stats = await db.getAdminStats();
        
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
        const adminKeyboard = new InlineKeyboard();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≠–ü–ò–ß–ï–°–ö–£–Æ –∫–Ω–æ–ø–∫—É —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ Google Sheets –∞–∫—Ç–∏–≤–µ–Ω
        if (googleSheetsManager && googleSheetsManager.isReady()) {
            adminKeyboard.url('üíéüî• –¢–ê–ë–õ–ò–¶–ê –ë–û–ì–û–í üî•üíé', googleSheetsManager.getSpreadsheetUrl()).row();
        }
        
        adminKeyboard
            .text('üìä –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'admin_full_stats')
            .text('üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º', 'admin_staff')
            .row()
            .text('üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã', 'admin_active_orders')
            .text('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'admin_notifications')
            .row()
            .text('üåê –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∞–π—Ç–∞', 'admin_weblogs')
            .text('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–Ω—è', 'admin_daily_stats')
            .row()
            .text('üë§ –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞', 'admin_add_operator')
            .text('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'admin_settings')
            .row()
            .text('üí± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏', 'admin_rates_control')
            .text('üè† –ù–∞–∑–∞–¥ –∫ –±–æ—Ç—É', 'back_to_main');
        
        await ctx.reply(
            `üõ°Ô∏è <b>–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ ExMachinaX</b>\n\n` +
            `üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n` +
            `üë• –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.newUsersToday}\n` +
            `üìù –ó–∞—è–≤–æ–∫: ${stats.ordersToday}\n` +
            `üí∞ –û–±–æ—Ä–æ—Ç: $${(stats.volumeToday || 0).toFixed(2)}\n\n` +
            `üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n` +
            `üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.totalUsers}\n` +
            `üìã –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${stats.totalOrders}\n` +
            `‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${stats.completedOrders}\n` +
            `‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏: ${stats.pendingOrders}\n` +
            `üîÑ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ: ${stats.processingOrders}\n` +
            `üíµ –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç: $${(stats.totalVolume || 0).toFixed(2)}\n\n` +
            `üë®‚Äçüíº <b>–ü–µ—Ä—Å–æ–Ω–∞–ª:</b>\n` +
            `üõ°Ô∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤: ${stats.activeOperators}\n` +
            `üìù –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: ${stats.assignedOrders}\n` +
            `üîî –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${stats.unreadNotifications}`,
            { 
                parse_mode: 'HTML',
                reply_markup: adminKeyboard
            }
        );
    }

    // üí± –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–£–†–°–ê–ú–ò 
    if (data === 'admin_rates_control') {
        if (!(await isAdmin(userId))) return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        
        await ctx.answerCallbackQuery('üí± –û—Ç–∫—Ä—ã–≤–∞—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏...');
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã
        const ratesService = require('./services/RatesService');
        const rates = new ratesService();
        const currentRates = await rates.getRates();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∞–ª—é—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        const popularCurrencies = ['BTC', 'ETH', 'USDT', 'USD', 'RUB', 'ARS'];
        const popularRates = currentRates.filter(r => popularCurrencies.includes(r.currency));
        
        let ratesText = `üí± <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–£–†–°–ê–ú–ò</b>\n\n`;
        ratesText += `‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${new Date().toLocaleString('ru')}\n\n`;
        ratesText += `üìä <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∞–ª—é—Ç—ã:</b>\n`;
        
        popularRates.forEach(rate => {
            const spread = ((rate.sell - rate.buy) / rate.price * 100).toFixed(2);
            ratesText += `${rate.currency}: $${rate.price.toFixed(rate.currency === 'BTC' ? 0 : 4)} (—Å–ø—Ä–µ–¥: ${spread}%)\n`;
        });
        
        ratesText += `\nüîß <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n`;
        ratesText += `‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≤–∞–ª—é—Ç—É\n`;
        ratesText += `‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å\n`;
        ratesText += `‚Ä¢ –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ\n`;
        ratesText += `‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Å–ø—Ä–µ–¥`;
        
        const ratesKeyboard = new InlineKeyboard()
            .text('üí∞ –ò–∑–º–µ–Ω–∏—Ç—å BTC', 'rates_edit_BTC')
            .text('üíé –ò–∑–º–µ–Ω–∏—Ç—å ETH', 'rates_edit_ETH')
            .row()
            .text('üè¶ –ò–∑–º–µ–Ω–∏—Ç—å USDT', 'rates_edit_USDT')
            .text('üíµ –ò–∑–º–µ–Ω–∏—Ç—å USD', 'rates_edit_USD')
            .row()
            .text('üá∑üá∫ –ò–∑–º–µ–Ω–∏—Ç—å RUB', 'rates_edit_RUB')
            .text('üá¶üá∑ –ò–∑–º–µ–Ω–∏—Ç—å ARS', 'rates_edit_ARS')
            .row()
            .text('üî• –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Å–ø—Ä–µ–¥ +2%', 'rates_emergency_spread')
            .text('‚ö° –ú–Ω–æ–∂–∏—Ç–µ–ª—å –∫—É—Ä—Å–æ–≤', 'rates_multiplier')
            .row()
            .text('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å', 'rates_force_update')
            .text('‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ', 'rates_pause_auto')
            .row()
            .text('üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ', 'admin_back');
            
                 await ctx.reply(ratesText, {
             parse_mode: 'HTML',
             reply_markup: ratesKeyboard
         });
     }

     // üî• –≠–ö–°–¢–†–ï–ù–ù–´–ô –°–ü–†–ï–î
     if (data === 'rates_emergency_spread') {
         if (!(await isAdmin(userId))) return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
         
         await ctx.answerCallbackQuery('üö® –ê–∫—Ç–∏–≤–∏—Ä—É—é —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Å–ø—Ä–µ–¥ +2%...');
         
         // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Å–ø—Ä–µ–¥ —á–µ—Ä–µ–∑ RatesService
         const RatesService = require('./services/RatesService');
         const ratesService = new RatesService();
         ratesService.setEmergencySpread(2); // +2%
         
         // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
         await notifyOperators(`üö® <b>–≠–ö–°–¢–†–ï–ù–ù–´–ô –°–ü–†–ï–î –ê–ö–¢–ò–í–ò–†–û–í–ê–ù</b>\n\n–í—Å–µ –∫—É—Ä—Å—ã —É–≤–µ–ª–∏—á–µ–Ω—ã –Ω–∞ +2%\n–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª: –∞–¥–º–∏–Ω ${ctx.from.first_name}`);
         
         await ctx.reply(
             `üî• <b>–≠–ö–°–¢–†–ï–ù–ù–´–ô –°–ü–†–ï–î –ê–ö–¢–ò–í–ò–†–û–í–ê–ù</b>\n\n` +
             `‚úÖ –í—Å–µ —Å–ø—Ä–µ–¥—ã —É–≤–µ–ª–∏—á–µ–Ω—ã –Ω–∞ +2%\n` +
             `‚ö° –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ\n` +
             `üîî –û–ø–µ—Ä–∞—Ç–æ—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã\n\n` +
             `üí° –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å"`,
             { 
                 parse_mode: 'HTML',
                 reply_markup: new InlineKeyboard().text('üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é', 'admin_rates_control')
             }
         );
     }

     // üîÑ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï
     if (data === 'rates_force_update') {
         if (!(await isAdmin(userId))) return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
         
         await ctx.answerCallbackQuery('üîÑ –û–±–Ω–æ–≤–ª—è—é –∫—É—Ä—Å—ã...');
         
         try {
             // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ RatesService
             const RatesService = require('./services/RatesService');
             const ratesService = new RatesService();
             await ratesService.forceUpdate();
             
             // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
             await notifyOperators(`üîÑ <b>–ö–£–†–°–´ –û–ë–ù–û–í–õ–ï–ù–´ –í–†–£–ß–ù–£–Æ</b>\n\n–í—Å–µ —Ä—É—á–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã\n–û–±–Ω–æ–≤–∏–ª: –∞–¥–º–∏–Ω ${ctx.from.first_name}`);
             
             await ctx.reply(
                 `‚úÖ <b>–ö–£–†–°–´ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –û–ë–ù–û–í–õ–ï–ù–´</b>\n\n` +
                 `üîÑ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —Å–≤–µ–∂–∏–µ —Å API\n` +
                 `üö´ –í—Å–µ —Ä—É—á–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã\n` +
                 `‚ñ∂Ô∏è –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ\n` +
                 `üîî –û–ø–µ—Ä–∞—Ç–æ—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã`,
                 { 
                     parse_mode: 'HTML',
                     reply_markup: new InlineKeyboard().text('üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é', 'admin_rates_control')
                 }
             );
         } catch (error) {
             await ctx.reply(
                 `‚ùå <b>–û–®–ò–ë–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø</b>\n\n` +
                 `–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã —Å API\n` +
                 `–ü—Ä–∏—á–∏–Ω–∞: ${error.message}`,
                 { 
                     parse_mode: 'HTML',
                     reply_markup: new InlineKeyboard().text('üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é', 'admin_rates_control')
                 }
             );
         }
     }

     // ‚ö° –ú–ù–û–ñ–ò–¢–ï–õ–¨ –ö–£–†–°–û–í
     if (data === 'rates_multiplier') {
         if (!(await isAdmin(userId))) return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
         
         await ctx.answerCallbackQuery('‚ö° –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–Ω–æ–∂–∏—Ç–µ–ª—è...');
         
         const multiplierKeyboard = new InlineKeyboard()
             .text('üìâ -5% (0.95x)', 'rates_mult_0.95')
             .text('üìâ -2% (0.98x)', 'rates_mult_0.98')
             .row()
             .text('üìä –°–±—Ä–æ—Å (1.0x)', 'rates_mult_1.0')
             .row()
             .text('üìà +2% (1.02x)', 'rates_mult_1.02')
             .text('üìà +5% (1.05x)', 'rates_mult_1.05')
             .row()
             .text('üîô –ù–∞–∑–∞–¥', 'admin_rates_control');
             
         await ctx.reply(
             `‚ö° <b>–ú–ù–û–ñ–ò–¢–ï–õ–¨ –ö–£–†–°–û–í</b>\n\n` +
             `–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ —Å–∫–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–∏—Ç—å –í–°–ï –∫—É—Ä—Å—ã:\n\n` +
             `üìâ –£–º–µ–Ω—å—à–∏—Ç—å - –∫–ª–∏–µ–Ω—Ç—ã –ø–ª–∞—Ç—è—Ç –º–µ–Ω—å—à–µ\n` +
             `üìà –£–≤–µ–ª–∏—á–∏—Ç—å - –±–æ–ª—å—à–µ –ø—Ä–∏–±—ã–ª–∏\n` +
             `üìä –°–±—Ä–æ—Å - –≤–µ—Ä–Ω—É—Ç—å –∫ API –∫—É—Ä—Å–∞–º`,
             { 
                 parse_mode: 'HTML',
                 reply_markup: multiplierKeyboard
             }
         );
     }

     // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π
     if (data.startsWith('rates_mult_')) {
         if (!(await isAdmin(userId))) return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
         
         const multiplier = parseFloat(data.replace('rates_mult_', ''));
         const percent = ((multiplier - 1) * 100).toFixed(1);
         const sign = multiplier > 1 ? '+' : '';
         
         await ctx.answerCallbackQuery(`‚ö° –ú–Ω–æ–∂–∏—Ç–µ–ª—å ${multiplier}x —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
         
         // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å —á–µ—Ä–µ–∑ RatesService
         const RatesService = require('./services/RatesService');
         const ratesService = new RatesService();
         ratesService.setRatesMultiplier(multiplier);
         
         // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
         await notifyOperators(`‚ö° <b>–ú–ù–û–ñ–ò–¢–ï–õ–¨ –ö–£–†–°–û–í –ò–ó–ú–ï–ù–ï–ù</b>\n\n–í—Å–µ –∫—É—Ä—Å—ã: ${sign}${percent}%\n–ò–∑–º–µ–Ω–∏–ª: –∞–¥–º–∏–Ω ${ctx.from.first_name}`);
         
         await ctx.reply(
             `‚úÖ <b>–ú–ù–û–ñ–ò–¢–ï–õ–¨ –£–°–¢–ê–ù–û–í–õ–ï–ù</b>\n\n` +
             `‚ö° –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: ${multiplier}x\n` +
             `üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${sign}${percent}%\n` +
             `üîî –û–ø–µ—Ä–∞—Ç–æ—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã\n\n` +
             `üí° –í—Å–µ –∫—É—Ä—Å—ã –∏–∑–º–µ–Ω–µ–Ω—ã –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ`,
             { 
                 parse_mode: 'HTML',
                 reply_markup: new InlineKeyboard().text('üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é', 'admin_rates_control')
             }
         );
     }

     // üîß –ò–ó–ú–ï–ù–ï–ù–ò–ï –ö–û–ù–ö–†–ï–¢–ù–´–• –í–ê–õ–Æ–¢
     if (data.startsWith('rates_edit_')) {
         if (!(await isAdmin(userId))) return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
         
         const currency = data.replace('rates_edit_', '');
         
         await ctx.answerCallbackQuery(`üí± –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ${currency}...`);
         
         // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å
         const ratesService = require('./services/RatesService');
         const rates = new ratesService();
         const currentRates = await rates.getRates();
         const currentRate = currentRates.find(r => r.currency === currency);
         
         if (!currentRate) {
             return await ctx.reply('‚ùå –í–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', {
                 reply_markup: new InlineKeyboard().text('üîô –ù–∞–∑–∞–¥', 'admin_rates_control')
             });
         }
         
         const editKeyboard = new InlineKeyboard()
             .text('‚úèÔ∏è –ù–ê–ü–ò–°–ê–¢–¨ –ö–£–†–° –í–†–£–ß–ù–£–Æ', `rates_manual_${currency}`)
             .row()
             .text('üìà +10%', `rates_change_${currency}_1.1`)
             .text('üìà +5%', `rates_change_${currency}_1.05`)
             .row()
             .text('üìà +2%', `rates_change_${currency}_1.02`)
             .text('üìä –°–±—Ä–æ—Å', `rates_change_${currency}_1.0`)
             .row()
             .text('üìâ -2%', `rates_change_${currency}_0.98`)
             .text('üìâ -5%', `rates_change_${currency}_0.95`)
             .row()
             .text('üìâ -10%', `rates_change_${currency}_0.9`)
             .row()
             .text('üîô –ù–∞–∑–∞–¥', 'admin_rates_control');
             
         await ctx.reply(
             `üí± <b>–ò–ó–ú–ï–ù–ï–ù–ò–ï ${currency}</b>\n\n` +
             `üìä <b>–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å:</b> $${currentRate.price.toFixed(currency === 'BTC' ? 0 : 4)}\n` +
             `üìà <b>–ü—Ä–æ–¥–∞–∂–∞:</b> $${currentRate.sell.toFixed(currency === 'BTC' ? 0 : 4)}\n` +
             `üìâ <b>–ü–æ–∫—É–ø–∫–∞:</b> $${currentRate.buy.toFixed(currency === 'BTC' ? 0 : 4)}\n` +
             `üìä <b>–°–ø—Ä–µ–¥:</b> ${((currentRate.sell - currentRate.buy) / currentRate.price * 100).toFixed(2)}%\n\n` +
             `–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ —Å–∫–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å ${currency}:`,
             { 
                 parse_mode: 'HTML',
                 reply_markup: editKeyboard
             }
         );
     }

     // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç
     if (data.startsWith('rates_change_')) {
         if (!(await isAdmin(userId))) return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
         
         const parts = data.replace('rates_change_', '').split('_');
         const currency = parts[0];
         const multiplier = parseFloat(parts[1]);
         const percent = ((multiplier - 1) * 100).toFixed(1);
         const sign = multiplier > 1 ? '+' : '';
         
         await ctx.answerCallbackQuery(`üí± ${currency}: ${sign}${percent}% —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`);
         
         // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ RatesService
         const RatesService = require('./services/RatesService');
         const ratesService = new RatesService();
         ratesService.setManualRate(currency, multiplier, 3600000); // –ù–∞ 1 —á–∞—Å
         
         // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
         await notifyOperators(`üí± <b>–ö–£–†–° ${currency} –ò–ó–ú–ï–ù–ï–ù</b>\n\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${sign}${percent}%\n–ò–∑–º–µ–Ω–∏–ª: –∞–¥–º–∏–Ω ${ctx.from.first_name}`);
         
         await ctx.reply(
             `‚úÖ <b>–ö–£–†–° ${currency} –ò–ó–ú–ï–ù–ï–ù</b>\n\n` +
             `üí± –í–∞–ª—é—Ç–∞: ${currency}\n` +
             `üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${sign}${percent}%\n` +
             `‚ö° –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: ${multiplier}x\n` +
             `‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç: 1 —á–∞—Å\n` +
             `üîî –û–ø–µ—Ä–∞—Ç–æ—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã\n\n` +
             `üí° –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ`,
             { 
                 parse_mode: 'HTML',
                 reply_markup: new InlineKeyboard().text('üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é', 'admin_rates_control')
             }
         );
     }

     // ‚è∏Ô∏è –û–°–¢–ê–ù–û–í–ö–ê –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–Ø
     if (data === 'rates_pause_auto') {
         if (!(await isAdmin(userId))) return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
         
         await ctx.answerCallbackQuery('‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...');
         
         const pauseKeyboard = new InlineKeyboard()
             .text('‚è∏Ô∏è 15 –º–∏–Ω—É—Ç', 'rates_pause_15')
             .text('‚è∏Ô∏è 30 –º–∏–Ω—É—Ç', 'rates_pause_30')
             .row()
             .text('‚è∏Ô∏è 1 —á–∞—Å', 'rates_pause_60')
             .text('‚è∏Ô∏è 3 —á–∞—Å–∞', 'rates_pause_180')
             .row()
             .text('‚è∏Ô∏è –î–æ —Ä—É—á–Ω–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏—è', 'rates_pause_manual')
             .row()
             .text('üîô –ù–∞–∑–∞–¥', 'admin_rates_control');
             
         await ctx.reply(
             `‚è∏Ô∏è <b>–û–°–¢–ê–ù–û–í–ö–ê –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–Ø</b>\n\n` +
             `–ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤?\n\n` +
             `üí° –ö—É—Ä—Å—ã –æ—Å—Ç–∞–Ω—É—Ç—Å—è —Ç–µ–∫—É—â–∏–º–∏\n` +
             `‚ö° –†—É—á–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å\n` +
             `üîÑ –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –º–æ–∂–Ω–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç`,
             { 
                 parse_mode: 'HTML',
                 reply_markup: pauseKeyboard
             }
         );
     }

     // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     if (data.startsWith('rates_pause_')) {
         if (!(await isAdmin(userId))) return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
         
         const duration = data.replace('rates_pause_', '');
         let durationText = '';
         let durationMs = 0;
         
         switch(duration) {
             case '15': durationText = '15 –º–∏–Ω—É—Ç'; durationMs = 15 * 60 * 1000; break;
             case '30': durationText = '30 –º–∏–Ω—É—Ç'; durationMs = 30 * 60 * 1000; break;
             case '60': durationText = '1 —á–∞—Å'; durationMs = 60 * 60 * 1000; break;
             case '180': durationText = '3 —á–∞—Å–∞'; durationMs = 180 * 60 * 1000; break;
             case 'manual': durationText = '–¥–æ —Ä—É—á–Ω–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏—è'; durationMs = 24 * 60 * 60 * 1000; break; // 24 —á–∞—Å–∞
         }
         
         await ctx.answerCallbackQuery(`‚è∏Ô∏è –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ ${durationText}`);
         
         // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ RatesService
         const RatesService = require('./services/RatesService');
         const ratesService = new RatesService();
         ratesService.pauseAutoUpdate(durationMs);
         
         // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
         await notifyOperators(`‚è∏Ô∏è <b>–ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–£–†–°–û–í –û–°–¢–ê–ù–û–í–õ–ï–ù–û</b>\n\n–ù–∞: ${durationText}\n–û—Å—Ç–∞–Ω–æ–≤–∏–ª: –∞–¥–º–∏–Ω ${ctx.from.first_name}`);
         
         await ctx.reply(
             `‚è∏Ô∏è <b>–ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–ï –û–°–¢–ê–ù–û–í–õ–ï–ù–û</b>\n\n` +
             `‚è∞ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${durationText}\n` +
             `üîí –ö—É—Ä—Å—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã\n` +
             `üîî –û–ø–µ—Ä–∞—Ç–æ—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã\n\n` +
             `üí° –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –º–æ–∂–Ω–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —á–µ—Ä–µ–∑ "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å"`,
             { 
                 parse_mode: 'HTML',
                 reply_markup: new InlineKeyboard().text('üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é', 'admin_rates_control')
             }
         );
     }

     // ‚úèÔ∏è –†–£–ß–ù–û–ô –í–í–û–î –ö–£–†–°–ê
     if (data.startsWith('rates_manual_')) {
         if (!(await isAdmin(userId))) return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
         
         const currency = data.replace('rates_manual_', '');
         
         await ctx.answerCallbackQuery(`‚úèÔ∏è –í–≤–æ–¥ –∫—É—Ä—Å–∞ ${currency}...`);
         
         // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
         const ratesService = require('./services/RatesService');
         const rates = new ratesService();
         const currentRates = await rates.getRates();
         const currentRate = currentRates.find(r => r.currency === currency);
         
         // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫—É—Ä—Å–∞
         if (!global.manualRateInput) global.manualRateInput = new Map();
         global.manualRateInput.set(userId, {
             currency: currency,
             timestamp: Date.now()
         });
         
         await ctx.reply(
             `‚úèÔ∏è <b>–†–£–ß–ù–û–ô –í–í–û–î –ö–£–†–°–ê ${currency}</b>\n\n` +
             `üìä <b>–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å:</b> $${currentRate ? currentRate.price.toFixed(currency === 'BTC' ? 0 : 4) : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n` +
             `üí¨ <b>–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å —á–∏—Å–ª–æ–º:</b>\n` +
             `–ù–∞–ø—Ä–∏–º–µ—Ä: <code>95000</code> (–¥–ª—è BTC)\n` +
             `–ò–ª–∏: <code>1.02</code> (–¥–ª—è USDT)\n\n` +
             `‚è∞ –£ –≤–∞—Å –µ—Å—Ç—å 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è –≤–≤–æ–¥–∞\n` +
             `‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ: <code>–æ—Ç–º–µ–Ω–∞</code>`,
             { 
                 parse_mode: 'HTML',
                 reply_markup: new InlineKeyboard().text('‚ùå –û—Ç–º–µ–Ω–∞', 'admin_rates_control')
             }
         );
         
         // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ –æ—á–∏—Å—Ç–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è
         setTimeout(() => {
             if (global.manualRateInput && global.manualRateInput.has(userId)) {
                 global.manualRateInput.delete(userId);
             }
         }, 60000); // 60 —Å–µ–∫—É–Ω–¥
     }

     // –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    if (data === 'open_operator_panel') {
        const userRole = await db.getUserRole(userId);
        if (!userRole || !['admin', 'operator'].includes(userRole)) {
            try {
                return await ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞');
            } catch (e) {
                return;
            }
        }
        
        try {
            await ctx.answerCallbackQuery('üîÑ –û—Ç–∫—Ä—ã–≤–∞—é –ø–∞–Ω–µ–ª—å...');
        } catch (callbackError) {
            console.log('‚ö†Ô∏è Callback query timeout:', callbackError.message);
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∏ –∑–∞–∫–∞–∑—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        const [unassignedOrders, myOrders] = await Promise.all([
            db.getUnassignedOrders(),
            db.getOperatorOrders(userId)
        ]);
        
        const operatorKeyboard = new InlineKeyboard()
            .text(`üìã –°–≤–æ–±–æ–¥–Ω—ã–µ –∑–∞–∫–∞–∑—ã (${unassignedOrders.length})`, 'op_unassigned_orders')
            .text(`üìù –ú–æ–∏ –∑–∞–∫–∞–∑—ã (${myOrders.length})`, 'op_my_orders')
            .row()
            .text('üîî –ú–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'op_notifications')
            .text('üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'op_stats')
            .row()
            .text('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–Ω—è', 'admin_daily_stats')
            .row()
            .text('üí± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏', 'admin_rates_control')
            .text('üè† –ù–∞–∑–∞–¥ –∫ –±–æ—Ç—É', 'back_to_main');
        
        await ctx.reply(
            `üë®‚Äçüíº <b>–ü–ê–ù–ï–õ–¨ –û–ü–ï–†–ê–¢–û–†–ê</b>\n\n` +
            `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –æ–ø–µ—Ä–∞—Ç–æ—Ä!\n\n` +
            `üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã:</b> ${unassignedOrders.length}\n` +
            `üìù <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:</b> ${myOrders.length}\n` +
            `üîî <b>–ù–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b> ${(await db.getNotifications(userId, 1)).filter(n => !n.is_read).length}\n\n` +
            `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
            { 
                parse_mode: 'HTML',
                reply_markup: operatorKeyboard
            }
        );
    }

    // === –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –ê–î–ú–ò–ù–°–ö–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∞
    if (data === 'admin_settings') {
        const userRole = await db.getUserRole(userId);
        if (userRole !== 'admin') {
            return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        }
        
        await ctx.answerCallbackQuery();
        
        const settingsKeyboard = new InlineKeyboard()
            .text('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞', 'admin_restart_bot')
            .text('üóÉÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏', 'admin_clear_logs')
            .row()
            .text('üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö', 'admin_export_data')
            .text('üìã Google Sheets', 'admin_google_sheets')
            .row()
            .text('üîß –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –ë–î', 'admin_db_maintenance')
            .text('üîô –ù–∞–∑–∞–¥', 'admin_back');
        
        await ctx.reply(
            `‚öôÔ∏è <b>–ù–ê–°–¢–†–û–ô–ö–ò –°–ò–°–¢–ï–ú–´</b>\n\n` +
            `üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n` +
            `‚ö†Ô∏è –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏!`,
            { 
                parse_mode: 'HTML',
                reply_markup: settingsKeyboard
            }
        );
    }

    // –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (–∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏)
    if (data === 'admin_add_operator') {
        const userRole = await db.getUserRole(userId);
        if (userRole !== 'admin') {
            return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        }
        
        await ctx.answerCallbackQuery();
        
        await ctx.reply(
            `üë§ <b>–î–û–ë–ê–í–õ–ï–ù–ò–ï –û–ü–ï–†–ê–¢–û–†–ê</b>\n\n` +
            `üìù –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥:\n\n` +
            `üîπ <code>/add_operator ID_TELEGRAM</code>\n` +
            `–ü—Ä–∏–º–µ—Ä: <code>/add_operator 123456789</code>\n\n` +
            `üîπ <code>/add_operator_forward</code>\n` +
            `–û—Ç–≤–µ—Ç—å—Ç–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n` +
            `üí° –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–µ /operator`,
            { 
                parse_mode: 'HTML',
                reply_markup: new InlineKeyboard()
                    .text('üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏', 'admin_back')
            }
        );
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
    if (data === 'admin_notifications') {
        const userRole = await db.getUserRole(userId);
        if (userRole !== 'admin') {
            return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        }
        
        await ctx.answerCallbackQuery();
        
        const notifications = await db.getNotifications(userId, 20);
        const unreadCount = notifications.filter(n => !n.is_read).length;
        
        let notificationsText = `üîî <b>–£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ê–î–ú–ò–ù–ê</b>\n\n`;
        notificationsText += `üìä –í—Å–µ–≥–æ: ${notifications.length} | –ù–æ–≤—ã—Ö: ${unreadCount}\n\n`;
        
        if (notifications.length === 0) {
            notificationsText += `üì≠ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç`;
        } else {
            notifications.slice(0, 10).forEach(notif => {
                const icon = notif.is_read ? 'üì®' : 'üì©';
                const time = new Date(notif.created_at).toLocaleString('ru');
                notificationsText += `${icon} <b>${notif.title}</b>\n`;
                notificationsText += `üìÖ ${time}\n`;
                notificationsText += `üìù ${notif.message}\n\n`;
            });
            
            if (notifications.length > 10) {
                notificationsText += `... –∏ –µ—â–µ ${notifications.length - 10} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`;
            }
        }
        
        const notifKeyboard = new InlineKeyboard()
            .text('‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ', 'admin_mark_read')
            .text('üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ', 'admin_clear_notifications')
            .row()
            .text('üîô –ù–∞–∑–∞–¥', 'admin_back');
        
        await ctx.reply(notificationsText, { 
            parse_mode: 'HTML',
            reply_markup: notifKeyboard
        });
    }

    // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è)
    if (data === 'admin_back') {
        const userRole = await db.getUserRole(userId);
        if (userRole !== 'admin') return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        
        await ctx.answerCallbackQuery();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –∑–∞–Ω–æ–≤–æ
        const stats = await db.getAdminStats();
        const adminKeyboard = new InlineKeyboard();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≠–ü–ò–ß–ï–°–ö–£–Æ –∫–Ω–æ–ø–∫—É —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ Google Sheets –∞–∫—Ç–∏–≤–µ–Ω
        if (googleSheetsManager && googleSheetsManager.isReady()) {
            adminKeyboard.url('üíéüî• –¢–ê–ë–õ–ò–¶–ê –ë–û–ì–û–í üî•üíé', googleSheetsManager.getSpreadsheetUrl()).row();
        }
        
        adminKeyboard
            .text('üìä –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'admin_full_stats')
            .text('üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º', 'admin_staff')
            .row()
            .text('üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã', 'admin_active_orders')
            .text('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'admin_notifications')
            .row()
            .text('üåê –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∞–π—Ç–∞', 'admin_weblogs')
            .text('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–Ω—è', 'admin_daily_stats')
            .row()
            .text('üë§ –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞', 'admin_add_operator')
            .text('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'admin_settings')
            .row()
            .text('üí± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏', 'admin_rates_control')
            .text('üè† –ù–∞–∑–∞–¥ –∫ –±–æ—Ç—É', 'back_to_main');
        
        await ctx.reply(
            `üõ°Ô∏è <b>–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ ExMachinaX</b>\n\n` +
            `üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n` +
            `üë• –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.newUsersToday}\n` +
            `üìù –ó–∞—è–≤–æ–∫: ${stats.ordersToday}\n` +
            `üí∞ –û–±–æ—Ä–æ—Ç: $${(stats.volumeToday || 0).toFixed(2)}\n\n` +
            `üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n` +
            `üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.totalUsers}\n` +
            `üìã –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${stats.totalOrders}\n` +
            `‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${stats.completedOrders}\n` +
            `‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏: ${stats.pendingOrders}\n` +
            `üîÑ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ: ${stats.processingOrders}\n` +
            `üíµ –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç: $${(stats.totalVolume || 0).toFixed(2)}\n\n` +
            `üë®‚Äçüíº <b>–ü–µ—Ä—Å–æ–Ω–∞–ª:</b>\n` +
            `üõ°Ô∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤: ${stats.activeOperators}\n` +
            `üìù –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: ${stats.assignedOrders}\n` +
            `üîî –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${stats.unreadNotifications}`,
            { 
                parse_mode: 'HTML',
                reply_markup: adminKeyboard
                         }
         );
     }

    // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    if (data === 'admin_remove_staff') {
        const userRole = await db.getUserRole(userId);
        if (userRole !== 'admin') {
            return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        }
        
        await ctx.answerCallbackQuery();
        
        const staff = await db.getStaffList();
        const operators = staff.filter(s => s.role === 'operator');
        
        if (operators.length === 0) {
            return ctx.reply(
                `‚ûñ <b>–£–î–ê–õ–ï–ù–ò–ï –°–û–¢–†–£–î–ù–ò–ö–ê</b>\n\n` +
                `üë• –ù–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è`,
                { 
                    parse_mode: 'HTML',
                    reply_markup: new InlineKeyboard()
                        .text('üîô –ù–∞–∑–∞–¥', 'admin_staff')
                }
            );
        }
        
        let removeText = `‚ûñ <b>–£–î–ê–õ–ï–ù–ò–ï –°–û–¢–†–£–î–ù–ò–ö–ê</b>\n\n`;
        removeText += `‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n`;
        
        const removeKeyboard = new InlineKeyboard();
        
        operators.forEach((op, i) => {
            const name = op.first_name || op.username || `ID ${op.telegram_id}`;
            const statusEmoji = op.is_active ? '‚úÖ' : '‚ùå';
            removeText += `${statusEmoji} ${name} (${op.orders_handled || 0} –∑–∞–∫–∞–∑–æ–≤)\n`;
            
            removeKeyboard.text(`üóëÔ∏è ${name}`, `remove_staff_${op.telegram_id}`);
            if (i % 2 === 1) removeKeyboard.row();
        });
        
        removeKeyboard.row().text('üîô –ù–∞–∑–∞–¥', 'admin_staff');
        
        await ctx.reply(removeText, { 
            parse_mode: 'HTML',
            reply_markup: removeKeyboard
        });
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    if (data.startsWith('remove_staff_')) {
        const userRole = await db.getUserRole(userId);
        if (userRole !== 'admin') {
            return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        }
        
        const staffId = parseInt(data.replace('remove_staff_', ''));
        
        try {
            await ctx.answerCallbackQuery();
            
            const removedStaff = await db.removeStaff(staffId);
            
            await ctx.reply(
                `‚úÖ <b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–¥–∞–ª–µ–Ω!</b>\n\n` +
                `üÜî Telegram ID: <code>${staffId}</code>\n` +
                `üë§ –£–¥–∞–ª–∏–ª: ${ctx.from.first_name}\n` +
                `üìÖ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru')}\n\n` +
                `üîî –£–≤–µ–¥–æ–º–ª—è–µ–º –±—ã–≤—à–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞...`,
                { parse_mode: 'HTML' }
            );
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            try {
                await bot.api.sendMessage(staffId,
                    `‚ùå <b>–í—ã –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ ExMachinaX</b>\n\n` +
                    `üìÖ ${new Date().toLocaleString('ru')}\n` +
                    `üõ°Ô∏è –ê–¥–º–∏–Ω –æ—Ç–æ–∑–≤–∞–ª –≤–∞—à–∏ –ø—Ä–∞–≤–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞\n\n` +
                    `üíº –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É –≤ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ!`,
                    { parse_mode: 'HTML' }
                );
            } catch (error) {
                console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', error.message);
            }
            
        } catch (error) {
                         await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: ${error.message}`);
         }
     }

    // === –û–ü–ï–†–ê–¢–û–†–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò ===

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    if (data === 'op_notifications') {
        const userRole = await db.getUserRole(userId);
        if (!userRole || !['admin', 'operator'].includes(userRole)) {
            return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        }
        
        await ctx.answerCallbackQuery();
        
        const notifications = await db.getNotifications(userId, 15);
        const unreadCount = notifications.filter(n => !n.is_read).length;
        
        let notifText = `üîî <b>–ú–û–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø</b>\n\n`;
        notifText += `üìä –í—Å–µ–≥–æ: ${notifications.length} | –ù–æ–≤—ã—Ö: ${unreadCount}\n\n`;
        
        if (notifications.length === 0) {
            notifText += `üì≠ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç`;
        } else {
            notifications.slice(0, 8).forEach(notif => {
                const icon = notif.is_read ? 'üì®' : 'üì©';
                const time = new Date(notif.created_at).toLocaleString('ru');
                notifText += `${icon} <b>${notif.title}</b>\n`;
                notifText += `üìÖ ${time}\n`;
                notifText += `üìù ${notif.message}\n\n`;
            });
            
            if (notifications.length > 8) {
                notifText += `... –∏ –µ—â–µ ${notifications.length - 8} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`;
            }
        }
        
        const notifKeyboard = new InlineKeyboard()
            .text('‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ', 'op_mark_read')
            .text('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'op_notifications')
            .row()
            .text('üîô –ù–∞–∑–∞–¥', 'op_back');
        
        await ctx.reply(notifText, { 
            parse_mode: 'HTML',
            reply_markup: notifKeyboard
        });
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    if (data === 'op_stats') {
        const userRole = await db.getUserRole(userId);
        if (!userRole || !['admin', 'operator'].includes(userRole)) {
            return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        }
        
        await ctx.answerCallbackQuery();
        
        const myOrders = await db.getOperatorOrders(userId);
        const completedOrders = myOrders.filter(o => o.assignment_status === 'completed').length;
        const inProgressOrders = myOrders.filter(o => o.assignment_status === 'in_progress').length;
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        const today = new Date().toISOString().split('T')[0];
        const todayOrders = myOrders.filter(o => o.assigned_at?.includes(today)).length;
        
        const statsText = `üìä <b>–ú–û–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>\n\n` +
            `üë®‚Äçüíº –û–ø–µ—Ä–∞—Ç–æ—Ä: ${ctx.from.first_name || '–í—ã'}\n\n` +
            `üìà <b>–ó–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n` +
            `üìù –ü—Ä–∏–Ω—è—Ç–æ –∑–∞–∫–∞–∑–æ–≤: ${todayOrders}\n\n` +
            `üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n` +
            `üìã –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${myOrders.length}\n` +
            `‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${completedOrders}\n` +
            `üîÑ –í —Ä–∞–±–æ—Ç–µ: ${inProgressOrders}\n` +
            `‚≠ê –†–µ–π—Ç–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${myOrders.length > 0 ? Math.round((completedOrders / myOrders.length) * 100) : 0}%\n\n` +
            `üöÄ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ö–æ—Ä–æ—à—É—é —Ä–∞–±–æ—Ç—É!`;
        
        const statsKeyboard = new InlineKeyboard()
            .text('üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã', 'op_my_orders')
            .text('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'op_stats')
            .row()
            .text('üîô –ù–∞–∑–∞–¥', 'op_back');
        
        await ctx.reply(statsText, { 
            parse_mode: 'HTML',
            reply_markup: statsKeyboard
        });
    }

    // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫—É—é –ø–∞–Ω–µ–ª—å
    if (data === 'op_back') {
        const userRole = await db.getUserRole(userId);
        if (!userRole || !['admin', 'operator'].includes(userRole)) {
            return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        }
        
        await ctx.answerCallbackQuery('üîÑ –û—Ç–∫—Ä—ã–≤–∞—é –ø–∞–Ω–µ–ª—å...');
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∏ –∑–∞–∫–∞–∑—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        const [unassignedOrders, myOrders] = await Promise.all([
            db.getUnassignedOrders(),
            db.getOperatorOrders(userId)
        ]);
        
        const operatorKeyboard = new InlineKeyboard()
            .text(`üìã –°–≤–æ–±–æ–¥–Ω—ã–µ –∑–∞–∫–∞–∑—ã (${unassignedOrders.length})`, 'op_unassigned_orders')
            .text(`üìù –ú–æ–∏ –∑–∞–∫–∞–∑—ã (${myOrders.length})`, 'op_my_orders')
            .row()
            .text('üîî –ú–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'op_notifications')
            .text('üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'op_stats')
            .row()
            .text('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–Ω—è', 'admin_daily_stats')
            .row()
            .text('üí± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏', 'admin_rates_control')
            .text('üè† –ù–∞–∑–∞–¥ –∫ –±–æ—Ç—É', 'back_to_main');
        
        await ctx.reply(
            `üë®‚Äçüíº <b>–ü–ê–ù–ï–õ–¨ –û–ü–ï–†–ê–¢–û–†–ê</b>\n\n` +
            `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –æ–ø–µ—Ä–∞—Ç–æ—Ä!\n\n` +
            `üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã:</b> ${unassignedOrders.length}\n` +
            `üìù <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:</b> ${myOrders.length}\n` +
            `üîî <b>–ù–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b> ${(await db.getNotifications(userId, 1)).filter(n => !n.is_read).length}\n\n` +
            `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
            { 
                parse_mode: 'HTML',
                reply_markup: operatorKeyboard
            }
        );
    }

    // –û—Ç–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ (–æ–ø–µ—Ä–∞—Ç–æ—Ä)
    if (data === 'op_mark_read') {
        const userRole = await db.getUserRole(userId);
        if (!userRole || !['admin', 'operator'].includes(userRole)) {
            return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        }
        
        try {
            // –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            await ctx.answerCallbackQuery('‚úÖ –û—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ');
            await ctx.reply(
                `‚úÖ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>\n\n` +
                `üì® –í—Å–µ –≤–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ`,
                { 
                    parse_mode: 'HTML',
                    reply_markup: new InlineKeyboard()
                        .text('üîô –ù–∞–∑–∞–¥ –∫ –ø–∞–Ω–µ–ª–∏', 'op_back')
                }
            );
        } catch (error) {
            await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        }
    }

    // === –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê ===

    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
    if (data === 'admin_weblogs') {
        const userRole = await db.getUserRole(userId);
        if (userRole !== 'admin') {
            return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        }
        
        await ctx.answerCallbackQuery('üîÑ –ó–∞–≥—Ä—É–∂–∞—é –ª–æ–≥–∏...');
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã —Å —Å–∞–π—Ç–∞
            const recentOrders = await db.getRecentWebOrders(10);
            const stats = await db.getTodayWebStats();
            
            let webLogsText = `üåê <b>–ú–û–ù–ò–¢–û–†–ò–ù–ì –ê–ö–¢–ò–í–ù–û–°–¢–ò –°–ê–ô–¢–ê</b>\n\n`;
            webLogsText += `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n`;
            webLogsText += `üîÑ –ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫: ${stats.ordersToday || 0}\n`;
            webLogsText += `üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.uniqueUsers || 0}\n`;
            webLogsText += `üí∞ –û–±–æ—Ä–æ—Ç: $${(stats.volumeToday || 0).toFixed(2)}\n\n`;
            
            if (recentOrders.length === 0) {
                webLogsText += `üì≠ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:</b>\n–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ–≥–æ–¥–Ω—è`;
            } else {
                webLogsText += `üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã —Å —Å–∞–π—Ç–∞:</b>\n\n`;
                recentOrders.forEach((order, index) => {
                    const time = new Date(order.created_at).toLocaleTimeString('ru', { hour: '2-digit', minute: '2-digit' });
                    webLogsText += `${index + 1}. üìã –ó–∞—è–≤–∫–∞ #${order.id}\n`;
                    webLogsText += `‚è∞ ${time} | üë§ ${order.username || '–ê–Ω–æ–Ω–∏–º'}\n`;
                    webLogsText += `üí± ${order.from_amount} ${order.from_currency} ‚Üí ${order.to_currency}\n`;
                    webLogsText += `üìä ${order.assignment_status || '–Ω–æ–≤–∞—è'}\n\n`;
                });
            }
            
            webLogsText += `üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleTimeString('ru')}`;
            
            const webLogsKeyboard = new InlineKeyboard()
                .text('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'admin_weblogs')
                .text('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–Ω—è', 'admin_daily_stats')
                .row()
                .text('üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ', 'admin_back');
            
            await ctx.reply(webLogsText, { 
                parse_mode: 'HTML',
                reply_markup: webLogsKeyboard
            });
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è web-–ª–æ–≥–æ–≤:', error);
            await ctx.reply(
                `‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</b>\n\n` +
                `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞.\n` +
                `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î.`,
                { 
                    parse_mode: 'HTML',
                    reply_markup: new InlineKeyboard()
                        .text('üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ', 'admin_back')
                }
            );
        }
    }

    // –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–Ω—è (–∞–¥–º–∏–Ω—ã –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã)
    if (data === 'admin_daily_stats') {
        const userRole = await db.getUserRole(userId);
        if (!userRole || !['admin', 'operator'].includes(userRole)) {
            return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        }
        
        await ctx.answerCallbackQuery('üìä –°–æ–±–∏—Ä–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...');
        
        try {
            const stats = await db.getDailyStats();
            const webStats = await db.getTodayWebStats();
            
            // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç—á–µ—Ç–∞
            const now = new Date();
            const timeString = now.toLocaleString('ru');
            const weekday = now.toLocaleDateString('ru', { weekday: 'long' });
            
            let dailyText = `üìà <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ù–Ø</b>\n`;
            dailyText += `üìÖ ${weekday}, ${timeString}\n\n`;
            
            dailyText += `üåê <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞:</b>\n`;
            dailyText += `üìù –ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫: ${webStats.ordersToday || 0}\n`;
            dailyText += `üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π: ${webStats.uniqueUsers || 0}\n`;
            dailyText += `üí∞ –û–±–æ—Ä–æ—Ç —Å —Å–∞–π—Ç–∞: $${(webStats.volumeToday || 0).toFixed(2)}\n\n`;
            
            dailyText += `ü§ñ <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–æ—Ç–∞:</b>\n`;
            dailyText += `üë§ –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.newUsersToday || 0}\n`;
            dailyText += `üìã –ó–∞—è–≤–æ–∫ —á–µ—Ä–µ–∑ –±–æ—Ç–∞: ${stats.botOrdersToday || 0}\n`;
            dailyText += `üíé –û–±–æ—Ä–æ—Ç —á–µ—Ä–µ–∑ –±–æ—Ç–∞: $${(stats.botVolumeToday || 0).toFixed(2)}\n\n`;
            
            dailyText += `üìä <b>–û–±—â–∏–µ –∏—Ç–æ–≥–∏:</b>\n`;
            dailyText += `üî¢ –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: ${(stats.ordersToday || 0) + (webStats.ordersToday || 0)}\n`;
            dailyText += `üíµ –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç: $${((stats.volumeToday || 0) + (webStats.volumeToday || 0)).toFixed(2)}\n`;
            dailyText += `‚ö° –ö–æ–Ω–≤–µ—Ä—Å–∏—è: ${stats.totalUsers > 0 ? (((stats.ordersToday || 0) / stats.totalUsers) * 100).toFixed(1) : 0}%\n\n`;
            
            // –û–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
            if (userRole === 'admin') {
                dailyText += `üë®‚Äçüíº <b>–†–∞–±–æ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤:</b>\n`;
                dailyText += `‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${stats.processedToday || 0}\n`;
                dailyText += `‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏: ${stats.pendingOrders || 0}\n`;
                dailyText += `üîÑ –í —Ä–∞–±–æ—Ç–µ: ${stats.processingOrders || 0}\n`;
            }
            
            dailyText += `\nüïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${now.toLocaleTimeString('ru')}`;
            
            const statsKeyboard = new InlineKeyboard()
                .text('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'admin_daily_stats')
                .text('üåê –õ–æ–≥–∏ —Å–∞–π—Ç–∞', userRole === 'admin' ? 'admin_weblogs' : null)
                .row()
                .text('üîô –ù–∞–∑–∞–¥', userRole === 'admin' ? 'admin_back' : 'op_back');
            
            // –£–¥–∞–ª—è–µ–º null –∫–Ω–æ–ø–∫–∏
            if (userRole !== 'admin') {
                statsKeyboard.inline_keyboard[0] = statsKeyboard.inline_keyboard[0].filter(btn => btn.callback_data !== null);
            }
            
            await ctx.reply(dailyText, { 
                parse_mode: 'HTML',
                reply_markup: statsKeyboard
            });
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–Ω—è:', error);
            await ctx.reply(
                `‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö</b>\n\n` +
                `–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –¥–µ–Ω—å.\n` +
                `–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.`,
                { 
                    parse_mode: 'HTML',
                    reply_markup: new InlineKeyboard()
                        .text('üîô –ù–∞–∑–∞–¥', userRole === 'admin' ? 'admin_back' : 'op_back')
                }
            );
        }
    }

    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö –ù–ê–°–¢–†–û–ï–ö –°–ò–°–¢–ï–ú–´ ===

    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    if (data === 'admin_restart_bot') {
        const userRole = await db.getUserRole(userId);
        if (userRole !== 'admin') {
            return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        }
        
        await ctx.answerCallbackQuery();
        
        const confirmKeyboard = new InlineKeyboard()
            .text('üî¥ –î–ê, –ü–ï–†–ï–ó–ê–ü–£–°–¢–ò–¢–¨', 'admin_confirm_restart')
            .text('‚ùå –û—Ç–º–µ–Ω–∞', 'admin_settings');
        
        await ctx.reply(
            `üîÑ <b>–ü–ï–†–ï–ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´</b>\n\n` +
            `‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b> –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.\n\n` +
            `üìã <b>–ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç:</b>\n` +
            `‚Ä¢ –í—Å–µ —Ç–µ–∫—É—â–∏–µ —Å–µ—Å—Å–∏–∏ –±—É–¥—É—Ç —Å–±—Ä–æ—à–µ–Ω—ã\n` +
            `‚Ä¢ –ë–æ—Ç –æ—Ç–∫–ª—é—á–∏—Ç—Å—è –Ω–∞ ~30 —Å–µ–∫—É–Ω–¥\n` +
            `‚Ä¢ –í—Å–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n` +
            `‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—Å—è\n\n` +
            `‚ùó –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –Ω–µ—Ç –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤!`,
            { 
                parse_mode: 'HTML',
                reply_markup: confirmKeyboard
            }
        );
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    if (data === 'admin_confirm_restart') {
        const userRole = await db.getUserRole(userId);
        if (userRole !== 'admin') {
            return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        }
        
        await ctx.answerCallbackQuery('üîÑ –ò–Ω–∏—Ü–∏–∏—Ä—É—é –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...');
        
        await ctx.reply(
            `üîÑ <b>–°–ò–°–¢–ï–ú–ê –ü–ï–†–ï–ó–ê–ü–£–°–ö–ê–ï–¢–°–Ø...</b>\n\n` +
            `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n` +
            `üë§ –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: ${ctx.from.first_name}\n\n` +
            `üì° –û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—É...\n` +
            `üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...`,
            { parse_mode: 'HTML' }
        );
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
        const staff = await db.getStaffList();
        for (const member of staff) {
            try {
                await bot.api.sendMessage(member.telegram_id,
                    `üîÑ <b>–°–ò–°–¢–ï–ú–ê –ü–ï–†–ï–ó–ê–ü–£–°–ö–ê–ï–¢–°–Ø</b>\n\n` +
                    `‚è∞ ${new Date().toLocaleString('ru-RU')}\n` +
                    `üë§ –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: ${ctx.from.first_name}\n\n` +
                    `üí§ –ë–æ—Ç –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ~30 —Å–µ–∫—É–Ω–¥\n` +
                    `üöÄ –û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ!`,
                    { parse_mode: 'HTML' }
                );
            } catch (error) {
                console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å ${member.telegram_id} –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ`);
            }
        }
        
        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–æ–º');
            process.exit(0);
        }, 5000);
    }

    // –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤
    if (data === 'admin_clear_logs') {
        const userRole = await db.getUserRole(userId);
        if (userRole !== 'admin') {
            return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        }
        
        await ctx.answerCallbackQuery();
        
        const confirmKeyboard = new InlineKeyboard()
            .text('üóëÔ∏è –î–ê, –û–ß–ò–°–¢–ò–¢–¨', 'admin_confirm_clear_logs')
            .text('‚ùå –û—Ç–º–µ–Ω–∞', 'admin_settings');
        
        await ctx.reply(
            `üóÉÔ∏è <b>–û–ß–ò–°–¢–ö–ê –õ–û–ì–û–í</b>\n\n` +
            `‚ö†Ô∏è –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏.\n\n` +
            `üìã <b>–ß—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ:</b>\n` +
            `‚Ä¢ –õ–æ–≥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)\n` +
            `‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã\n` +
            `‚Ä¢ –ö—ç—à —Å–∏—Å—Ç–µ–º—ã\n\n` +
            `‚úÖ <b>–ß—Ç–æ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è:</b>\n` +
            `‚Ä¢ –ó–∞–∫–∞–∑—ã –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\n` +
            `‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ\n` +
            `‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã`,
            { 
                parse_mode: 'HTML',
                reply_markup: confirmKeyboard
            }
        );
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤
    if (data === 'admin_confirm_clear_logs') {
        const userRole = await db.getUserRole(userId);
        if (userRole !== 'admin') {
            return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        }
        
        await ctx.answerCallbackQuery('üóëÔ∏è –û—á–∏—â–∞—é –ª–æ–≥–∏...');
        
        try {
            // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            const deletedNotifications = await db.clearOldNotifications(7);
            
            await ctx.reply(
                `‚úÖ <b>–õ–û–ì–ò –û–ß–ò–©–ï–ù–´!</b>\n\n` +
                `üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${deletedNotifications}\n` +
                `üìÖ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n` +
                `üë§ –í—ã–ø–æ–ª–Ω–∏–ª: ${ctx.from.first_name}\n\n` +
                `üíæ –°–∏—Å—Ç–µ–º–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!`,
                { 
                    parse_mode: 'HTML',
                    reply_markup: new InlineKeyboard()
                        .text('üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', 'admin_settings')
                }
            );
            
        } catch (error) {
            await ctx.reply(
                `‚ùå <b>–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤</b>\n\n` +
                `${error.message}`,
                { 
                    parse_mode: 'HTML',
                    reply_markup: new InlineKeyboard()
                        .text('üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', 'admin_settings')
                }
            );
        }
    }

    // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
    if (data === 'admin_export_data') {
        const userRole = await db.getUserRole(userId);
        if (userRole !== 'admin') {
            return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        }
        
        await ctx.answerCallbackQuery('üìä –ì–æ—Ç–æ–≤–ª—é —ç–∫—Å–ø–æ—Ä—Ç...');
        
        try {
            const stats = await db.getAdminStats();
            const staff = await db.getStaffList();
            const recentOrders = await db.getRecentWebOrders(50);
            
            const exportData = {
                export_time: new Date().toISOString(),
                export_by: ctx.from.first_name,
                statistics: stats,
                staff_count: staff.length,
                recent_orders_count: recentOrders.length,
                system_status: 'active'
            };
            
            const exportText = 
                `üìä <b>–≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–• EXMACHINAX</b>\n\n` +
                `üìÖ <b>–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:</b> ${new Date().toLocaleString('ru-RU')}\n` +
                `üë§ <b>–í—ã–ø–æ–ª–Ω–∏–ª:</b> ${ctx.from.first_name}\n\n` +
                `üìà <b>–û–°–ù–û–í–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>\n` +
                `üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.totalUsers}\n` +
                `üìã –ó–∞–∫–∞–∑–æ–≤: ${stats.totalOrders}\n` +
                `üí∞ –û–±–æ—Ä–æ—Ç: $${(stats.totalVolume || 0).toFixed(2)}\n` +
                `üë®‚Äçüíº –ü–µ—Ä—Å–æ–Ω–∞–ª: ${staff.length} —á–µ–ª–æ–≤–µ–∫\n\n` +
                `üìä <b>–ó–ê –°–ï–ì–û–î–ù–Ø:</b>\n` +
                `üÜï –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.newUsersToday}\n` +
                `üìù –ó–∞—è–≤–æ–∫: ${stats.ordersToday}\n` +
                `üíµ –û–±–æ—Ä–æ—Ç: $${(stats.volumeToday || 0).toFixed(2)}\n\n` +
                `üéØ <b>–°–¢–ê–¢–£–°–´ –ó–ê–ö–ê–ó–û–í:</b>\n` +
                `‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${stats.completedOrders}\n` +
                `‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏: ${stats.pendingOrders}\n` +
                `üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: ${stats.processingOrders}\n\n` +
                `üì± <b>JSON –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:</b>\n` +
                `<code>${JSON.stringify(exportData, null, 2)}</code>`;
            
            await ctx.reply(exportText, { 
                parse_mode: 'HTML',
                reply_markup: new InlineKeyboard()
                    .text('üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', 'admin_settings')
            });
            
        } catch (error) {
            await ctx.reply(
                `‚ùå <b>–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö</b>\n\n` +
                `${error.message}`,
                { 
                    parse_mode: 'HTML',
                    reply_markup: new InlineKeyboard()
                        .text('üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', 'admin_settings')
                }
            );
        }
    }

    // Google Sheets —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    if (data === 'admin_google_sheets') {
        const userRole = await db.getUserRole(userId);
        if (userRole !== 'admin') {
            return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        }
        
        await ctx.answerCallbackQuery('üìã –ó–∞–≥—Ä—É–∂–∞—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets...');
        
        try {
            const configPath = path.join(__dirname, '..', 'config', 'google-sheets.json');
            let config = {};
            let statusText = '';
            
            if (fs.existsSync(configPath)) {
                config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
                
                if (config.enabled && googleSheetsManager && googleSheetsManager.isReady()) {
                    statusText = '‚úÖ Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ';
                } else if (config.enabled) {
                    statusText = '‚ö†Ô∏è Google Sheets –≤–∫–ª—é—á–µ–Ω, –Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
                } else {
                    statusText = '‚ùå Google Sheets –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏';
                }
            } else {
                statusText = '‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Google Sheets –Ω–µ –Ω–∞–π–¥–µ–Ω–∞';
            }
            
            const sheetsText = 
                `üìã <b>GOOGLE SHEETS –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø</b>\n\n` +
                `üìä <b>–°—Ç–∞—Ç—É—Å:</b> ${statusText}\n\n` +
                `üîß <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n` +
                `üìä –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö\n` +
                `üìã –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤\n` +
                `üë• –≠–∫—Å–ø–æ—Ä—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤\n` +
                `üìà –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n` +
                `üë§ –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n` +
                (googleSheetsManager && googleSheetsManager.isReady() ? 
                    `üîó <b>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É:</b>\n<a href="${googleSheetsManager.getSpreadsheetUrl()}">–û—Ç–∫—Ä—ã—Ç—å Google –¢–∞–±–ª–∏—Ü—É</a>\n\n` : '') +
                `${googleSheetsManager && googleSheetsManager.isReady() ? '‚úÖ' : '‚ùå'} –ì–æ—Ç–æ–≤ –∫ —ç–∫—Å–ø–æ—Ä—Ç—É`;
            
            const sheetsKeyboard = new InlineKeyboard();
            
            if (googleSheetsManager && googleSheetsManager.isReady()) {
                sheetsKeyboard
                    .text('üí± –°–æ–∑–¥–∞—Ç—å –ª–∏—Å—Ç –∫—É—Ä—Å–æ–≤', 'admin_create_rates_sheet')
                    .text('üìä –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö', 'admin_sheets_export_all')
                    .row()
                    .text('üìã –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤', 'admin_sheets_export_orders')
                    .text('üë• –≠–∫—Å–ø–æ—Ä—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤', 'admin_sheets_export_staff')
                    .row()
                    .text('üìà –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', 'admin_sheets_export_stats')
                    .text('üë§ –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'admin_sheets_export_users')
                    .row();
                
                if (googleSheetsManager.getSpreadsheetUrl()) {
                    sheetsKeyboard.url('üîó –û—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É', googleSheetsManager.getSpreadsheetUrl()).row();
                }
            } else {
                sheetsKeyboard.text('‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ', 'admin_sheets_setup');
            }
            
            sheetsKeyboard.text('üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', 'admin_settings');
            
            await ctx.reply(sheetsText, { 
                parse_mode: 'HTML',
                reply_markup: sheetsKeyboard,
                disable_web_page_preview: true
            });
            
        } catch (error) {
            await ctx.reply(
                `‚ùå <b>–û—à–∏–±–∫–∞ Google Sheets</b>\n\n` +
                `${error.message}`,
                { 
                    parse_mode: 'HTML',
                    reply_markup: new InlineKeyboard()
                        .text('üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', 'admin_settings')
                }
            );
        }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ Google Sheets
    if (data.startsWith('admin_sheets_export_')) {
        const userRole = await db.getUserRole(userId);
        if (userRole !== 'admin') {
            return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        }
        
        if (!googleSheetsManager || !googleSheetsManager.isReady()) {
            return ctx.answerCallbackQuery('‚ùå Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
        
        const exportType = data.replace('admin_sheets_export_', '');
        await ctx.answerCallbackQuery(`üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é ${exportType}...`);
        
        try {
            let success = false;
            let exportedCount = 0;
            
            switch (exportType) {
                case 'all':
                    success = await googleSheetsManager.exportAll(db);
                    break;
                case 'orders':
                    success = await googleSheetsManager.exportOrders(db);
                    break;
                case 'staff':
                    success = await googleSheetsManager.exportStaff(db);
                    break;
                case 'stats':
                    success = await googleSheetsManager.exportDailyStats(db);
                    break;
                case 'users':
                    success = await googleSheetsManager.exportUsers(db);
                    break;
                case 'aml':
                    success = await googleSheetsManager.exportAMLMonitoring(db);
                    break;
            }
            
            if (success) {
                await ctx.reply(
                    `‚úÖ <b>–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n` +
                    `üìä –¢–∏–ø: ${exportType}\n` +
                    `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru')}\n` +
                    `üë§ –í—ã–ø–æ–ª–Ω–∏–ª: ${ctx.from.first_name}\n\n` +
                    `üîó –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ Google –¢–∞–±–ª–∏—Ü–µ`,
                    { 
                        parse_mode: 'HTML',
                        reply_markup: new InlineKeyboard()
                            .url('üìã –û—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É', googleSheetsManager.getSpreadsheetUrl())
                            .text('üîô –ù–∞–∑–∞–¥', 'admin_google_sheets')
                    }
                );
            } else {
                throw new Error('–≠–∫—Å–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è');
            }
            
        } catch (error) {
            await ctx.reply(
                `‚ùå <b>–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞</b>\n\n` +
                `–¢–∏–ø: ${exportType}\n` +
                `–û—à–∏–±–∫–∞: ${error.message}`,
                { 
                    parse_mode: 'HTML',
                    reply_markup: new InlineKeyboard()
                        .text('üîô –ù–∞–∑–∞–¥', 'admin_google_sheets')
                }
            );
        }
    }

    // üí± –°–û–ó–î–ê–ù–ò–ï –õ–ò–°–¢–ê –ö–£–†–°–û–í
    if (data === 'admin_create_rates_sheet') {
        if (!(await isAdmin(userId))) return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        
        await ctx.answerCallbackQuery('üí± –°–æ–∑–¥–∞—é –ª–∏—Å—Ç –∫—É—Ä—Å–æ–≤...');
        
        try {
            const sheetsManager = googleSheetsManager || global.googleSheetsManager;
            if (!sheetsManager) {
                return await ctx.reply('‚ùå Google Sheets Manager –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            // –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç Manual_Rates
            try {
                await sheetsManager.createWorksheet('Manual_Rates', 
                    ['–ü–∞—Ä–∞ –≤–∞–ª—é—Ç', '–ö—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏', '–ö—É—Ä—Å –ø–æ–∫—É–ø–∫–∏', '–°–ø—Ä–µ–¥ (%)', '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ', '–°—Ç–∞—Ç—É—Å', '–ò—Å—Ç–æ—á–Ω–∏–∫', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π']);
                console.log('‚úÖ –õ–∏—Å—Ç Manual_Rates —Å–æ–∑–¥–∞–Ω');
            } catch (error) {
                // –õ–∏—Å—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                console.log('‚ÑπÔ∏è –õ–∏—Å—Ç Manual_Rates —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', error.message);
            }
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏
            const success = await sheetsManager.initializeRatesTable();
            
            if (success) {
                await ctx.reply(
                    `‚úÖ <b>–õ–ò–°–¢ –ö–£–†–°–û–í –°–û–ó–î–ê–ù!</b>\n\n` +
                    `üìä –î–æ–±–∞–≤–ª–µ–Ω –ª–∏—Å—Ç "Manual_Rates" —Å 21 –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä–æ–π\n\n` +
                    `üí° <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n` +
                    `1. –ù–∞–π–¥–∏—Ç–µ –ª–∏—Å—Ç "Manual_Rates" –≤ —Ç–∞–±–ª–∏—Ü–µ\n` +
                    `2. –ò–∑–º–µ–Ω–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –Ω–∞ "MANUAL"\n` +
                    `3. –£–∫–∞–∂–∏—Ç–µ –∫—É—Ä—Å—ã –ø—Ä–æ–¥–∞–∂–∏ –∏ –ø–æ–∫—É–ø–∫–∏\n` +
                    `4. –ë–æ—Ç –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫\n\n` +
                    `üîó <a href="${sheetsManager.getSpreadsheetUrl()}">–û—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É</a>`,
                    { 
                        parse_mode: 'HTML',
                        disable_web_page_preview: true,
                        reply_markup: new InlineKeyboard().text('üîô –ù–∞–∑–∞–¥ –∫ Google Sheets', 'admin_sheets')
                    }
                );
            } else {
                await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Å—Ç–∞ –∫—É—Ä—Å–æ–≤', {
                    reply_markup: new InlineKeyboard().text('üîô –ù–∞–∑–∞–¥', 'admin_sheets')
                });
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Å—Ç–∞ –∫—É—Ä—Å–æ–≤:', error);
            await ctx.reply(
                `‚ùå <b>–û–®–ò–ë–ö–ê</b>\n\n${error.message}`,
                { 
                    parse_mode: 'HTML',
                    reply_markup: new InlineKeyboard().text('üîô –ù–∞–∑–∞–¥', 'admin_sheets')
                }
            );
        }
    }

    // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Google Sheets
    if (data === 'admin_sheets_setup') {
        const userRole = await db.getUserRole(userId);
        if (userRole !== 'admin') {
            return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        }
        
        await ctx.answerCallbackQuery();
        
        const setupText = 
            `üîß <b>–ù–ê–°–¢–†–û–ô–ö–ê GOOGLE SHEETS</b>\n\n` +
            `üìã <b>–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n\n` +
            `1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Google Cloud Console\n` +
            `2Ô∏è‚É£ –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π\n` +
            `3Ô∏è‚É£ –í–∫–ª—é—á–∏—Ç–µ Google Sheets API\n` +
            `4Ô∏è‚É£ –°–æ–∑–¥–∞–π—Ç–µ Service Account\n` +
            `5Ô∏è‚É£ –°–∫–∞—á–∞–π—Ç–µ JSON –∫–ª—é—á\n` +
            `6Ô∏è‚É£ –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é Google –¢–∞–±–ª–∏—Ü—É\n` +
            `7Ô∏è‚É£ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Ç–∞–±–ª–∏—Ü–µ–π —Å email –∏–∑ JSON\n` +
            `8Ô∏è‚É£ –û–±–Ω–æ–≤–∏—Ç–µ config/google-sheets.json\n` +
            `9Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ "enabled": true\n` +
            `üîü –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞\n\n` +
            `üìÅ <b>–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:</b>\n` +
            `<code>config/google-sheets.json</code>\n\n` +
            `üí° –ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π —á–∞—Å!`;
        
        await ctx.reply(setupText, { 
            parse_mode: 'HTML',
            reply_markup: new InlineKeyboard()
                .text('üîô –ù–∞–∑–∞–¥', 'admin_google_sheets')
        });
    }

    // –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –ë–î
    if (data === 'admin_db_maintenance') {
        const userRole = await db.getUserRole(userId);
        if (userRole !== 'admin') {
            return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        }
        
        await ctx.answerCallbackQuery('üîß –ü—Ä–æ–≤–µ—Ä—è—é –ë–î...');
        
        try {
            const stats = await db.getAdminStats();
            
            const maintenanceText = 
                `üîß <b>–û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–•</b>\n\n` +
                `üìä <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î:</b>\n` +
                `üíæ –†–∞–∑–º–µ—Ä: ~${Math.round(stats.totalOrders / 10)}KB\n` +
                `üìã –ó–∞–ø–∏—Å–µ–π –∑–∞–∫–∞–∑–æ–≤: ${stats.totalOrders}\n` +
                `üë§ –ó–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.totalUsers}\n` +
                `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${stats.unreadNotifications}\n\n` +
                `‚úÖ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b>\n` +
                `üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n` +
                `üìä –ü–µ—Ä–µ—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n` +
                `üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏\n\n` +
                `‚ö° –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!`;
            
            const maintenanceKeyboard = new InlineKeyboard()
                .text('üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ', 'admin_confirm_clear_logs')
                .text('üìä –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', 'admin_recalc_stats')
                .row()
                .text('üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', 'admin_settings');
            
            await ctx.reply(maintenanceText, { 
                parse_mode: 'HTML',
                reply_markup: maintenanceKeyboard
            });
            
        } catch (error) {
            await ctx.reply(
                `‚ùå <b>–û—à–∏–±–∫–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –ë–î</b>\n\n` +
                `${error.message}`,
                { 
                    parse_mode: 'HTML',
                    reply_markup: new InlineKeyboard()
                        .text('üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', 'admin_settings')
                }
            );
        }
    }

    // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –û–ü–ï–†–ê–¢–û–†–ê–ú–ò –ó–ê–ö–ê–ó–û–í ===

    // –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–∫–∞–∑–æ–≤
    if (data === 'admin_active_orders') {
        const userRole = await db.getUserRole(userId);
        if (userRole !== 'admin') {
            return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        }
        
        await ctx.answerCallbackQuery('üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–∫–∞–∑–æ–≤...');
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –º–µ–Ω—é
            const [activeOrders, unassignedOrders] = await Promise.all([
                db.getActiveOrdersForAdmin(),
                db.getUnassignedOrders()
            ]);
            
            const menuText = 
                `üìã <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê–ú–ò</b>\n\n` +
                `üìä <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>\n\n` +
                `üî• <b>–ù–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:</b> ${unassignedOrders.length}\n` +
                `üìù –¢—Ä–µ–±—É—é—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞\n\n` +
                `üìã <b>–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:</b> ${activeOrders.length}\n` +
                `üìä –í–∫–ª—é—á–∞—è –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∏ –≤ —Ä–∞–±–æ—Ç–µ\n\n` +
                `–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:`;
            
            const menuKeyboard = new InlineKeyboard()
                .text(`üî• –ù–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ (${unassignedOrders.length})`, 'admin_unassigned_orders')
                .text(`üìã –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ (${activeOrders.length})`, 'admin_all_active_orders')
                .row()
                .text('üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ', 'admin_back');
            
            await ctx.reply(menuText, { 
                parse_mode: 'HTML',
                reply_markup: menuKeyboard
            });
            
        } catch (error) {
            await ctx.reply(
                `‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é</b>\n\n` +
                `${error.message}`,
                { 
                    parse_mode: 'HTML',
                    reply_markup: new InlineKeyboard()
                        .text('üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ', 'admin_back')
                }
            );
        }
    }

    // –ù–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π)
    if (data === 'admin_unassigned_orders' || data.startsWith('admin_unassigned_orders_page_')) {
        const userRole = await db.getUserRole(userId);
        if (userRole !== 'admin') {
            return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        let page = 0;
        if (data.startsWith('admin_unassigned_orders_page_')) {
            page = parseInt(data.replace('admin_unassigned_orders_page_', '')) || 0;
        }
        
        await ctx.answerCallbackQuery('üî• –ó–∞–≥—Ä—É–∂–∞—é –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã...');
        
        try {
            const unassignedOrders = await db.getUnassignedOrders();
            
            if (unassignedOrders.length === 0) {
                await ctx.reply(
                    `üî• <b>–ù–ï–ù–ê–ó–ù–ê–ß–ï–ù–ù–´–ï –ó–ê–ö–ê–ó–´</b>\n\n` +
                    `‚úÖ –ù–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç!\n\n` +
                    `üéâ –í—Å–µ –∑–∞–∫–∞–∑—ã –∏–º–µ—é—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤`,
                    { 
                        parse_mode: 'HTML',
                        reply_markup: new InlineKeyboard()
                            .text('üîô –ö –º–µ–Ω—é –∑–∞–∫–∞–∑–æ–≤', 'admin_active_orders')
                    }
                );
                return;
            }
            
            // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
            const ordersPerPage = 6;
            const totalPages = Math.ceil(unassignedOrders.length / ordersPerPage);
            const startIndex = page * ordersPerPage;
            const endIndex = Math.min(startIndex + ordersPerPage, unassignedOrders.length);
            const pageOrders = unassignedOrders.slice(startIndex, endIndex);
            
            let ordersText = `üî• <b>–ù–ï–ù–ê–ó–ù–ê–ß–ï–ù–ù–´–ï –ó–ê–ö–ê–ó–´</b>\n\n`;
            ordersText += `‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: ${unassignedOrders.length}\n`;
            ordersText += `üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page + 1} –∏–∑ ${totalPages}\n\n`;
            
            const ordersKeyboard = new InlineKeyboard();
            
            pageOrders.forEach((order, index) => {
                const globalIndex = startIndex + index + 1;
                const status = order.status === 'pending' ? '‚è≥' : 'üîÑ';
                
                ordersText += `${globalIndex}. ${status} –ó–∞–∫–∞–∑ #${order.id}\n`;
                ordersText += `üí± ${order.from_amount} ${order.from_currency} ‚Üí ${order.to_currency}\n`;
                ordersText += `üë§ –ö–ª–∏–µ–Ω—Ç: ${order.username || order.first_name || '–ê–Ω–æ–Ω–∏–º'}\n`;
                ordersText += `‚è∞ ${new Date(order.created_at).toLocaleString('ru')}\n\n`;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
                ordersKeyboard.text(`üî• –ó–∞–∫–∞–∑ #${order.id}`, `admin_manage_order_${order.id}`);
                if (index % 2 === 1) ordersKeyboard.row();
            });
            
            // –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            if (totalPages > 1) {
                ordersKeyboard.row();
                if (page > 0) {
                    ordersKeyboard.text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `admin_unassigned_orders_page_${page - 1}`);
                }
                ordersKeyboard.text(`üìÑ ${page + 1}/${totalPages}`, 'noop');
                if (page < totalPages - 1) {
                    ordersKeyboard.text('–î–∞–ª–µ–µ ‚û°Ô∏è', `admin_unassigned_orders_page_${page + 1}`);
                }
            }
            
            ordersKeyboard.row()
                .text('üîô –ö –º–µ–Ω—é –∑–∞–∫–∞–∑–æ–≤', 'admin_active_orders')
                .text('üè† –ö –∞–¥–º–∏–Ω–∫–µ', 'admin_back');
            
            await ctx.reply(ordersText, { 
                parse_mode: 'HTML',
                reply_markup: ordersKeyboard
            });
            
        } catch (error) {
            await ctx.reply(
                `‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤</b>\n\n` +
                `${error.message}`,
                { 
                    parse_mode: 'HTML',
                    reply_markup: new InlineKeyboard()
                        .text('üîô –ö –º–µ–Ω—é –∑–∞–∫–∞–∑–æ–≤', 'admin_active_orders')
                }
            );
        }
    }

    // –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π)
    if (data === 'admin_all_active_orders' || data.startsWith('admin_all_active_orders_page_')) {
        const userRole = await db.getUserRole(userId);
        if (userRole !== 'admin') {
            return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        let page = 0;
        if (data.startsWith('admin_all_active_orders_page_')) {
            page = parseInt(data.replace('admin_all_active_orders_page_', '')) || 0;
        }
        
        try {
            await ctx.answerCallbackQuery('üìã –ó–∞–≥—Ä—É–∂–∞—é –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã...');
        } catch (callbackError) {
            console.log('‚ö†Ô∏è Callback query timeout:', callbackError.message);
        }
        
        try {
            const activeOrders = await db.getActiveOrdersForAdmin();
            
            if (activeOrders.length === 0) {
                await ctx.reply(
                    `üìã <b>–í–°–ï –ê–ö–¢–ò–í–ù–´–ï –ó–ê–ö–ê–ó–´</b>\n\n` +
                    `üì≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç\n\n` +
                    `‚ú® –í—Å–µ –∑–∞–∫–∞–∑—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!`,
                    { 
                        parse_mode: 'HTML',
                        reply_markup: new InlineKeyboard()
                            .text('üîô –ö –º–µ–Ω—é –∑–∞–∫–∞–∑–æ–≤', 'admin_active_orders')
                    }
                );
                return;
            }
            
            // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
            const ordersPerPage = 6;
            const totalPages = Math.ceil(activeOrders.length / ordersPerPage);
            const startIndex = page * ordersPerPage;
            const endIndex = Math.min(startIndex + ordersPerPage, activeOrders.length);
            const pageOrders = activeOrders.slice(startIndex, endIndex);
            
            let ordersText = `üìã <b>–í–°–ï –ê–ö–¢–ò–í–ù–´–ï –ó–ê–ö–ê–ó–´</b>\n\n`;
            ordersText += `üìä –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: ${activeOrders.length}\n`;
            ordersText += `üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page + 1} –∏–∑ ${totalPages}\n\n`;
            
            const ordersKeyboard = new InlineKeyboard();
            
            pageOrders.forEach((order, index) => {
                const globalIndex = startIndex + index + 1;
                const status = order.status === 'pending' ? '‚è≥' : 'üîÑ';
                const operator = order.operator_name || '‚ùå –ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω';
                
                ordersText += `${globalIndex}. ${status} –ó–∞–∫–∞–∑ #${order.id}\n`;
                ordersText += `üí± ${order.from_amount} ${order.from_currency} ‚Üí ${order.to_currency}\n`;
                ordersText += `üë§ –ö–ª–∏–µ–Ω—Ç: ${order.username || order.user_first_name || '–ê–Ω–æ–Ω–∏–º'}\n`;
                ordersText += `üë®‚Äçüíº –û–ø–µ—Ä–∞—Ç–æ—Ä: ${operator}\n`;
                ordersText += `‚è∞ ${new Date(order.created_at).toLocaleString('ru')}\n\n`;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
                ordersKeyboard.text(`üìã #${order.id}`, `admin_manage_order_${order.id}`);
                if (index % 2 === 1) ordersKeyboard.row();
            });
            
            // –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            if (totalPages > 1) {
                ordersKeyboard.row();
                if (page > 0) {
                    ordersKeyboard.text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `admin_all_active_orders_page_${page - 1}`);
                }
                ordersKeyboard.text(`üìÑ ${page + 1}/${totalPages}`, 'noop');
                if (page < totalPages - 1) {
                    ordersKeyboard.text('–î–∞–ª–µ–µ ‚û°Ô∏è', `admin_all_active_orders_page_${page + 1}`);
                }
            }
            
            ordersKeyboard.row()
                .text('üîô –ö –º–µ–Ω—é –∑–∞–∫–∞–∑–æ–≤', 'admin_active_orders')
                .text('üè† –ö –∞–¥–º–∏–Ω–∫–µ', 'admin_back');
            
            await ctx.reply(ordersText, { 
                parse_mode: 'HTML',
                reply_markup: ordersKeyboard
            });
            
        } catch (error) {
            await ctx.reply(
                `‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤</b>\n\n` +
                `${error.message}`,
                { 
                    parse_mode: 'HTML',
                    reply_markup: new InlineKeyboard()
                        .text('üîô –ö –º–µ–Ω—é –∑–∞–∫–∞–∑–æ–≤', 'admin_active_orders')
                }
            );
        }
    }

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∑–∞–∫–∞–∑–æ–º
    if (data.startsWith('admin_manage_order_')) {
        const userRole = await db.getUserRole(userId);
        if (userRole !== 'admin') {
            return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        }
        
        const orderId = parseInt(data.replace('admin_manage_order_', ''));
        try {
            await ctx.answerCallbackQuery('üîç –ó–∞–≥—Ä—É–∂–∞—é –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞...');
        } catch (callbackError) {
            console.log('‚ö†Ô∏è Callback query timeout:', callbackError.message);
        }
        
        try {
            const order = await db.getOrderWithOperator(orderId);
            
            if (!order) {
                return ctx.reply('‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            const operatorText = order.operator_name || '‚ùå –ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω';
            const statusEmoji = order.status === 'pending' ? '‚è≥' : order.status === 'processing' ? 'üîÑ' : '‚úÖ';
            
            const orderText = 
                `üìã <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–û–ú #${order.id}</b>\n\n` +
                `${statusEmoji} <b>–°—Ç–∞—Ç—É—Å:</b> ${order.status}\n` +
                `üí± <b>–û–±–º–µ–Ω:</b> ${order.from_amount} ${order.from_currency} ‚Üí ${order.to_currency}\n` +
                `üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> ${order.username || '–ê–Ω–æ–Ω–∏–º'}\n` +
                `üë®‚Äçüíº <b>–û–ø–µ—Ä–∞—Ç–æ—Ä:</b> ${operatorText}\n` +
                `‚è∞ <b>–°–æ–∑–¥–∞–Ω:</b> ${new Date(order.created_at).toLocaleString('ru')}\n\n` +
                `‚öôÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>`;
            
            const manageKeyboard = new InlineKeyboard()
                .text('üîÑ –°–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞', `admin_change_operator_${orderId}`)
                .text('üìä –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å', `admin_change_status_${orderId}`)
                .row()
                .text('üëÅÔ∏è –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏', `admin_order_details_${orderId}`)
                .text('üîô –ö –∑–∞–∫–∞–∑–∞–º', 'admin_active_orders');
            
            await ctx.reply(orderText, { 
                parse_mode: 'HTML',
                reply_markup: manageKeyboard
            });
            
        } catch (error) {
            await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        }
    }

    // –°–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    if (data.startsWith('admin_change_operator_')) {
        const userRole = await db.getUserRole(userId);
        if (userRole !== 'admin') {
            return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        }
        
        const orderId = parseInt(data.replace('admin_change_operator_', ''));
        try {
            await ctx.answerCallbackQuery('üë®‚Äçüíº –ó–∞–≥—Ä—É–∂–∞—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤...');
        } catch (callbackError) {
            console.log('‚ö†Ô∏è Callback query timeout:', callbackError.message);
        }
        
        try {
            const staff = await db.getStaffList();
            const operators = staff.filter(s => (s.role === 'operator' || s.role === 'admin') && s.is_active);
            
            if (operators.length === 0) {
                return ctx.reply(
                    `‚ùå <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤</b>\n\n` +
                    `–î–æ–±–∞–≤—å—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ —á–µ—Ä–µ–∑ /add_operator`,
                    { 
                        parse_mode: 'HTML',
                        reply_markup: new InlineKeyboard()
                            .text('üîô –ù–∞–∑–∞–¥', `admin_manage_order_${orderId}`)
                    }
                );
            }
            
            let operatorText = `üë®‚Äçüíº <b>–°–ú–ï–ù–ê –û–ü–ï–†–ê–¢–û–†–ê</b>\n\n`;
            operatorText += `üìã –ó–∞–∫–∞–∑ #${orderId}\n\n`;
            operatorText += `<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:</b>\n\n`;
            
            const operatorKeyboard = new InlineKeyboard();
            
            operators.forEach((operator, index) => {
                const name = operator.first_name || operator.username || `ID: ${operator.telegram_id}`;
                operatorText += `${index + 1}. ${name}\n`;
                
                operatorKeyboard.text(`üë§ ${name}`, `admin_assign_${orderId}_${operator.telegram_id}`);
                if (index % 2 === 1) operatorKeyboard.row();
            });
            
            // –û–ø—Ü–∏—è —Å–Ω—è—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
            operatorKeyboard.row()
                .text('‚ùå –°–Ω—è—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ', `admin_unassign_${orderId}`)
                .text('üîô –ù–∞–∑–∞–¥', `admin_manage_order_${orderId}`);
            
            await ctx.reply(operatorText, { 
                parse_mode: 'HTML',
                reply_markup: operatorKeyboard
            });
            
        } catch (error) {
            await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        }
    }

    // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    if (data.startsWith('admin_assign_')) {
        const userRole = await db.getUserRole(userId);
        if (userRole !== 'admin') {
            return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        }
        
        try {
            await ctx.answerCallbackQuery('üîÑ –ù–∞–∑–Ω–∞—á–∞—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞...');
        } catch (callbackError) {
            console.log('‚ö†Ô∏è Callback query timeout:', callbackError.message);
        }
        
        try {
            const parts = data.replace('admin_assign_', '').split('_');
            const orderId = parseInt(parts[0]);
            const operatorId = parseInt(parts[1]);
            
            console.log(`–ù–∞–∑–Ω–∞—á–∞—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ ${operatorId} –Ω–∞ –∑–∞–∫–∞–∑ ${orderId}`);
            
            if (isNaN(orderId) || isNaN(operatorId)) {
                throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞');
            }
            
            const result = await db.changeOrderOperator(orderId, operatorId);
            const operator = await db.getStaffById(operatorId);
            
            console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:`, operator);
            
            if (!operator) {
                throw new Error(`–û–ø–µ—Ä–∞—Ç–æ—Ä —Å ID ${operatorId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
            }
            
            const operatorName = operator.first_name || operator.username || `ID: ${operator.telegram_id}`;
            
            await ctx.reply(
                `‚úÖ <b>–û–ü–ï–†–ê–¢–û–† –ù–ê–ó–ù–ê–ß–ï–ù!</b>\n\n` +
                `üìã –ó–∞–∫–∞–∑ #${orderId}\n` +
                `üë®‚Äçüíº –ù–æ–≤—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä: ${operatorName}\n` +
                `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru')}\n\n` +
                `üîî –û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!`,
                { 
                    parse_mode: 'HTML',
                    reply_markup: new InlineKeyboard()
                        .text('üìã –ö –∑–∞–∫–∞–∑—É', `admin_manage_order_${orderId}`)
                        .text('üìä –ö –∑–∞–∫–∞–∑–∞–º', 'admin_active_orders')
                }
            );
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            try {
                await bot.api.sendMessage(parseInt(operatorId),
                    `üë®‚Äçüíº <b>–í–ê–ú –ù–ê–ó–ù–ê–ß–ï–ù –ó–ê–ö–ê–ó!</b>\n\n` +
                    `üìã –ó–∞–∫–∞–∑ #${orderId}\n` +
                    `üë§ –ù–∞–∑–Ω–∞—á–∏–ª: ${ctx.from.first_name} (–∞–¥–º–∏–Ω)\n` +
                    `‚è∞ ${new Date().toLocaleString('ru')}\n\n` +
                    `üéØ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /operator –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–æ–º`,
                    { 
                        parse_mode: 'HTML',
                        reply_markup: new InlineKeyboard()
                            .text('üë®‚Äçüíº –û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å', 'open_operator_panel')
                    }
                );
            } catch (error) {
                console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ ${operatorId}`);
            }
            
        } catch (error) {
            await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: ${error.message}`);
        }
    }

    // –°–Ω—è—Ç–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    if (data.startsWith('admin_unassign_')) {
        const userRole = await db.getUserRole(userId);
        if (userRole !== 'admin') {
            return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        }
        
        const orderId = parseInt(data.replace('admin_unassign_', ''));
        await ctx.answerCallbackQuery('üîÑ –°–Ω–∏–º–∞—é –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ...');
        
        try {
            const result = await db.unassignOrder(orderId);
            
            await ctx.reply(
                `‚úÖ <b>–ù–ê–ó–ù–ê–ß–ï–ù–ò–ï –°–ù–Ø–¢–û!</b>\n\n` +
                `üìã –ó–∞–∫–∞–∑ #${orderId}\n` +
                `üë§ –°–Ω—è–ª: ${ctx.from.first_name} (–∞–¥–º–∏–Ω)\n` +
                `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru')}\n\n` +
                `üìù –ó–∞–∫–∞–∑ –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º`,
                { 
                    parse_mode: 'HTML',
                    reply_markup: new InlineKeyboard()
                        .text('üìã –ö –∑–∞–∫–∞–∑—É', `admin_manage_order_${orderId}`)
                        .text('üìä –ö –∑–∞–∫–∞–∑–∞–º', 'admin_active_orders')
                }
            );
            
        } catch (error) {
            await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        }
    }

    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ò–ó–ú–ï–ù–ï–ù–ò–Ø –°–¢–ê–¢–£–°–ê –ò –ü–û–î–†–û–ë–ù–û–°–¢–ï–ô ===

    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
    if (data.startsWith('admin_change_status_')) {
        const userRole = await db.getUserRole(userId);
        if (userRole !== 'admin') {
            return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        }
        
        const orderId = parseInt(data.replace('admin_change_status_', ''));
        await ctx.answerCallbackQuery('üìä –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å...');
        
        try {
            const order = await db.getOrderWithOperator(orderId);
            
            if (!order) {
                return ctx.reply('‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            const statusText = 
                `üìä <b>–ò–ó–ú–ï–ù–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê</b>\n\n` +
                `üìã –ó–∞–∫–∞–∑ #${orderId}\n` +
                `üí± ${order.from_amount} ${order.from_currency} ‚Üí ${order.to_currency}\n` +
                `üìå –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${order.status}\n\n` +
                `<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:</b>`;
            
            const statusKeyboard = new InlineKeyboard()
                .text('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ', `admin_set_status_${orderId}_pending`)
                .text('üîÑ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ', `admin_set_status_${orderId}_processing`)
                .row()
                .text('üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã', `admin_set_status_${orderId}_payment_details_sent`)
                .text('‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞', `admin_set_status_${orderId}_payment_waiting`)
                .row()
                .text('‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω', `admin_set_status_${orderId}_payment_received`)
                .text('‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω', `admin_set_status_${orderId}_payment_confirmed`)
                .row()
                .text('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞', `admin_set_status_${orderId}_sending`)
                .text('üéâ –ó–∞–≤–µ—Ä—à–µ–Ω', `admin_set_status_${orderId}_completed`)
                .row()
                .text('‚ùå –û—Ç–º–µ–Ω–µ–Ω', `admin_set_status_${orderId}_cancelled`)
                .text('üîô –ù–∞–∑–∞–¥', `admin_manage_order_${orderId}`);
            
            await ctx.reply(statusText, { 
                parse_mode: 'HTML',
                reply_markup: statusKeyboard
            });
            
        } catch (error) {
            await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        }
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    if (data.startsWith('admin_set_status_')) {
        const userRole = await db.getUserRole(userId);
        if (userRole !== 'admin') {
            return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        }
        
        const parts = data.replace('admin_set_status_', '').split('_');
        const orderId = parseInt(parts[0]);
        const newStatus = parts.slice(1).join('_');
        
        await ctx.answerCallbackQuery('üîÑ –û–±–Ω–æ–≤–ª—è—é —Å—Ç–∞—Ç—É—Å...');
        
        try {
            await db.updateOrderStatus(orderId, newStatus);
            
            // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
            const order = await db.getOrderWithOperator(orderId);
            
            await ctx.reply(
                `‚úÖ <b>–°–¢–ê–¢–£–° –û–ë–ù–û–í–õ–ï–ù!</b>\n\n` +
                `üìã –ó–∞–∫–∞–∑ #${orderId}\n` +
                `üìä –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: ${newStatus}\n` +
                `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru')}\n` +
                `üë§ –ò–∑–º–µ–Ω–∏–ª: ${ctx.from.first_name}\n\n` +
                `üîî –ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!`,
                { 
                    parse_mode: 'HTML',
                    reply_markup: new InlineKeyboard()
                        .text('üìã –ö –∑–∞–∫–∞–∑—É', `admin_manage_order_${orderId}`)
                        .text('üìä –ö –∑–∞–∫–∞–∑–∞–º', 'admin_active_orders')
                }
            );
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            if (order && order.user_id) {
                try {
                    const statusMessages = {
                        'pending': '‚è≥ –í–∞—à –∑–∞–∫–∞–∑ –æ–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏',
                        'processing': 'üîÑ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É',
                        'payment_details_sent': 'üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã',
                        'payment_waiting': '‚è∞ –û–∂–∏–¥–∞–µ–º –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞',
                        'payment_received': '‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º',
                        'payment_confirmed': '‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
                        'sending': 'üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –≤–∞—à –∞–¥—Ä–µ—Å',
                        'completed': 'üéâ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!',
                        'cancelled': '‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω'
                    };
                    
                    const statusMessage = statusMessages[newStatus] || `–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω: ${newStatus}`;
                    
                    await bot.api.sendMessage(order.user_id,
                        `üìã <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #${orderId}</b>\n\n` +
                        `${statusMessage}\n\n` +
                        `üí± ${order.from_amount} ${order.from_currency} ‚Üí ${order.to_currency}\n` +
                        `‚è∞ ${new Date().toLocaleString('ru')}`,
                        { parse_mode: 'HTML' }
                    );
                } catch (error) {
                    console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ ${order.user_id}`);
                }
            }
            
        } catch (error) {
            await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ${error.message}`);
        }
    }

    // –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞
    if (data.startsWith('admin_order_details_')) {
        const userRole = await db.getUserRole(userId);
        if (userRole !== 'admin') {
            return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        }
        
        const orderId = parseInt(data.replace('admin_order_details_', ''));
        await ctx.answerCallbackQuery('üëÅÔ∏è –ó–∞–≥—Ä—É–∂–∞—é –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏...');
        
        try {
            const order = await db.getOrderWithOperator(orderId);
            
            if (!order) {
                return ctx.reply('‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            const operatorInfo = order.operator_name ? 
                `üë®‚Äçüíº ${order.operator_name} (ID: ${order.operator_id})` : 
                '‚ùå –ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–Ω–∫–µ –∏ —Å–µ—Ç–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            const bankInfo = order.bank ? `üè¶ <b>–ë–∞–Ω–∫:</b> ${order.bank}\n` : '';
            const networkInfo = order.network ? `üîó <b>–°–µ—Ç—å:</b> ${order.network}\n` : '';
            
            const detailsText = 
                `üëÅÔ∏è <b>–ü–û–î–†–û–ë–ù–û–°–¢–ò –ó–ê–ö–ê–ó–ê #${orderId}</b>\n\n` +
                `üìä <b>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n` +
                `üí± –û–±–º–µ–Ω: ${order.from_amount} ${order.from_currency} ‚Üí ${order.to_amount || 'TBD'} ${order.to_currency}\n` +
                `üìå –°—Ç–∞—Ç—É—Å: ${order.status}\n` +
                `üìÖ –°–æ–∑–¥–∞–Ω: ${new Date(order.created_at).toLocaleString('ru')}\n` +
                `üìù –û–±–Ω–æ–≤–ª–µ–Ω: ${new Date(order.updated_at).toLocaleString('ru')}\n` +
                bankInfo +
                networkInfo +
                `\nüë§ <b>–ö–ª–∏–µ–Ω—Ç:</b>\n` +
                `üÜî ID: ${order.user_id}\n` +
                `üìù –ò–º—è: ${order.user_first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
                `üîó Username: @${order.username || '–Ω–µ—Ç'}\n\n` +
                `üë®‚Äçüíº <b>–û–ø–µ—Ä–∞—Ç–æ—Ä:</b>\n` +
                `${operatorInfo}\n\n` +
                `üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã:</b>\n` +
                `üì• –ü–æ–ª—É—á–∞–µ–º: ${order.from_amount} ${order.from_currency}\n` +
                `üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º: ${order.to_amount || '–ù–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ'} ${order.to_currency}\n` +
                `üéØ –ê–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: \n<code>${order.to_address || '–ù–µ —É–∫–∞–∑–∞–Ω'}</code>\n\n` +
                `üåê <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> ${order.source || 'bot'}`;
            
            const detailsKeyboard = new InlineKeyboard()
                .text('üîÑ –°–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞', `admin_change_operator_${orderId}`)
                .text('üìä –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å', `admin_change_status_${orderId}`)
                .row()
                .text('üí¨ –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π', `admin_order_messages_${orderId}`)
                .text('üîô –ö –∑–∞–∫–∞–∑–∞–º', 'admin_active_orders');
            
            await ctx.reply(detailsText, { 
                parse_mode: 'HTML',
                reply_markup: detailsKeyboard
            });
            
        } catch (error) {
            await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π: ${error.message}`);
        }
    }

    // === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
    
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (data === 'noop') {
        await ctx.answerCallbackQuery();
        return;
    }

    // –ü–µ—Ä–µ—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –ë–î)
    if (data === 'admin_recalc_stats') {
        const userRole = await db.getUserRole(userId);
        if (userRole !== 'admin') {
            return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        }
        
        await ctx.answerCallbackQuery('üìä –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...');
        
        try {
            const result = await db.recalculateStats();
            
            await ctx.reply(
                `‚úÖ <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ï–†–ï–°–ß–ò–¢–ê–ù–ê!</b>\n\n` +
                `üìä –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã\n` +
                `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru')}\n` +
                `üë§ –í—ã–ø–æ–ª–Ω–∏–ª: ${ctx.from.first_name}\n\n` +
                `üöÄ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ!`,
                { 
                    parse_mode: 'HTML',
                    reply_markup: new InlineKeyboard()
                        .text('üîô –ù–∞–∑–∞–¥ –∫ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é', 'admin_db_maintenance')
                }
            );
            
        } catch (error) {
            await ctx.reply(
                `‚ùå <b>–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞</b>\n\n` +
                `${error.message}`,
                { 
                    parse_mode: 'HTML',
                    reply_markup: new InlineKeyboard()
                        .text('üîô –ù–∞–∑–∞–¥ –∫ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é', 'admin_db_maintenance')
                }
            );
        }
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–∏–∫–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    if (data.startsWith('close_ticket_')) {
        const userRole = await db.getUserRole(userId);
        if (userRole !== 'admin' && userRole !== 'operator') {
            return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        }
        
        const ticketId = data.replace('close_ticket_', '');
        const adminName = ctx.from.first_name || ctx.from.username || `ID: ${userId}`;
        
        await ctx.answerCallbackQuery('‚úÖ –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç!');
        
        try {
            // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è—è —Å—Ç–∞—Ç—É—Å "–ó–ê–ö–†–´–¢"
            const closedMessage = ctx.callbackQuery.message.text + 
                `\n\nüîí <b>–¢–ò–ö–ï–¢ –ó–ê–ö–†–´–¢</b>\n` +
                `üë§ –ó–∞–∫—Ä—ã–ª: ${adminName}\n` +
                `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`;
            
            await ctx.editMessageText(closedMessage, {
                parse_mode: 'HTML',
                reply_markup: new InlineKeyboard()
                    .text('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main')
            });
            
            console.log(`üé´ –¢–∏–∫–µ—Ç ${ticketId} –∑–∞–∫—Ä—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId} (${adminName})`);
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞ ${ticketId}:`, error.message);
            await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞: ${error.message}`);
        }
    }

    // –ö–Ω–æ–ø–∫–∞ "–û–ø–ª–∞—á–µ–Ω–æ" –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
    if (data.startsWith('client_paid_')) {
        const orderId = data.replace('client_paid_', '');
        const clientName = ctx.from.first_name || ctx.from.username || `ID: ${userId}`;
        
        await ctx.answerCallbackQuery('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!');
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
            const order = await db.getOrderWithOperator(orderId);
            if (!order) {
                return ctx.reply('‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            const operatorMessage = 
                `üí∞ <b>–ö–õ–ò–ï–ù–¢ –ü–û–î–¢–í–ï–†–î–ò–õ –û–ü–õ–ê–¢–£</b>\n\n` +
                `üé´ –ó–∞—è–≤–∫–∞ #${orderId}\n` +
                `üë§ –ö–ª–∏–µ–Ω—Ç: ${clientName}\n` +
                `üí≥ ${order.from_amount} ${order.from_currency}\n` +
                `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n\n` +
                `üîç <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞</b>\n` +
                `‚úÖ –ï—Å–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—É—á–µ–Ω—ã - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é\n` +
                `‚ùå –ï—Å–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∏ - —É—Ç–æ—á–Ω–∏—Ç–µ —É –∫–ª–∏–µ–Ω—Ç–∞`;

            const operatorKeyboard = new InlineKeyboard()
                .text('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ', `operator_confirm_${orderId}`)
                .text('‚ùå –°—Ä–µ–¥—Å—Ç–≤–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã', `operator_not_received_${orderId}`)
                .row()
                .text('üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É', `operator_chat_${orderId}`);

            if (order.operator_id) {
                await bot.api.sendMessage(order.operator_id, operatorMessage, {
                    parse_mode: 'HTML',
                    reply_markup: operatorKeyboard
                });
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
            await db.updateOrderStatus(orderId, 'payment_pending');

            // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
            await ctx.editMessageText(
                ctx.callbackQuery.message.text + 
                `\n\n‚úÖ <b>–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ü–û–õ–£–ß–ï–ù–û</b>\n` +
                `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n` +
                `üîç –û–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞...`,
                {
                    parse_mode: 'HTML',
                    reply_markup: new InlineKeyboard()
                        .text('üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º', `client_chat_${orderId}`)
                }
            );

            console.log(`üí∞ –ö–ª–∏–µ–Ω—Ç ${userId} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É –∑–∞—è–≤–∫–∏ ${orderId}`);

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã:`, error);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.');
        }
    }

    // –ö–Ω–æ–ø–∫–∞ "–°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º" –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
    if (data.startsWith('client_chat_')) {
        const orderId = data.replace('client_chat_', '');
        const clientName = ctx.from.first_name || ctx.from.username || `ID: ${userId}`;
        
        await ctx.answerCallbackQuery('üí¨ –°–≤—è–∑—ã–≤–∞–µ–º—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º...');
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
            const order = await db.getOrderWithOperator(orderId);
            if (!order) {
                return ctx.reply('‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            if (!order.operator_id) {
                return ctx.reply(
                    `‚ö†Ô∏è <b>–û–ø–µ—Ä–∞—Ç–æ—Ä –µ—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω</b>\n\n` +
                    `üïê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞\n` +
                    `üìû –ò–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: /support`,
                    { parse_mode: 'HTML' }
                );
            }

            // –°–æ–∑–¥–∞–µ–º —á–∞—Ç-–∫–æ–Ω—Ç–µ–∫—Å—Ç
            chatContexts.set(userId, {
                type: 'client',
                orderId: orderId,
                operatorId: order.operator_id,
                clientId: userId
            });

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –æ –∂–µ–ª–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ —Å–≤—è–∑–∞—Ç—å—Å—è
            const operatorMessage = 
                `üí¨ <b>–ö–õ–ò–ï–ù–¢ –•–û–ß–ï–¢ –°–í–Ø–ó–ê–¢–¨–°–Ø</b>\n\n` +
                `üé´ –ó–∞—è–≤–∫–∞ #${orderId}\n` +
                `üë§ –ö–ª–∏–µ–Ω—Ç: ${clientName}\n` +
                `üí¨ –ö–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ –æ–±—â–µ–Ω–∏—é\n\n` +
                `üìù –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ`;

            await bot.api.sendMessage(order.operator_id, operatorMessage, {
                parse_mode: 'HTML',
                reply_markup: new InlineKeyboard()
                    .text('üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É', `operator_chat_${orderId}`)
            });

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            await ctx.reply(
                `üí¨ <b>–ß–∞—Ç —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</b>\n\n` +
                `üé´ –ó–∞—è–≤–∫–∞ #${orderId}\n` +
                `üë®‚Äçüíº –û–ø–µ—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –≤–∞—à–µ–º –∑–∞–ø—Ä–æ—Å–µ\n\n` +
                `üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä –µ–≥–æ –ø–æ–ª—É—á–∏—Ç`,
                {
                    parse_mode: 'HTML',
                    reply_markup: new InlineKeyboard()
                        .text('üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É', `client_chat_${orderId}`)
                }
            );

                         console.log(`üí¨ –ö–ª–∏–µ–Ω—Ç ${userId} –∑–∞–ø—Ä–æ—Å–∏–ª —á–∞—Ç —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –ø–æ –∑–∞—è–≤–∫–µ ${orderId}`);

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —á–∞—Ç–∞ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º:`, error);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }

    // –û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
    if (data.startsWith('operator_confirm_')) {
        const orderId = data.replace('operator_confirm_', '');
        const operatorName = ctx.from.first_name || ctx.from.username || `ID: ${userId}`;
        
        await ctx.answerCallbackQuery('‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!');
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
            const order = await db.getOrderWithClient(orderId);
            if (!order) {
                return ctx.reply('‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
            await db.updateOrderStatusWithMessage(orderId, 'processing', userId, `–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º ${operatorName}`);

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            const clientMessage = 
                `‚úÖ <b>–ü–õ–ê–¢–ï–ñ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù</b>\n\n` +
                `üé´ –ó–∞—è–≤–∫–∞ #${orderId}\n` +
                `üí∞ ${order.from_amount} ${order.from_currency}\n` +
                `üë®‚Äçüíº –û–ø–µ—Ä–∞—Ç–æ—Ä: ${operatorName}\n` +
                `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n\n` +
                `üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ –Ω–∞—á–∞—Ç–∞!\n` +
                `üí∏ –°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è`;

            await bot.api.sendMessage(order.user_id, clientMessage, {
                parse_mode: 'HTML',
                reply_markup: new InlineKeyboard()
                    .text('üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º', `client_chat_${orderId}`)
            });

            // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            await ctx.editMessageText(
                ctx.callbackQuery.message.text + 
                `\n\n‚úÖ <b>–ü–õ–ê–¢–ï–ñ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù</b>\n` +
                `üë®‚Äçüíº –û–ø–µ—Ä–∞—Ç–æ—Ä: ${operatorName}\n` +
                `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`,
                {
                    parse_mode: 'HTML',
                    reply_markup: new InlineKeyboard()
                        .text('üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞', `funds_sent_${orderId}`)
                        .text('üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É', `operator_chat_${orderId}`)
                }
            );

            console.log(`‚úÖ –û–ø–µ—Ä–∞—Ç–æ—Ä ${userId} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–ª–∞—Ç–µ–∂ –ø–æ –∑–∞—è–≤–∫–µ ${orderId}`);

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:`, error);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }

    // –û–ø–µ—Ä–∞—Ç–æ—Ä —Å–æ–æ–±—â–∞–µ—Ç —á—Ç–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã
    if (data.startsWith('operator_not_received_')) {
        const orderId = data.replace('operator_not_received_', '');
        const operatorName = ctx.from.first_name || ctx.from.username || `ID: ${userId}`;
        
        await ctx.answerCallbackQuery('‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
            const order = await db.getOrderWithClient(orderId);
            if (!order) {
                return ctx.reply('‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            const clientMessage = 
                `‚ö†Ô∏è <b>–°–†–ï–î–°–¢–í–ê –ù–ï –ü–û–õ–£–ß–ï–ù–´</b>\n\n` +
                `üé´ –ó–∞—è–≤–∫–∞ #${orderId}\n` +
                `üí≥ ${order.from_amount} ${order.from_currency}\n` +
                `üë®‚Äçüíº –û–ø–µ—Ä–∞—Ç–æ—Ä: ${operatorName}\n\n` +
                `‚ùó –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª –Ω–∞ –Ω–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã\n\n` +
                `üîç <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:</b>\n` +
                `‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—É–º–º—ã\n` +
                `‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤\n` +
                `‚Ä¢ –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –≤–∞—à–µ–º –±–∞–Ω–∫–µ\n\n` +
                `üí¨ –°–≤—è–∂–∏—Ç–µ—Å—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è`;

            await bot.api.sendMessage(order.user_id, clientMessage, {
                parse_mode: 'HTML',
                reply_markup: new InlineKeyboard()
                    .text('üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º', `client_chat_${orderId}`)
                    .text('‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', `client_paid_${orderId}`)
            });

            // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            await ctx.editMessageText(
                ctx.callbackQuery.message.text + 
                `\n\n‚ùå <b>–°–†–ï–î–°–¢–í–ê –ù–ï –ü–û–õ–£–ß–ï–ù–´</b>\n` +
                `üë®‚Äçüíº –û–ø–µ—Ä–∞—Ç–æ—Ä: ${operatorName}\n` +
                `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n` +
                `üìù –ö–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω`,
                {
                    parse_mode: 'HTML',
                    reply_markup: new InlineKeyboard()
                        .text('üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É', `operator_chat_${orderId}`)
                }
            );

            console.log(`‚ùå –û–ø–µ—Ä–∞—Ç–æ—Ä ${userId} —Å–æ–æ–±—â–∏–ª –æ –Ω–µ–ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ –∑–∞—è–≤–∫–µ ${orderId}`);

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–ø–æ–ª—É—á–µ–Ω–∏–∏:`, error);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }

    // –ö–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
    if (data.startsWith('client_received_')) {
        const orderId = parseInt(data.replace('client_received_', ''));
        const clientName = ctx.from.first_name || ctx.from.username || `ID: ${userId}`;
        
        await ctx.answerCallbackQuery('‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ!');
        
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
            const result = await db.updateOrderStatusWithMessage(orderId, 'completed', userId, 
                `‚úÖ –ö–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤. –ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!`);
                
            const order = await db.getOrderWithClient(orderId);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            await ctx.reply(
                `üéâ <b>–ó–ê–ö–ê–ó –ó–ê–í–ï–†–®–ï–ù!</b>\n\n` +
                `üé´ –ó–∞–∫–∞–∑ #${orderId}\n` +
                `‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤\n` +
                `üí∞ ${order.to_amount} ${order.to_currency}\n\n` +
                `–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!\n\n` +
                `‚≠ê –û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:`,
                { 
                    parse_mode: 'HTML',
                    reply_markup: new InlineKeyboard()
                        .text('‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê –û—Ç–ª–∏—á–Ω–æ!', `rate_service_5_${orderId}`)
                        .text('‚≠ê‚≠ê‚≠ê‚≠ê –•–æ—Ä–æ—à–æ', `rate_service_4_${orderId}`)
                        .row()
                        .text('‚≠ê‚≠ê‚≠ê –ù–æ—Ä–º–∞–ª—å–Ω–æ', `rate_service_3_${orderId}`)
                        .text('‚≠ê‚≠ê –ü–ª–æ—Ö–æ', `rate_service_2_${orderId}`)
                        .row()
                        .text('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main')
                        .text('üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞', 'support')
                }
            );
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            if (order.operator_id) {
                await bot.api.sendMessage(order.operator_id,
                    `üéâ <b>–ó–ê–ö–ê–ó –ó–ê–í–ï–†–®–ï–ù!</b>\n\n` +
                    `üé´ –ó–∞–∫–∞–∑ #${orderId}\n` +
                    `üë§ –ö–ª–∏–µ–Ω—Ç: ${clientName}\n` +
                    `‚úÖ –ö–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤\n` +
                    `üí∞ ${order.to_amount} ${order.to_currency}\n\n` +
                    `üèÜ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!`,
                    { 
                        parse_mode: 'HTML',
                        reply_markup: new InlineKeyboard()
                            .text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–Ω—è', 'daily_stats')
                            .text('üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞', 'open_operator_panel')
                    }
                );
            }
            
            console.log(`‚úÖ –ö–ª–∏–µ–Ω—Ç ${userId} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ –∑–∞—è–≤–∫–µ ${orderId}`);
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è:`, error);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }
    
    // –ö–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–ª—É—á–∏–ª —Å—Ä–µ–¥—Å—Ç–≤–∞
    if (data.startsWith('client_not_received_')) {
        const orderId = parseInt(data.replace('client_not_received_', ''));
        const clientName = ctx.from.first_name || ctx.from.username || `ID: ${userId}`;
        
        await ctx.answerCallbackQuery('üìû –û–ø–µ—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω');
        
        try {
            const order = await db.getOrderWithClient(orderId);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            await ctx.reply(
                `‚ö†Ô∏è <b>–ü–†–û–ë–õ–ï–ú–ê –° –ü–û–õ–£–ß–ï–ù–ò–ï–ú</b>\n\n` +
                `üé´ –ó–∞–∫–∞–∑ #${orderId}\n` +
                `‚ùó –í—ã –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞\n\n` +
                `üîÑ –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –æ–ø–µ—Ä–∞—Ü–∏—é –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏\n` +
                `‚è∞ –í—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è: –¥–æ 30 –º–∏–Ω—É—Ç\n\n` +
                `üìû –û–ø–µ—Ä–∞—Ç–æ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –ø—Ä–æ–±–ª–µ–º–µ`,
                { 
                    parse_mode: 'HTML',
                    reply_markup: new InlineKeyboard()
                        .text('üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º', `client_chat_${orderId}`)
                        .text('üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑', `check_again_${orderId}`)
                        .row()
                        .text('üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞', 'support')
                }
            );
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –æ –ø—Ä–æ–±–ª–µ–º–µ
            if (order.operator_id) {
                await bot.api.sendMessage(order.operator_id,
                    `üö® <b>–ö–õ–ò–ï–ù–¢ –ù–ï –ü–û–õ–£–ß–ò–õ –°–†–ï–î–°–¢–í–ê!</b>\n\n` +
                    `üé´ –ó–∞–∫–∞–∑ #${orderId}\n` +
                    `üë§ –ö–ª–∏–µ–Ω—Ç: ${clientName}\n` +
                    `‚ùó –ö–ª–∏–µ–Ω—Ç —Å–æ–æ–±—â–∏–ª —á—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª —Å—Ä–µ–¥—Å—Ç–≤–∞\n` +
                    `üí∞ –î–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å: ${order.to_amount} ${order.to_currency}\n\n` +
                    `üîç <b>–°—Ä–æ—á–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:</b>\n` +
                    `‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞/—Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤\n` +
                    `‚Ä¢ –°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n` +
                    `‚Ä¢ –°—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞\n\n` +
                    `‚ö° –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ!`,
                    { 
                        parse_mode: 'HTML',
                        reply_markup: new InlineKeyboard()
                            .text('üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É', `operator_chat_${orderId}`)
                            .text('üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é', `check_transaction_${orderId}`)
                            .row()
                            .text('‚úÖ –°—Ä–µ–¥—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ', `funds_sent_again_${orderId}`)
                            .text('‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø–µ—Ä–∞—Ü–∏–µ–π', `transaction_problem_${orderId}`)
                    }
                );
            }
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –ø—Ä–æ–±–ª–µ–º–µ
            const staff = await db.getStaffList();
            const admins = staff.filter(s => s.role === 'admin');
            
            for (const admin of admins) {
                try {
                    await bot.api.sendMessage(admin.telegram_id,
                        `üö® <b>–ü–†–û–ë–õ–ï–ú–ê –° –ó–ê–ö–ê–ó–û–ú!</b>\n\n` +
                        `üé´ –ó–∞–∫–∞–∑ #${orderId}\n` +
                        `üë§ –ö–ª–∏–µ–Ω—Ç: ${clientName} (${userId})\n` +
                        `üë®‚Äçüíº –û–ø–µ—Ä–∞—Ç–æ—Ä: ${order.operator_name || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}\n` +
                        `‚ùó –ö–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–ª—É—á–∏–ª —Å—Ä–µ–¥—Å—Ç–≤–∞\n` +
                        `üí∞ ${order.to_amount} ${order.to_currency}\n\n` +
                        `‚ö° –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ!`,
                        { 
                            parse_mode: 'HTML',
                            reply_markup: new InlineKeyboard()
                                .text('üîç –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏', `admin_manage_order_${orderId}`)
                                .text('üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º', `admin_contact_client_${orderId}`)
                        }
                    );
                } catch (error) {
                    console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ ${admin.telegram_id} –æ –ø—Ä–æ–±–ª–µ–º–µ —Å –∑–∞–∫–∞–∑–æ–º`);
                }
            }
            
            console.log(`‚ùå –ö–ª–∏–µ–Ω—Ç ${userId} —Å–æ–æ–±—â–∏–ª –æ –Ω–µ–ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ –∑–∞—è–≤–∫–µ ${orderId}`);
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤:`, error);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }

    // –ß–∞—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º
    if (data.startsWith('operator_chat_')) {
        const orderId = data.replace('operator_chat_', '');
        
        await ctx.answerCallbackQuery('üí¨ –ß–∞—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
            const order = await db.getOrderWithClient(orderId);
            if (!order) {
                return ctx.reply('‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            // –°–æ–∑–¥–∞–µ–º —á–∞—Ç-–∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            chatContexts.set(userId, {
                type: 'operator',
                orderId: orderId,
                clientId: order.user_id,
                operatorId: userId
            });

            await ctx.reply(
                `üí¨ <b>–ß–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</b>\n\n` +
                `üé´ –ó–∞—è–≤–∫–∞ #${orderId}\n` +
                `üë§ –ö–ª–∏–µ–Ω—Ç: ${order.client_name || `ID: ${order.user_id}`}\n\n` +
                `üìù –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –∫–ª–∏–µ–Ω—Ç –µ–≥–æ –ø–æ–ª—É—á–∏—Ç`,
                {
                    parse_mode: 'HTML',
                    reply_markup: new InlineKeyboard()
                        .text('üìû –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç', `operator_end_chat_${orderId}`)
                }
            );

            console.log(`üí¨ –û–ø–µ—Ä–∞—Ç–æ—Ä ${userId} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —á–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º –ø–æ –∑–∞—è–≤–∫–µ ${orderId}`);

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–∞—Ç–∞:`, error);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }

    // –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º (–¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤)
    if (data.startsWith('operator_end_chat_')) {
        const userRole = await db.getUserRole(userId);
        if (!userRole || !['admin', 'operator'].includes(userRole)) {
            return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        }
        
        const orderId = parseInt(data.replace('operator_end_chat_', ''));
        
        try {
            await ctx.answerCallbackQuery('üìû –ó–∞–≤–µ—Ä—à–∞—é —á–∞—Ç...');
            
            // –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞ –µ—Å–ª–∏ –æ–Ω –±—ã–ª
            chatContexts.delete(userId);
            
            const order = await db.getOrderWithClient(orderId);
            if (!order) {
                return ctx.reply('‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —á–∞—Ç–∞
            try {
                await ctx.api.sendMessage(order.client_id,
                    `üìû <b>–ß–∞—Ç —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω</b>\n\n` +
                    `üÜî –ó–∞–∫–∞–∑ #${orderId}\n` +
                    `üë®‚Äçüíº –û–ø–µ—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç\n\n` +
                    `üí¨ –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞.`,
                    { 
                        parse_mode: 'HTML',
                        reply_markup: new InlineKeyboard()
                            .text('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main')
                    }
                );
            } catch (notifyError) {
                console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —á–∞—Ç–∞:', notifyError.message);
            }
            
            // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
            await ctx.reply(
                `‚úÖ <b>–ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n` +
                `üÜî –ó–∞–∫–∞–∑ #${orderId}\n` +
                `üìû –ß–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω\n` +
                `üë§ –ö–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω\n\n` +
                `üîô –í–æ–∑–≤—Ä–∞—Ç –∫ –∑–∞–∫–∞–∑—É:`,
                { 
                    parse_mode: 'HTML',
                    reply_markup: new InlineKeyboard()
                        .text('üéõÔ∏è –ö –∑–∞–∫–∞–∑—É', `manage_order_${orderId}`)
                        .text('üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã', 'op_my_orders')
                }
            );
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–∞—Ç–∞:', error);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–∞—Ç–∞');
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp
bot.on('message:web_app_data', async (ctx) => {
    try {
        const webAppData = ctx.message.web_app_data.data;
        const userId = ctx.from.id;
        const userData = await db.getUser(userId);
        
        console.log(`üì± WebApp –¥–∞–Ω–Ω—ã–µ –æ—Ç ${userId}:`, webAppData);
        
        // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        const data = JSON.parse(webAppData);
        
        if (data.action === 'contact_support') {
            console.log(`üÜò –ó–∞–ø—Ä–æ—Å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
            
            // –°–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç
            const ticketId = `SUPPORT-${Date.now()}`;
            const userName = userData?.first_name || userData?.username || `ID: ${userId}`;
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            const supportMessage = `üÜò <b>–ó–∞–ø—Ä–æ—Å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–∑ WebApp</b>\n\n` +
                `üé´ ID: ${ticketId}\n` +
                `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userName}\n` +
                `üì± –ò—Å—Ç–æ—á–Ω–∏–∫: ${data.source}\n` +
                `‚è∞ –í—Ä–µ–º—è: ${new Date(data.timestamp).toLocaleString('ru-RU')}\n\n` +
                `üí¨ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å —á–µ—Ä–µ–∑ WebApp\n\n` +
                `‚û°Ô∏è –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: <a href="tg://user?id=${userId}">–Ω–∞–ø–∏—Å–∞—Ç—å</a>`;
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            try {
                const adminIds = await db.getAdminIds();
                
                for (const adminId of adminIds) {
                    try {
                        await bot.api.sendMessage(adminId, supportMessage, { 
                            parse_mode: 'HTML',
                            reply_markup: new InlineKeyboard()
                                .text('üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', `contact_user_${userId}`)
                                .text('üé´ –ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç', `close_ticket_${ticketId}`)
                        });
                        console.log(`üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É ${adminId}`);
                    } catch (sendError) {
                        console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ ${adminId}:`, sendError.message);
                    }
                }
            } catch (adminError) {
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:', adminError.message);
            }
            
            // –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await ctx.reply(
                `‚úÖ <b>–ó–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω!</b>\n\n` +
                `üé´ –ù–æ–º–µ—Ä —Ç–∏–∫–µ—Ç–∞: ${ticketId}\n` +
                `‚è∞ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: –¥–æ 15 –º–∏–Ω—É—Ç\n\n` +
                `üìû –ù–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!`,
                { 
                    parse_mode: 'HTML',
                    reply_markup: new InlineKeyboard()
                        .text('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', 'back_to_main')
                }
            );
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebApp –¥–∞–Ω–Ω—ã—Ö:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
bot.command('ref', async (ctx) => {
    const userId = ctx.from.id;
    const botUsername = process.env.BOT_USERNAME || 'exmachinax_bot';
    const referralLink = `https://t.me/${botUsername}?start=${userId}`;
    
    const stats = await db.getReferralStats(userId);
    
    await ctx.reply(
        `üí∞ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ ExMachinaX</b>\n\n` +
        `üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: <code>${referralLink}</code>\n\n` +
        `üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n` +
        `üë§ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${stats.total_referrals}\n` +
        `üíµ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: $${(stats.total_commission || 0).toFixed(2)}\n` +
        `üìà –û–±–º–µ–Ω–æ–≤: ${stats.successful_orders}\n\n` +
        `üî• <b>–ö–∞–∫ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å:</b>\n` +
        `üéØ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏\n` +
        `üí∏ –ó–∞ –∫–∞–∂–¥—ã–π –∏—Ö –æ–±–º–µ–Ω –ø–æ–ª—É—á–∞–µ—Ç–µ 0.5%\n` +
        `‚ö° –î–µ–Ω—å–≥–∏ –∑–∞—á–∏—Å–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n` +
        `üéÅ –ë–µ–∑ –ª–∏–º–∏—Ç–æ–≤ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n\n` +
        `üöÄ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ —Å –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–æ–π!`,
        { 
            parse_mode: 'HTML',
            reply_markup: new InlineKeyboard()
                .text('üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'referral_stats')
        }
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
bot.command('admin', async (ctx) => {
    const userId = ctx.from.id;
    
    // üõ°Ô∏è –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ê–î–ú–ò–ù–ê
    if (!(await isAdmin(userId))) {
        return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
    }
    
    const stats = await db.getAdminStats();
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
    const adminKeyboard = new InlineKeyboard();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≠–ü–ò–ß–ï–°–ö–£–Æ –∫–Ω–æ–ø–∫—É —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ Google Sheets –∞–∫—Ç–∏–≤–µ–Ω
    if (googleSheetsManager && googleSheetsManager.isReady()) {
        adminKeyboard.url('üíéüî• –¢–ê–ë–õ–ò–¶–ê –ë–û–ì–û–í üî•üíé', googleSheetsManager.getSpreadsheetUrl()).row();
    }
    
    adminKeyboard
        .text('üìä –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'admin_full_stats')
        .text('üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º', 'admin_staff')
        .row()
        .text('üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã', 'admin_active_orders')
        .text('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'admin_notifications')
        .row()
        .text('üë§ –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞', 'admin_add_operator')
        .text('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'admin_settings')
        .row()
        .text('üí± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏', 'admin_rates_control')
            .text('üè† –ù–∞–∑–∞–¥ –∫ –±–æ—Ç—É', 'back_to_main');
    
    await ctx.reply(
        `üõ°Ô∏è <b>–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ ExMachinaX</b>\n\n` +
        `üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n` +
        `üë• –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.newUsersToday}\n` +
        `üìù –ó–∞—è–≤–æ–∫: ${stats.ordersToday}\n` +
        `üí∞ –û–±–æ—Ä–æ—Ç: $${(stats.volumeToday || 0).toFixed(2)}\n\n` +
        `üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n` +
        `üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.totalUsers}\n` +
        `üìã –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${stats.totalOrders}\n` +
        `‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${stats.completedOrders}\n` +
        `‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏: ${stats.pendingOrders}\n` +
        `üîÑ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ: ${stats.processingOrders}\n` +
        `üíµ –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç: $${(stats.totalVolume || 0).toFixed(2)}\n\n` +
        `üë®‚Äçüíº <b>–ü–µ—Ä—Å–æ–Ω–∞–ª:</b>\n` +
        `üõ°Ô∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤: ${stats.activeOperators}\n` +
        `üìù –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: ${stats.assignedOrders}\n` +
        `üîî –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${stats.unreadNotifications}`,
        { 
            parse_mode: 'HTML',
            reply_markup: adminKeyboard
        }
    );
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
bot.command('operator', async (ctx) => {
    const userId = ctx.from.id;
    
    // üõ°Ô∏è –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –û–ü–ï–†–ê–¢–û–†–ê
    if (!(await isOperator(userId))) {
        return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞');
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∏ –∑–∞–∫–∞–∑—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    const [unassignedOrders, myOrders] = await Promise.all([
        db.getUnassignedOrders(),
        db.getOperatorOrders(userId)
    ]);
    
    const operatorKeyboard = new InlineKeyboard()
        .text(`üìã –°–≤–æ–±–æ–¥–Ω—ã–µ –∑–∞–∫–∞–∑—ã (${unassignedOrders.length})`, 'op_unassigned_orders')
        .text(`üìù –ú–æ–∏ –∑–∞–∫–∞–∑—ã (${myOrders.length})`, 'op_my_orders')
        .row()
        .text('üîî –ú–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'op_notifications')
                    .text('üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'op_stats')
            .row()
            .text('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–Ω—è', 'admin_daily_stats')
            .row()
            .text('üè† –ù–∞–∑–∞–¥ –∫ –±–æ—Ç—É', 'back_to_main');
    
    await ctx.reply(
        `üë®‚Äçüíº <b>–ü–ê–ù–ï–õ–¨ –û–ü–ï–†–ê–¢–û–†–ê</b>\n\n` +
        `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –æ–ø–µ—Ä–∞—Ç–æ—Ä!\n\n` +
        `üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã:</b> ${unassignedOrders.length}\n` +
        `üìù <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:</b> ${myOrders.length}\n` +
        `üîî <b>–ù–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b> ${(await db.getNotifications(userId, 1)).filter(n => !n.is_read).length}\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
        { 
            parse_mode: 'HTML',
            reply_markup: operatorKeyboard
        }
    );
});

// –ü—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
bot.command('ping', async (ctx) => {
    await ctx.reply('üèì Pong! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!');
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
bot.command('test_system', async (ctx) => {
    const userId = ctx.from.id;
    // üõ°Ô∏è –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ê–î–ú–ò–ù–ê
    if (!(await isAdmin(userId))) {
        return ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É');
    }
    
    await ctx.reply('üß™ <b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã ExMachinaX...</b>', { parse_mode: 'HTML' });
    
    try {
        // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await ctx.reply('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
        const stats = await db.getAdminStats();
        await ctx.reply(`‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${stats.totalUsers} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, ${stats.totalOrders} –∑–∞–∫–∞–∑–æ–≤`);
        
        // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
        await ctx.reply('2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É—é —Å–∏—Å—Ç–µ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤...');
        const staff = await db.getStaffList();
        await ctx.reply(`‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª: ${staff.length} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (${staff.filter(s => s.role === 'admin').length} –∞–¥–º–∏–Ω–æ–≤, ${staff.filter(s => s.role === 'operator').length} –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤)`);
        
        // –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await ctx.reply('3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É—é —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
        await db.createNotification({
            recipientId: userId,
            type: 'test',
            title: 'üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
            message: '–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç!',
            orderId: null
        });
        await ctx.reply('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ');
        
        // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        await ctx.reply('4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É—é —Å–∏—Å—Ç–µ–º—É –∑–∞–∫–∞–∑–æ–≤...');
        const unassigned = await db.getUnassignedOrders();
        await ctx.reply(`‚úÖ –ó–∞–∫–∞–∑—ã: ${unassigned.length} –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤`);
        
        // –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await ctx.reply(
            `üéâ <b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n` +
            `‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ\n` +
            `üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: OK\n` +
            `üë• –°–∏—Å—Ç–µ–º–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤: OK\n` +
            `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: OK\n` +
            `üìã –ó–∞–∫–∞–∑—ã: OK\n\n` +
            `üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!`,
            { parse_mode: 'HTML' }
        );
        
    } catch (error) {
        await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: ${error.message}`);
        console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
bot.command('add_operator', async (ctx) => {
    const userId = ctx.from.id;
    
    // üõ°Ô∏è –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ê–î–ú–ò–ù–ê
    if (!(await isAdmin(userId))) {
        return ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤');
    }
    
    const args = ctx.message.text.split(' ');
    if (args.length < 2) {
        return ctx.reply(
            `üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞</b>\n\n` +
            `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/add_operator ID_TELEGRAM</code>\n\n` +
            `–ü—Ä–∏–º–µ—Ä: <code>/add_operator 123456789</code>\n` +
            `–ò–ª–∏ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–∞–Ω–¥–æ–π:\n` +
            `<code>/add_operator_forward</code>`,
            { parse_mode: 'HTML' }
        );
    }
    
    const operatorId = parseInt(args[1]);
    if (!operatorId) {
        return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π Telegram ID');
    }
    
    try {
        await db.addStaff({
            telegramId: operatorId,
            username: null,
            firstName: '–ù–æ–≤—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä',
            lastName: null,
            role: 'operator',
            addedBy: userId
        });
        
        await ctx.reply(
            `‚úÖ <b>–û–ø–µ—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n` +
            `üÜî Telegram ID: <code>${operatorId}</code>\n` +
            `üë®‚Äçüíº –†–æ–ª—å: –û–ø–µ—Ä–∞—Ç–æ—Ä\n` +
            `üë§ –î–æ–±–∞–≤–∏–ª: ${ctx.from.first_name}\n\n` +
            `–ù–æ–≤—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /operator`,
            { parse_mode: 'HTML' }
        );
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        try {
            await bot.api.sendMessage(operatorId,
                `üéâ <b>–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º ExMachinaX!</b>\n\n` +
                `üë®‚Äçüíº –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–æ–≤.\n` +
                `üìã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /operator –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏.\n\n` +
                `üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É ExMachinaX!`,
                { parse_mode: 'HTML' }
            );
        } catch (error) {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –Ω–æ–≤–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:', error.message);
        }
        
    } catch (error) {
        await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: ${error.message}`);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
bot.on('message', async (ctx) => {
    const userId = ctx.from.id;
    const messageText = ctx.message.text;
    const userRole = await db.getUserRole(userId);
    
    console.log('üü¢üü¢üü¢ –ü–û–õ–£–ß–ï–ù–û –õ–Æ–ë–û–ï –°–û–û–ë–©–ï–ù–ò–ï –í –ë–û–¢–ï:');
    console.log('üü¢ userId:', userId);
    console.log('üü¢ messageText:', messageText);
    console.log('üü¢ userRole:', userRole);
    
    // üö® –ü–†–ò–û–†–ò–¢–ï–¢–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô
    console.log('üì® –ü–†–û–í–ï–†–Ø–ï–ú –ö–û–ù–¢–ï–ö–°–¢ –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:', userId);
    console.log('üì® chatContexts.has(userId):', chatContexts.has(userId));
    if (chatContexts.has(userId)) {
        const context = chatContexts.get(userId);
        console.log('üì® –ù–ê–ô–î–ï–ù –ö–û–ù–¢–ï–ö–°–¢:', context);
        if (context.action === 'send_message_to_client') {
            console.log('üì® üî• –û–ë–ù–ê–†–£–ñ–ï–ù–ê –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø –ö–õ–ò–ï–ù–¢–£!');
            console.log('üì® üî• orderId:', context.orderId);
            console.log('üì® üî• messageText:', messageText);
            
            // –ù–ï–ú–ï–î–õ–ï–ù–ù–û –í–´–ü–û–õ–ù–Ø–ï–ú –û–¢–ü–†–ê–í–ö–£ –ö–õ–ò–ï–ù–¢–£
            try {
                const order = await db.getOrderWithClient(context.orderId);
                if (!order) {
                    chatContexts.delete(userId);
                    return ctx.reply('‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                }
                
                console.log('üî• –î–ê–ù–ù–´–ï –ö–õ–ò–ï–ù–¢–ê –ò–ó –ë–î:');
                console.log('üî• order.client_id:', order.client_id);
                console.log('üî• order.user_id:', order.user_id);
                console.log('üî• order.client_first_name:', order.client_first_name);
                
                if (!order.client_id && order.user_id) {
                    console.log('üÜò client_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–æ –µ—Å—Ç—å user_id! –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø!');
                    console.log('üÜò –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', order.user_id);
                    
                    // –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ü–†–Ø–ú–û –ó–î–ï–°–¨
                    try {
                        await db.upsertUser({
                            telegramId: order.user_id,       // ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û!
                            firstName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',       // ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û!
                            lastName: '',                    // ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û!
                            username: `user${order.user_id}`,
                            referredBy: null
                        });
                        console.log('üÜò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –≠–ö–°–¢–†–ï–ù–ù–û –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù:', order.user_id);
                        
                        // –ü–ï–†–ï–ó–ê–ì–†–£–ñ–ê–ï–ú –î–ê–ù–ù–´–ï –ó–ê–ö–ê–ó–ê
                        const updatedOrder = await db.getOrderWithClient(context.orderId);
                        if (updatedOrder && updatedOrder.client_id) {
                            console.log('‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï –ö–õ–ò–ï–ù–¢–ê:');
                            console.log('‚úÖ client_id:', updatedOrder.client_id);
                            order.client_id = updatedOrder.client_id; // –û–±–Ω–æ–≤–ª—è–µ–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                        } else {
                            console.error('‚ùå –î–∞–∂–µ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ client_id –Ω–µ –Ω–∞–π–¥–µ–Ω!');
                            chatContexts.delete(userId);
                            return ctx.reply('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞');
                        }
                    } catch (regError) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', regError.message);
                        chatContexts.delete(userId);
                        return ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞');
                    }
                } else if (!order.client_id) {
                    console.error('‚ùå client_id –ò user_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!');
                    chatContexts.delete(userId);
                    return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∫–ª–∏–µ–Ω—Ç–∞');
                }
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
                await ctx.api.sendMessage(order.client_id,
                    `üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞</b>\n\n` +
                    `üÜî –ó–∞–∫–∞–∑ #${context.orderId}\n` +
                    `üë®‚Äçüíº –û–ø–µ—Ä–∞—Ç–æ—Ä: ${ctx.from.first_name || '–û–ø–µ—Ä–∞—Ç–æ—Ä'}\n\n` +
                    `üìù ${messageText}\n\n` +
                    `üí¨ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –æ–±—Ä–∞—Ç–Ω–æ.`,
                    { parse_mode: 'HTML' }
                );
                
                console.log('‚úÖ –°–û–û–ë–©–ï–ù–ò–ï –£–°–ü–ï–®–ù–û –û–¢–ü–†–ê–í–õ–ï–ù–û –ö–õ–ò–ï–ù–¢–£!');
                
                await ctx.reply(
                    `‚úÖ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É!</b>\n\n` +
                    `üìù "${messageText}"\n\n` +
                    `üîô –í–æ–∑–≤—Ä–∞—Ç –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–æ–º:`,
                    { 
                        parse_mode: 'HTML',
                        reply_markup: new InlineKeyboard()
                            .text('‚öôÔ∏è –ö –∑–∞–∫–∞–∑—É', `manage_order_${context.orderId}`)
                    }
                );
                
                chatContexts.delete(userId);
                return; // –í–ê–ñ–ù–û: –≤—ã—Ö–æ–¥–∏–º —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É
                
            } catch (error) {
                console.error('‚ùå –û–®–ò–ë–ö–ê –û–¢–ü–†–ê–í–ö–ò –°–û–û–ë–©–ï–ù–ò–Ø:', error.message);
                await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${error.message}`);
                chatContexts.delete(userId);
                return;
            }
        }
    }
    
    // üîÑ –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô –û–¢ –ö–õ–ò–ï–ù–¢–û–í –ö –û–ü–ï–†–ê–¢–û–†–ê–ú
    if (!userRole && messageText) {
        console.log('üìû –°–û–û–ë–©–ï–ù–ò–ï –û–¢ –ö–õ–ò–ï–ù–¢–ê:', userId);
        console.log('üìû –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –∫–ª–∏–µ–Ω—Ç–∞...');
        
        try {
            // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –∫–ª–∏–µ–Ω—Ç–∞
            const clientOrder = await db.getLastOrderByUserId(userId);
            if (clientOrder) {
                console.log('üìû –ù–ê–ô–î–ï–ù –ó–ê–ö–ê–ó –ö–õ–ò–ï–ù–¢–ê:', clientOrder.id);
                console.log('üìû –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞:', clientOrder.status);
                
                // –ò—â–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–µ–¥–µ—Ç —ç—Ç–æ—Ç –∑–∞–∫–∞–∑
                const operator = await db.getOrderOperator(clientOrder.id);
                if (operator && operator.operator_id) {
                    console.log('üìû –ù–ê–ô–î–ï–ù –û–ü–ï–†–ê–¢–û–†:', operator.operator_id);
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
                    await ctx.api.sendMessage(operator.operator_id,
                        `üí¨ <b>–û—Ç–≤–µ—Ç –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞</b>\n\n` +
                        `üÜî –ó–∞–∫–∞–∑ #${clientOrder.id}\n` +
                        `üë§ –ö–ª–∏–µ–Ω—Ç: ${userId}\n\n` +
                        `üìù ${messageText}\n\n` +
                        `üí¨ –ù–∞–∂–º–∏—Ç–µ "–ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É" —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å.`,
                        { 
                            parse_mode: 'HTML',
                            reply_markup: new InlineKeyboard()
                                .text('üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É', `chat_with_client_${clientOrder.id}`)
                                .text('‚öôÔ∏è –ö –∑–∞–∫–∞–∑—É', `manage_order_${clientOrder.id}`)
                        }
                    );
                    
                    console.log('‚úÖ –°–û–û–ë–©–ï–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê –û–¢–ü–†–ê–í–õ–ï–ù–û –û–ü–ï–†–ê–¢–û–†–£!');
                    
                    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É
                    await ctx.reply(
                        `‚úÖ <b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É!</b>\n\n` +
                        `üìã –ó–∞–∫–∞–∑ #${clientOrder.id}\n` +
                        `üìù "${messageText}"\n\n` +
                        `‚è∞ –û–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.`,
                        { parse_mode: 'HTML' }
                    );
                    
                    return; // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                } else {
                    console.log('üìû –û–ø–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º');
                    
                    // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º
                    const staff = await db.getStaffList();
                    const operators = staff.filter(s => ['admin', 'operator'].includes(s.role));
                    
                    if (operators.length > 0) {
                        const broadcastMessage = 
                            `üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞</b>\n\n` +
                            `üÜî –ó–∞–∫–∞–∑ #${clientOrder.id} (–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω)\n` +
                            `üë§ –ö–ª–∏–µ–Ω—Ç: ${userId}\n\n` +
                            `üìù ${messageText}\n\n` +
                            `üí¨ –ü—Ä–∏–º–∏—Ç–µ –∑–∞–∫–∞–∑ —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É.`;
                        
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º
                        for (const op of operators) {
                            try {
                                await ctx.api.sendMessage(op.telegram_id, broadcastMessage, {
                                    parse_mode: 'HTML',
                                    reply_markup: new InlineKeyboard()
                                        .text('‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑', `take_order_${clientOrder.id}`)
                                        .text('üìã –ö –∑–∞–∫–∞–∑—É', `manage_order_${clientOrder.id}`)
                                });
                            } catch (err) {
                                console.log(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É ${op.telegram_id}:`, err.message);
                            }
                        }
                        
                        console.log('‚úÖ –°–û–û–ë–©–ï–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê –û–¢–ü–†–ê–í–õ–ï–ù–û –í–°–ï–ú –û–ü–ï–†–ê–¢–û–†–ê–ú!');
                        
                        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É
                        await ctx.reply(
                            `‚úÖ <b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º!</b>\n\n` +
                            `üìã –ó–∞–∫–∞–∑ #${clientOrder.id}\n` +
                            `üìù "${messageText}"\n\n` +
                            `‚è∞ –û–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.`,
                            { parse_mode: 'HTML' }
                        );
                    } else {
                        await ctx.reply('‚ö†Ô∏è –û–ø–µ—Ä–∞—Ç–æ—Ä—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.');
                    }
                    return;
                }
            } else {
                console.log('üìû –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                // –ù–µ –æ—Ç–≤–µ—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:', error.message);
        }
    }
    
    // === –†–£–ß–ù–û–ô –í–í–û–î –ö–£–†–°–û–í ===
    if (messageText && global.manualRateInput && global.manualRateInput.has(userId)) {
        const inputState = global.manualRateInput.get(userId);
        const currency = inputState.currency;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è (60 —Å–µ–∫—É–Ω–¥)
        if (Date.now() - inputState.timestamp > 60000) {
            global.manualRateInput.delete(userId);
            return await ctx.reply('‚è∞ –í—Ä–µ–º—è –≤–≤–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
        if (!(await isAdmin(userId))) {
            global.manualRateInput.delete(userId);
            return await ctx.reply('‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
        if (messageText.toLowerCase() === '–æ—Ç–º–µ–Ω–∞' || messageText.toLowerCase() === 'cancel') {
            global.manualRateInput.delete(userId);
            return await ctx.reply(
                '‚ùå –í–≤–æ–¥ –∫—É—Ä—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω',
                { reply_markup: new InlineKeyboard().text('üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é', 'admin_rates_control') }
            );
        }
        
        // –ü–∞—Ä—Å–∏–º —á–∏—Å–ª–æ
        const newPrice = parseFloat(messageText.replace(/[^0-9.,]/g, '').replace(',', '.'));
        
        if (isNaN(newPrice) || newPrice <= 0) {
            return await ctx.reply(
                '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞!\n\n' +
                '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n' +
                '‚Ä¢ 95000 (–¥–ª—è BTC)\n' +
                '‚Ä¢ 1.02 (–¥–ª—è USDT)\n' +
                '‚Ä¢ 0.0012 (–¥–ª—è RUB –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö)'
            );
        }
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–Ω–æ–∂–∏—Ç–µ–ª—è
            const RatesService = require('./services/RatesService');
            const ratesService = new RatesService();
            const currentRates = await ratesService.getRates();
            const currentRate = currentRates.find(r => r.currency === currency);
            
            if (!currentRate) {
                global.manualRateInput.delete(userId);
                return await ctx.reply('‚ùå –í–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –∫—É—Ä—Å
            await ratesService.setAbsoluteRate(currency, newPrice, 3600000); // –ù–∞ 1 —á–∞—Å
            
            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞
            global.manualRateInput.delete(userId);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
            await notifyOperators(`‚úèÔ∏è <b>–ö–£–†–° ${currency} –ò–ó–ú–ï–ù–ï–ù –í–†–£–ß–ù–£–Æ</b>\n\n–ù–æ–≤—ã–π –∫—É—Ä—Å: $${newPrice.toFixed(currency === 'BTC' ? 0 : 4)}\n–ò–∑–º–µ–Ω–∏–ª: –∞–¥–º–∏–Ω ${ctx.from.first_name}`);
            
            await ctx.reply(
                `‚úÖ <b>–ö–£–†–° ${currency} –£–°–¢–ê–ù–û–í–õ–ï–ù –í–†–£–ß–ù–£–Æ</b>\n\n` +
                `üí± –í–∞–ª—é—Ç–∞: ${currency}\n` +
                `üí∞ –ù–æ–≤—ã–π –∫—É—Ä—Å: $${newPrice.toFixed(currency === 'BTC' ? 0 : 4)}\n` +
                `‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç: 1 —á–∞—Å\n` +
                `üîî –û–ø–µ—Ä–∞—Ç–æ—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã\n\n` +
                `üí° –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ`,
                { 
                    parse_mode: 'HTML',
                    reply_markup: new InlineKeyboard().text('üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é', 'admin_rates_control')
                }
            );
            
            return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            
        } catch (error) {
            global.manualRateInput.delete(userId);
            console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫—É—Ä—Å–∞:', error);
            await ctx.reply(
                `‚ùå <b>–û–®–ò–ë–ö–ê –£–°–¢–ê–ù–û–í–ö–ò –ö–£–†–°–ê</b>\n\n` +
                `–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å ${currency}\n` +
                `–ü—Ä–∏—á–∏–Ω–∞: ${error.message}`,
                { 
                    parse_mode: 'HTML',
                    reply_markup: new InlineKeyboard().text('üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é', 'admin_rates_control')
                }
            );
            return;
        }
    }
    
    // === –°–ò–°–¢–ï–ú–ê –†–ï–ö–í–ò–ó–ò–¢–û–í - –û–ë–†–ê–ë–û–¢–ö–ê –ü–ï–†–ï–°–õ–ê–ù–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô ===
    if (ctx.message.forward_from && (userRole === 'operator' || userRole === 'admin')) {
        const handled = paymentSystem.handleForwardedMessage(ctx, chatContexts, paymentDetails, bot, db);
        if (handled) return;
    }
    
    // === –°–ò–°–¢–ï–ú–ê –†–ï–ö–í–ò–ó–ò–¢–û–í - –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô ===
    if (messageText && (userRole === 'operator' || userRole === 'admin')) {
        const handled = paymentSystem.handleOperatorMessage(ctx, chatContexts, paymentDetails, bot, db);
        if (handled) return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    console.log('üì® –ü–û–õ–£–ß–ï–ù–û –¢–ï–ö–°–¢–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:', userId);
    console.log('üì® –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:', messageText);
    console.log('üì® chatContexts.has(userId):', chatContexts.has(userId));
    
    if (chatContexts.has(userId)) {
        const context = chatContexts.get(userId);
        console.log('üì® –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞–π–¥–µ–Ω:', context);
        
        if (context.action === 'send_message_to_client') {
            console.log('üì® –ù–ê–ß–ò–ù–ê–ï–ú –û–¢–ü–†–ê–í–ö–£ –°–û–û–ë–©–ï–ù–ò–Ø –ö–õ–ò–ï–ù–¢–£');
            console.log('üì® orderId –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:', context.orderId);
            try {
                const order = await db.getOrderWithClient(context.orderId);
                if (!order) {
                    chatContexts.delete(userId);
                    return ctx.reply('‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                }
                
                // üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–ê–ù–ù–´–• –ö–õ–ò–ï–ù–¢–ê
                console.log('üîç –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø –ö–õ–ò–ï–ù–¢–£:');
                console.log('  orderId:', context.orderId);
                console.log('  order.client_id:', order.client_id);
                console.log('  order.user_id:', order.user_id);
                console.log('  order.client_first_name:', order.client_first_name);
                console.log('  order.client_username:', order.client_username);
                console.log('  messageText:', messageText);
                
                if (!order.client_id) {
                    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: client_id –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω!');
                    chatContexts.delete(userId);
                    return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞');
                }
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
                await db.addOrderMessage({
                    orderId: context.orderId,
                    senderId: userId,
                    senderType: 'operator',
                    message: messageText
                });
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
                console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É ID:', order.client_id);
                try {
                    await ctx.api.sendMessage(order.client_id,
                        `üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞</b>\n\n` +
                        `üÜî –ó–∞–∫–∞–∑ #${context.orderId}\n` +
                        `üë®‚Äçüíº –û–ø–µ—Ä–∞—Ç–æ—Ä: ${ctx.from.first_name || '–û–ø–µ—Ä–∞—Ç–æ—Ä'}\n\n` +
                        `üìù ${messageText}\n\n` +
                        `üí¨ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –æ–±—Ä–∞—Ç–Ω–æ.`,
                        { 
                            parse_mode: 'HTML',
                            reply_markup: new InlineKeyboard()
                                .text('üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É', `client_chat_${context.orderId}`)
                        }
                    );
                    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É!');
                    
                    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
                    await ctx.reply(
                        `‚úÖ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É!</b>\n\n` +
                        `üìù "${messageText}"\n\n` +
                        `üîô –í–æ–∑–≤—Ä–∞—Ç –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–æ–º:`,
                        { 
                            parse_mode: 'HTML',
                            reply_markup: new InlineKeyboard()
                                .text('‚öôÔ∏è –ö –∑–∞–∫–∞–∑—É', `manage_order_${context.orderId}`)
                        }
                    );
                } catch (sendError) {
                    console.error('‚ùå –û–®–ò–ë–ö–ê –û–¢–ü–†–ê–í–ö–ò –°–û–û–ë–©–ï–ù–ò–Ø –ö–õ–ò–ï–ù–¢–£:', sendError.message);
                    console.error('‚ùå –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:', sendError);
                    
                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ—à–∏–±–∫–µ
                    await ctx.reply(
                        `‚ùå <b>–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!</b>\n\n` +
                        `üìã –ö–ª–∏–µ–Ω—Ç ID: ${order.client_id}\n` +
                        `‚ùå –û—à–∏–±–∫–∞: ${sendError.message}\n\n` +
                        `üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n` +
                        `‚Ä¢ –ö–ª–∏–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞\n` +
                        `‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π ID –∫–ª–∏–µ–Ω—Ç–∞\n` +
                        `‚Ä¢ –ö–ª–∏–µ–Ω—Ç –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª –±–æ—Ç–∞\n\n` +
                        `üîô –í–æ–∑–≤—Ä–∞—Ç –∫ –∑–∞–∫–∞–∑—É:`,
                        { 
                            parse_mode: 'HTML',
                            reply_markup: new InlineKeyboard()
                                .text('‚öôÔ∏è –ö –∑–∞–∫–∞–∑—É', `manage_order_${context.orderId}`)
                        }
                    );
                }
                
                // –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                chatContexts.delete(userId);
                return;
                
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É:', error);
                await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
                chatContexts.delete(userId);
                return;
            }
        }

        if (context.action === 'input_custom_details') {
            try {
                const orderId = context.orderId;
                const customDetailsText = messageText.trim();
                
                // –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
                const lines = customDetailsText.split('\n').map(line => line.trim()).filter(line => line);
                
                if (lines.length < 3) {
                    await ctx.reply(
                        `‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö!</b>\n\n` +
                        `–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º:\n` +
                        `‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ç–∏\n` +
                        `‚Ä¢ –ê–¥—Ä–µ—Å\n` +
                        `‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ç–∏\n\n` +
                        `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:`,
                        { 
                            parse_mode: 'HTML',
                            reply_markup: new InlineKeyboard()
                                .text('‚ùå –û—Ç–º–µ–Ω–∞', `send_payment_details_${orderId}`)
                        }
                    );
                    return;
                }
                
                const networkName = lines[0];
                const address = lines[1];
                const networkDescription = lines[2];
                const currency = lines[3] || 'USDT';
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
                const result = await db.updateOrderStatusWithMessage(orderId, 'payment_details_sent', userId, 
                    `üí≥ –ù–æ–≤—ã–π –∞–¥—Ä–µ—Å (${networkName}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É. –û–∂–∏–¥–∞–µ–º –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤.`);
                
                const order = await db.getOrderWithClient(orderId);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç—É
                await ctx.api.sendMessage(order.client_id,
                    `üí≥ <b>–ê–î–†–ï–° –î–õ–Ø –ü–ï–†–ï–í–û–î–ê</b>\n\n` +
                    `üÜî –ó–∞–∫–∞–∑ #${orderId}\n` +
                    `üí∞ –ö –ø–µ—Ä–µ–≤–æ–¥—É: <b>${order.from_amount} ${order.from_currency}</b>\n\n` +
                    `üè¶ <b>${networkName}</b>\n` +
                    `üìç –ê–¥—Ä–µ—Å: <code>${address}</code>\n` +
                    `üèõÔ∏è –°–µ—Ç—å: ${networkDescription}\n` +
                    `üíé –í–∞–ª—é—Ç–∞: ${currency}\n\n` +
                    `‚ö†Ô∏è <b>–í–ê–ñ–ù–û:</b>\n` +
                    `‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥–∏—Ç–µ –¢–û–ß–ù–£–Æ —Å—É–º–º—É: ${order.from_amount} ${order.from_currency}\n` +
                    `‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ç—å –ø–µ—Ä–µ–≤–æ–¥–∞!\n` +
                    `‚Ä¢ –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –û—Ç–ø—Ä–∞–≤–∏–ª"\n` +
                    `‚Ä¢ –í—Ä–µ–º—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è: 5-30 –º–∏–Ω—É—Ç\n\n` +
                    `üìû –í–æ–ø—Ä–æ—Å—ã? –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É!`,
                    { 
                        parse_mode: 'HTML',
                        reply_markup: new InlineKeyboard()
                            .text('‚úÖ –Ø –æ—Ç–ø—Ä–∞–≤–∏–ª', `client_paid_${orderId}`)
                            .text('üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º', `client_chat_${orderId}`)
                            .row()
                            .text('üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å', `copy_address_${address}`)
                    }
                );
                
                // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
                await ctx.reply(
                    `‚úÖ <b>–ù–æ–≤—ã–π –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n` +
                    `üè¶ –°–µ—Ç—å: ${networkName}\n` +
                    `üìç –ê–¥—Ä–µ—Å: ${address}\n` +
                    `üíé –í–∞–ª—é—Ç–∞: ${currency}\n` +
                    `üÜî –ó–∞–∫–∞–∑ #${orderId}\n\n` +
                    `${result.message}`,
                    { 
                        parse_mode: 'HTML',
                        reply_markup: new InlineKeyboard()
                            .text('üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–º', `manage_order_${orderId}`)
                    }
                );
                
                // –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                chatContexts.delete(userId);
                return;
                
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞:', error);
                await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥—Ä–µ—Å–∞');
                chatContexts.delete(userId);
                return;
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å–∞ –∏–∑ –ø–∞–Ω–µ–ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        if (context.action === 'input_manual_crypto') {
            try {
                const customDetailsText = messageText.trim();
                
                // –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
                const lines = customDetailsText.split('\n').map(line => line.trim()).filter(line => line);
                
                if (lines.length < 3) {
                    await ctx.reply(
                        `‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö!</b>\n\n` +
                        `–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º:\n` +
                        `‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ç–∏\n` +
                        `‚Ä¢ –ê–¥—Ä–µ—Å\n` +
                        `‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ç–∏\n\n` +
                        `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:`,
                        { 
                            parse_mode: 'HTML',
                            reply_markup: new InlineKeyboard()
                                .text('‚ùå –û—Ç–º–µ–Ω–∞', 'details_crypto')
                        }
                    );
                    return;
                }
                
                const networkName = lines[0];
                const address = lines[1];
                const networkDescription = lines[2];
                const currency = lines[3] || 'USDT';
                
                // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞
                chatContexts.set(userId, { 
                    action: 'input_client_id_crypto',
                    cryptoData: { networkName, address, networkDescription, currency }
                });
                
                await ctx.reply(
                    `‚úÖ <b>–ö—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å –ø—Ä–∏–Ω—è—Ç!</b>\n\n` +
                    `üè¶ –°–µ—Ç—å: ${networkName}\n` +
                    `üìç –ê–¥—Ä–µ—Å: ${address}\n` +
                    `üíé –í–∞–ª—é—Ç–∞: ${currency}\n\n` +
                    `üë§ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <b>ID –∫–ª–∏–µ–Ω—Ç–∞</b>, –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å:`,
                    { 
                        parse_mode: 'HTML',
                        reply_markup: new InlineKeyboard()
                            .text('‚ùå –û—Ç–º–µ–Ω–∞', 'details_crypto')
                    }
                );
                return;
                
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å–∞:', error);
                await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥—Ä–µ—Å–∞');
                chatContexts.delete(userId);
                return;
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –∏–∑ –ø–∞–Ω–µ–ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        if (context.action === 'input_manual_bank') {
            try {
                const customDetailsText = messageText.trim();
                
                // –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã
                const lines = customDetailsText.split('\n').map(line => line.trim()).filter(line => line);
                
                if (lines.length < 3) {
                    await ctx.reply(
                        `‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö!</b>\n\n` +
                        `–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º:\n` +
                        `‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞\n` +
                        `‚Ä¢ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã\n` +
                        `‚Ä¢ –ò–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞\n\n` +
                        `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:`,
                        { 
                            parse_mode: 'HTML',
                            reply_markup: new InlineKeyboard()
                                .text('‚ùå –û—Ç–º–µ–Ω–∞', 'details_banks')
                        }
                    );
                    return;
                }
                
                const bankName = lines[0];
                const cardNumber = lines[1];
                const holderName = lines[2];
                const bankDescription = lines[3] || '';
                
                // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞
                chatContexts.set(userId, { 
                    action: 'input_client_id_bank',
                    bankData: { bankName, cardNumber, holderName, bankDescription }
                });
                
                await ctx.reply(
                    `‚úÖ <b>–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø—Ä–∏–Ω—è—Ç—ã!</b>\n\n` +
                    `üè¶ –ë–∞–Ω–∫: ${bankName}\n` +
                    `üí≥ –ö–∞—Ä—Ç–∞: ${cardNumber}\n` +
                    `üë§ –í–ª–∞–¥–µ–ª–µ—Ü: ${holderName}\n\n` +
                    `üë§ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <b>ID –∫–ª–∏–µ–Ω—Ç–∞</b>, –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:`,
                    { 
                        parse_mode: 'HTML',
                        reply_markup: new InlineKeyboard()
                            .text('‚ùå –û—Ç–º–µ–Ω–∞', 'details_banks')
                    }
                );
                return;
                
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤:', error);
                await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤');
                chatContexts.delete(userId);
                return;
            }
        }

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç—É –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ ID
        if (context.action === 'input_client_id_crypto') {
            try {
                const clientId = parseInt(messageText.trim());
                
                if (isNaN(clientId)) {
                    await ctx.reply(
                        `‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID!</b>\n\n` +
                        `–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∫–ª–∏–µ–Ω—Ç–∞:`,
                        { parse_mode: 'HTML' }
                    );
                    return;
                }
                
                const { networkName, address, networkDescription, currency } = context.cryptoData;
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç—É
                await ctx.api.sendMessage(clientId,
                    `üí≥ <b>–ê–î–†–ï–° –î–õ–Ø –ü–ï–†–ï–í–û–î–ê</b>\n\n` +
                    `üè¶ <b>${networkName}</b>\n` +
                    `üìç –ê–¥—Ä–µ—Å: <code>${address}</code>\n` +
                    `üèõÔ∏è –°–µ—Ç—å: ${networkDescription}\n` +
                    `üíé –í–∞–ª—é—Ç–∞: ${currency}\n\n` +
                    `‚ö†Ô∏è <b>–í–ê–ñ–ù–û:</b>\n` +
                    `‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥–∏—Ç–µ –¢–û–ß–ù–£–Æ —Å—É–º–º—É\n` +
                    `‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ç—å –ø–µ—Ä–µ–≤–æ–¥–∞!\n` +
                    `‚Ä¢ –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ —É–≤–µ–¥–æ–º–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞\n` +
                    `‚Ä¢ –í—Ä–µ–º—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è: 5-30 –º–∏–Ω—É—Ç\n\n` +
                    `üìû –í–æ–ø—Ä–æ—Å—ã? –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É!`,
                    { 
                        parse_mode: 'HTML',
                        reply_markup: new InlineKeyboard()
                            .text('‚úÖ –Ø –æ—Ç–ø—Ä–∞–≤–∏–ª', `client_paid_notification`)
                            .text('üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º', `support_contact`)
                            .row()
                            .text('üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å', `copy_address_${address}`)
                    }
                );
                
                // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
                await ctx.reply(
                    `‚úÖ <b>–ö—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n` +
                    `üè¶ –°–µ—Ç—å: ${networkName}\n` +
                    `üìç –ê–¥—Ä–µ—Å: ${address}\n` +
                    `üíé –í–∞–ª—é—Ç–∞: ${currency}\n` +
                    `üë§ –ö–ª–∏–µ–Ω—Ç: ${clientId}\n\n` +
                    `–ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É!`,
                    { 
                        parse_mode: 'HTML',
                        reply_markup: new InlineKeyboard()
                            .text('üîô –ù–∞–∑–∞–¥ –∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º', 'details_crypto')
                    }
                );
                
                // –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                chatContexts.delete(userId);
                return;
                
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç—É:', error);
                await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥—Ä–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç—É ${messageText}. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.`);
                chatContexts.delete(userId);
                return;
            }
        }

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç—É –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ ID
        if (context.action === 'input_client_id_bank') {
            try {
                const clientId = parseInt(messageText.trim());
                
                if (isNaN(clientId)) {
                    await ctx.reply(
                        `‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID!</b>\n\n` +
                        `–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∫–ª–∏–µ–Ω—Ç–∞:`,
                        { parse_mode: 'HTML' }
                    );
                    return;
                }
                
                const { bankName, cardNumber, holderName, bankDescription } = context.bankData;
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∫–ª–∏–µ–Ω—Ç—É
                await ctx.api.sendMessage(clientId,
                    `üí≥ <b>–ë–ê–ù–ö–û–í–°–ö–ò–ï –†–ï–ö–í–ò–ó–ò–¢–´</b>\n\n` +
                    `üè¶ <b>${bankName}</b>\n` +
                    `üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: <code>${cardNumber}</code>\n` +
                    `üë§ –í–ª–∞–¥–µ–ª–µ—Ü: ${holderName}\n` +
                    (bankDescription ? `üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${bankDescription}\n` : '') +
                    `\n‚ö†Ô∏è <b>–ò–ù–°–¢–†–£–ö–¶–ò–Ø:</b>\n` +
                    `‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É\n` +
                    `‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ\n` +
                    `‚Ä¢ –£–≤–µ–¥–æ–º–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞\n\n` +
                    `üìû –°–≤—è–∑—å: –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã`,
                    { 
                        parse_mode: 'HTML',
                        reply_markup: new InlineKeyboard()
                            .text('‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª', `client_paid_notification`)
                            .text('üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º', `support_contact`)
                            .row()
                            .text('üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã', `copy_card_${cardNumber}`)
                    }
                );
                
                // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
                await ctx.reply(
                    `‚úÖ <b>–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!</b>\n\n` +
                    `üè¶ –ë–∞–Ω–∫: ${bankName}\n` +
                    `üí≥ –ö–∞—Ä—Ç–∞: ${cardNumber}\n` +
                    `üë§ –í–ª–∞–¥–µ–ª–µ—Ü: ${holderName}\n` +
                    `üë§ –ö–ª–∏–µ–Ω—Ç: ${clientId}\n\n` +
                    `–†–µ–∫–≤–∏–∑–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç—É!`,
                    { 
                        parse_mode: 'HTML',
                        reply_markup: new InlineKeyboard()
                            .text('üîô –ù–∞–∑–∞–¥ –∫ –±–∞–Ω–∫–æ–≤—Å–∫–∏–º –∫–∞—Ä—Ç–∞–º', 'details_banks')
                    }
                );
                
                // –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                chatContexts.delete(userId);
                return;
                
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç—É:', error);
                await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç—É ${messageText}. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.`);
                chatContexts.delete(userId);
                return;
            }
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Å—ã–ª–∫—É
    if (ctx.message.text === '/add_operator_forward' && ctx.message.reply_to_message) {
        const userId = ctx.from.id;
        const userRole = await db.getUserRole(userId);
        
        if (userRole !== 'admin') {
            return ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤');
        }
        
        const targetUser = ctx.message.reply_to_message.from;
        const operatorId = targetUser.id;
        
        try {
            await db.addStaff({
                telegramId: operatorId,
                username: targetUser.username,
                firstName: targetUser.first_name,
                lastName: targetUser.last_name,
                role: 'operator',
                addedBy: userId
            });
            
            await ctx.reply(
                `‚úÖ <b>–û–ø–µ—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n` +
                `üë§ –ò–º—è: ${targetUser.first_name} ${targetUser.last_name || ''}\n` +
                `üÜî Telegram ID: <code>${operatorId}</code>\n` +
                `üìû Username: @${targetUser.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n` +
                `üë®‚Äçüíº –†–æ–ª—å: –û–ø–µ—Ä–∞—Ç–æ—Ä\n\n` +
                `–ù–æ–≤—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /operator`,
                { parse_mode: 'HTML' }
            );
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            try {
                await bot.api.sendMessage(operatorId,
                    `üéâ <b>–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º ExMachinaX!</b>\n\n` +
                    `üë®‚Äçüíº –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–æ–≤.\n` +
                    `üìã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /operator –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏.\n\n` +
                    `üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É ExMachinaX!`,
                    { parse_mode: 'HTML' }
                );
            } catch (error) {
                console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –Ω–æ–≤–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:', error.message);
            }
            
        } catch (error) {
            await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: ${error.message}`);
        }
    }
});

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º
async function notifyOperators(orderData) {
    console.log("üö® === –§–£–ù–ö–¶–ò–Ø notifyOperators –í–´–ó–í–ê–ù–ê ===");
    console.log("üìã ID –∑–∞—è–≤–∫–∏:", orderData.id);
    console.log("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", orderData.userName);    try {
        // –û—Ç–ª–∞–¥–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏
        console.log('üîç –î–ê–ù–ù–´–ï –ó–ê–Ø–í–ö–ò –î–õ–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø:', {
            id: orderData.id,
            fromAddress: orderData.fromAddress,
            toAddress: orderData.toAddress,
            pairType: orderData.pairType,
            network: orderData.network  // ‚Üê –î–û–ë–ê–í–õ–Ø–ï–ú –°–ï–¢–¨ –í –î–ò–ê–ì–ù–û–°–¢–ò–ö–£!
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await db.notifyAllOperators(orderData);
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä—è–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        const staff = await db.getStaffList();
        const operators = staff.filter(s => ['admin', 'operator'].includes(s.role));
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–∞—Ä—ã –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const pairType = orderData.pairType || 'fiat';
        
        let addressSection = '';
        let amlSection = '';
        let pairTypeIcon = '';
        let pairTypeText = '';
        
        switch (pairType) {
            case 'crypto':
                // BTC ‚Üí ETH: –¥–≤–∞ –∞–¥—Ä–µ—Å–∞ (AML —É–¥–∞–ª–µ–Ω)
                addressSection = 
                    `üì§ <b>–ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> <code>${orderData.fromAddress || '–ù–µ —É–∫–∞–∑–∞–Ω'}</code>\n` +
                    `üì• <b>–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω–∏—è:</b> <code>${orderData.toAddress || '–ù–µ —É–∫–∞–∑–∞–Ω'}</code>\n`;
                    
                amlSection = `‚úÖ <b>AML –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> –û—Ç–∫–ª—é—á–µ–Ω—ã (–±—ã—Å—Ç—Ä—ã–π –æ–±–º–µ–Ω)\n`;
                    
                pairTypeIcon = 'üîó';
                pairTypeText = '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è';
                break;
                
            case 'crypto-to-fiat':
                // USDT ‚Üí RUB: –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å + —Ä–µ–∫–≤–∏–∑–∏—Ç—ã (AML —É–¥–∞–ª–µ–Ω)
                addressSection = 
                    `üì§ <b>–ö—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å:</b> <code>${orderData.fromAddress || '–ù–µ —É–∫–∞–∑–∞–Ω'}</code>\n` +
                    `üì• <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ–ª—É—á–µ–Ω–∏—è:</b> <code>${orderData.toAddress || '–ù–µ —É–∫–∞–∑–∞–Ω'}</code>\n`;
                    
                amlSection = `‚úÖ <b>AML –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> –û—Ç–∫–ª—é—á–µ–Ω—ã (–±—ã—Å—Ç—Ä—ã–π –æ–±–º–µ–Ω)\n`;
                    
                pairTypeIcon = 'üîÑ';
                pairTypeText = '–ö—Ä–∏–ø—Ç–æ ‚Üí –§–∏–∞—Ç';
                break;
                
            case 'fiat-to-crypto':
                // RUB ‚Üí USDT: –∫–æ—à–µ–ª–µ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è (AML —É–¥–∞–ª–µ–Ω)
                addressSection = 
                    `üì§ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> –ë—É–¥—É—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º\n` +
                    `üì• <b>–ö–æ—à–µ–ª–µ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è:</b> <code>${orderData.toAddress || '–ù–µ —É–∫–∞–∑–∞–Ω'}</code>\n`;
                    
                amlSection = `‚úÖ <b>AML –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> –û—Ç–∫–ª—é—á–µ–Ω—ã (–±—ã—Å—Ç—Ä—ã–π –æ–±–º–µ–Ω)\n`;
                    
                pairTypeIcon = 'üîÅ';
                pairTypeText = '–§–∏–∞—Ç ‚Üí –ö—Ä–∏–ø—Ç–æ';
                break;
                
            case 'fiat':
            default:
                // ARS ‚Üí BRL –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
                const accountNumber = orderData.toAddress?.trim();
                console.log('üè¶ –ù–û–ú–ï–† –°–ß–ï–¢–ê –î–õ–Ø –§–ò–ê–¢–ù–û–ô –ü–ê–†–´:', accountNumber);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
                const isSpecialCase = (orderData.fromCurrency === 'ARS' && orderData.toCurrency === 'RUB') ||
                                    (orderData.fromCurrency === 'RUB' && orderData.toCurrency === 'KZT') ||
                                    (orderData.fromCurrency === 'RUB' && orderData.toCurrency === 'UAH') ||
                                    (orderData.fromCurrency === 'UAH' && orderData.toCurrency === 'RUB');
                
                if (isSpecialCase) {
                    let currencyName;
                    if (orderData.toCurrency === 'RUB') {
                        currencyName = '—Ä—É–±–ª–µ–π';
                    } else if (orderData.toCurrency === 'KZT') {
                        currencyName = '—Ç–µ–Ω–≥–µ';
                    } else if (orderData.toCurrency === 'UAH') {
                        currencyName = '–≥—Ä–∏–≤–µ–Ω';
                    }
                    addressSection = `üí≥ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è ${currencyName}:</b> <code>${accountNumber || '–ù–µ —É–∫–∞–∑–∞–Ω'}</code>\n`;
                } else {
                    addressSection = `üè¶ <b>–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞:</b> <code>${accountNumber || '–ù–µ —É–∫–∞–∑–∞–Ω'}</code>\n`;
                }
                
                amlSection = `‚úÖ <b>AML –ø—Ä–æ–≤–µ—Ä–∫–∞:</b> –ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è (—Ñ–∏–∞—Ç–Ω–∞—è –ø–∞—Ä–∞)\n`;
                pairTypeIcon = 'üè¶';
                pairTypeText = '–§–∏–∞—Ç–Ω–∞—è';
                break;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ç–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
        const networkSection = orderData.network ? `üîó <b>–°–µ—Ç—å:</b> ${orderData.network}\n` : '';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–Ω–∫–µ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        const bankSection = orderData.bank ? `üè¶ <b>–ë–∞–Ω–∫:</b> ${orderData.bank}\n` : '';
        
        const message = 
            `üö® <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –° –°–ê–ô–¢–ê #${orderData.id}</b>\n\n` +
            `üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${orderData.userName || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}\n` +
            `üí± <b>–û–±–º–µ–Ω:</b> ${orderData.fromAmount} ${orderData.fromCurrency} ‚Üí ${orderData.toCurrency}\n` +
            networkSection +  // ‚Üê –î–û–ë–ê–í–õ–Ø–ï–ú –ò–ù–§–û–†–ú–ê–¶–ò–Æ –û –°–ï–¢–ò!
            bankSection +     // ‚Üê –î–û–ë–ê–í–õ–Ø–ï–ú –ò–ù–§–û–†–ú–ê–¶–ò–Æ –û –ë–ê–ù–ö–ï!
            `${pairTypeIcon} <b>–¢–∏–ø –ø–∞—Ä—ã:</b> ${pairTypeText}\n` +
            `üí∞ <b>–û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å:</b> –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ\n\n` +
            addressSection +
            amlSection +
            `‚è∞ <b>–°–æ–∑–¥–∞–Ω:</b> ${new Date().toLocaleString('ru-RU', {
                timeZone: 'Europe/Moscow',
                year: 'numeric',
                month: '2-digit',
                day: '2-digit',
                hour: '2-digit',
                minute: '2-digit'
            })}\n\n` +
            `üìã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /operator —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑\n\n` +
            `#–∑–∞—è–≤–∫–∞ #—Å–∞–π—Ç #${orderData.fromCurrency}_${orderData.toCurrency} #${pairTypeText.toLowerCase()}`;

        const keyboard = new InlineKeyboard()
            .text('üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞', 'open_operator_panel')
            .row()
            .text(`‚úÖ –ë—ã—Å—Ç—Ä–æ –ø—Ä–∏–Ω—è—Ç—å #${orderData.id}`, `take_order_${orderData.id}`)
            .text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–Ω—è', 'daily_stats');

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
        for (const operator of operators) {
            try {
                await bot.api.sendMessage(operator.telegram_id, message, {
                    parse_mode: 'HTML',
                    reply_markup: keyboard
                });
            } catch (error) {
                console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É ${operator.telegram_id}:`, error.message);
            }
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞
        if (process.env.OPERATOR_GROUP_ID) {
            try {
                await bot.api.sendMessage(process.env.OPERATOR_GROUP_ID, message, {
                    parse_mode: 'HTML',
                    reply_markup: keyboard
                });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤:', error);
            }
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å —Å –º–µ—Ç–∫–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏
        console.log(`üåê [–°–ê–ô–¢] ${new Date().toLocaleTimeString()} - –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #${orderData.id}: ${orderData.fromAmount} ${orderData.fromCurrency} ‚Üí ${orderData.toCurrency} –æ—Ç ${orderData.userName}`);
        console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã ${operators.length} –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∞–º
        await sendDailyActivityUpdate();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º:', error);
    }
}



// –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
async function sendDailyActivityUpdate() {
    try {
        const stats = await db.getAdminStats();
        const staff = await db.getStaffList();
        const admins = staff.filter(s => s.role === 'admin');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º, –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ —á–∞—Å
        const lastUpdate = global.lastActivityUpdate || 0;
        const now = Date.now();
        
        if (now - lastUpdate > 3600000) { // 1 —á–∞—Å
            global.lastActivityUpdate = now;
            
            const briefMessage = 
                `üìä <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è</b>\n\n` +
                `üìù –ó–∞—è–≤–æ–∫: ${stats.ordersToday || 0}\n` +
                `üí∞ –û–±–æ—Ä–æ—Ç: $${(stats.volumeToday || 0).toFixed(2)}\n` +
                `üë• –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.newUsersToday || 0}\n\n` +
                `üìà –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${new Date().toLocaleTimeString()}`;
            
            for (const admin of admins) {
                try {
                    await bot.api.sendMessage(admin.telegram_id, briefMessage, {
                        parse_mode: 'HTML'
                    });
                } catch (error) {
                    console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–º–∏–Ω—É ${admin.telegram_id}`);
                }
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥—Ä—É–≥–∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö —Å —Å–∞–π—Ç–∞
async function notifyWebsiteActivity(activityType, data) {
    try {
        const staff = await db.getStaffList();
        const admins = staff.filter(s => s.role === 'admin');
        
        let message = '';
        
        switch (activityType) {
            case 'user_registered':
                message = `üë§ <b>–ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å —Å–∞–π—Ç–∞</b>\n\n` +
                         `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${data.name}\n` +
                         `ID: ${data.userId}\n` +
                         `–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n\n` +
                         `#—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è #—Å–∞–π—Ç`;
                break;
                
            case 'rate_request':
                message = `üí± <b>–ó–∞–ø—Ä–æ—Å –∫—É—Ä—Å–∞ —Å —Å–∞–π—Ç–∞</b>\n\n` +
                         `–ü–∞—Ä–∞: ${data.fromCurrency} ‚Üí ${data.toCurrency}\n` +
                         `–°—É–º–º–∞: ${data.amount}\n` +
                         `–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n\n` +
                         `#–∫—É—Ä—Å #—Å–∞–π—Ç`;
                break;
        }
        
        if (message) {
            for (const admin of admins) {
                try {
                    await bot.api.sendMessage(admin.telegram_id, message, {
                        parse_mode: 'HTML'
                    });
                } catch (error) {
                    console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É ${admin.telegram_id}`);
                }
            }
            
            console.log(`üåê [–°–ê–ô–¢] ${activityType.toUpperCase()}: ${JSON.stringify(data)}`);
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error);
    }
}

// === –°–ò–°–¢–ï–ú–ê –†–ï–ö–í–ò–ó–ò–¢–û–í –î–õ–Ø –û–ü–ï–†–ê–¢–û–†–û–í ===

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
const paymentDetails = {
    crypto: {
        'TRC20': {
            name: 'TRC20 (Tron)',
            address: 'THcSDj69NjoD9Ev53mK9cx3jF7AswMDtcW',
            icon: 'üî∏',
            fee: '$1',
            description: '–ù–∏–∑–∫–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ –≤ —Å–µ—Ç–∏ Tron'
        },
        'BEP20': {
            name: 'BEP20 (BSC)',
            address: '0x1d0aea9b2ba322de2e5a2e0745dd42a943320ea6',
            icon: 'üü°',
            fee: '$1',
            description: 'Binance Smart Chain'
        },
        'ERC20': {
            name: 'ERC20 (Ethereum)',
            address: '0x1d0aea9b2ba322de2e5a2e0745dd42a943320ea6',
            icon: '‚ö™',
            fee: '$15',
            description: '–û—Å–Ω–æ–≤–Ω–∞—è —Å–µ—Ç—å Ethereum'
        },
        'ByBit': {
            name: 'ByBit ID',
            address: '47028037',
            icon: 'üí∏',
            fee: '–ë–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏',
            description: 'P2P —Ç–æ—Ä–≥–æ–≤–ª—è ByBit'
        }
    },
    banks: {
        '–°–ë–ü': {
            name: '–°–ë–ü',
            card: '+7 (905) 123-45-67',
            holder: '–ê–õ–ï–ö–°–ï–ô –ü–ï–¢–†–û–í',
            icon: '‚ö°',
            description: '–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
        },
        '–°–±–µ—Ä–±–∞–Ω–∫': {
            name: '–°–±–µ—Ä–±–∞–Ω–∫',
            card: '2202 2006 7890 1234',
            holder: '–ê–õ–ï–ö–°–ï–ô –ü–ï–¢–†–û–í',
            icon: 'üü¢',
            description: '–ö—Ä—É–ø–Ω–µ–π—à–∏–π –±–∞–Ω–∫ –†–æ—Å—Å–∏–∏'
        },
        '–¢–∏–Ω—å–∫–æ—Ñ—Ñ': {
            name: '–¢-–ë–∞–Ω–∫',
            card: '5536 9138 4567 8901',
            holder: '–ê–õ–ï–ö–°–ï–ô –ü–ï–¢–†–û–í',
            icon: 'üü°',
            description: '–õ—É—á—à–∏–π –º–æ–±–∏–ª—å–Ω—ã–π –±–∞–Ω–∫'
        },
        '–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫': {
            name: '–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫',
            card: '4154 8127 2345 6789',
            holder: '–ê–õ–ï–ö–°–ï–ô –ü–ï–¢–†–û–í',
            icon: 'üî¥',
            description: '–ß–∞—Å—Ç–Ω—ã–π –±–∞–Ω–∫ ‚Ññ1'
        },
        '–í–¢–ë': {
            name: '–í–¢–ë',
            card: '4272 1234 5678 9012',
            holder: '–ê–õ–ï–ö–°–ï–ô –ü–ï–¢–†–û–í',
            icon: 'üîµ',
            description: '–ù–∞–¥–µ–∂–Ω—ã–π –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –±–∞–Ω–∫'
        },
        '–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω–±–∞–Ω–∫': {
            name: '–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω–±–∞–Ω–∫',
            card: '5469 3456 7890 1234',
            holder: '–ê–õ–ï–ö–°–ï–ô –ü–ï–¢–†–û–í',
            icon: 'üü®',
            description: '–ï–≤—Ä–æ–ø–µ–π—Å–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–∞'
        },
        '–ü—Ä–æ–º—Å–≤—è–∑—å–±–∞–Ω–∫': {
            name: '–ü—Ä–æ–º—Å–≤—è–∑—å–±–∞–Ω–∫',
            card: '5559 4567 8901 2345',
            holder: '–ê–õ–ï–ö–°–ï–ô –ü–ï–¢–†–û–í',
            icon: 'üü¶',
            description: '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –±–∞–Ω–∫ –†–æ—Å—Å–∏–∏'
        },
        '–û–∑–æ–Ω –±–∞–Ω–∫': {
            name: '–û–∑–æ–Ω –ë–∞–Ω–∫',
            card: '2204 5678 9012 3456',
            holder: '–ê–õ–ï–ö–°–ï–ô –ü–ï–¢–†–û–í',
            icon: 'üü£',
            description: '–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π —ç–∫–æ—Å–∏—Å—Ç–µ–º–Ω—ã–π –±–∞–Ω–∫'
        },
        '–ú–¢–° –±–∞–Ω–∫': {
            name: '–ú–¢–° –ë–∞–Ω–∫',
            card: '5486 6789 0123 4567',
            holder: '–ê–õ–ï–ö–°–ï–ô –ü–ï–¢–†–û–í',
            icon: 'üî¥',
            description: '–ë–∞–Ω–∫ —Å —Ç–µ–ª–µ–∫–æ–º-–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏'
        },
        'Bybit UID': {
            name: 'Bybit UID',
            address: '47028037',
            icon: 'üê±',
            fee: '–ë–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏',
            description: 'P2P —Ç–æ—Ä–≥–æ–≤–ª—è ByBit'
        }
    }
};

// –ö–æ–º–∞–Ω–¥–∞ –ø–∞–Ω–µ–ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
bot.callbackQuery('open_operator_panel', async (ctx) => {
    const userId = ctx.from.id;
    const userRole = await db.getUserRole(userId);
    
    if (userRole !== 'operator' && userRole !== 'admin') {
        return ctx.answerCallbackQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞');
    }
    
    await ctx.answerCallbackQuery();
    
    const keyboard = new InlineKeyboard()
        .text('üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏', 'view_active_orders')
        .text('üí≥ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã', 'send_payment_details')
        .row()
        .text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'operator_stats')
        .text('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'operator_settings')
        .row()
        .text('üîô –ù–∞–∑–∞–¥', 'back_to_main');
    
    await ctx.editMessageText(
        `üë®‚Äçüíº <b>–ü–∞–Ω–µ–ª—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞</b>\n\n` +
        `üÜî –í–∞—à ID: <code>${userId}</code>\n` +
        `üìù –†–æ–ª—å: ${userRole === 'admin' ? '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : '–û–ø–µ—Ä–∞—Ç–æ—Ä'}\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
        {
            parse_mode: 'HTML',
            reply_markup: keyboard
        }
    );
});

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
bot.callbackQuery('send_payment_details', async (ctx) => {
    const userId = ctx.from.id;
    const userRole = await db.getUserRole(userId);
    
    if (userRole !== 'operator' && userRole !== 'admin') {
        return ctx.answerCallbackQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
    }
    
    await ctx.answerCallbackQuery();
    
    const keyboard = new InlineKeyboard()
        .text('üí∞ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã', 'details_crypto')
        .text('üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã', 'details_banks')
        .row()
        .text('üìú –í—Å–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã', 'details_all')
        .row()
        .text('üîô –ù–∞–∑–∞–¥', 'open_operator_panel');
    
    await ctx.editMessageText(
        `üí≥ <b>–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤</b>\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É:\n\n` +
        `üí∞ <b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã</b> - –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–æ–≤\n` +
        `üè¶ <b>–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã</b> - —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∫–∞—Ä—Ç\n` +
        `üìú <b>–í—Å–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã</b> - –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫`,
        {
            parse_mode: 'HTML',
            reply_markup: keyboard
        }
    );
});

// –í—ã–±–æ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
bot.callbackQuery('details_crypto', async (ctx) => {
    await ctx.answerCallbackQuery();
    
    const keyboard = new InlineKeyboard();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å–∞
    Object.keys(paymentDetails.crypto).forEach(key => {
        const detail = paymentDetails.crypto[key];
        keyboard.text(`${detail.icon} ${detail.name}`, `send_crypto_${key}`).row();
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–≤–æ–¥–∞ –≤—Ä—É—á–Ω—É—é
    keyboard.text('‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é', 'input_custom_crypto').row();
    keyboard.text('üîô –ù–∞–∑–∞–¥', 'send_payment_details');
    
    await ctx.editMessageText(
        `üí∞ <b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ –∞–¥—Ä–µ—Å–∞</b>\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É:\n\n` +
        Object.keys(paymentDetails.crypto).map(key => {
            const detail = paymentDetails.crypto[key];
            return `${detail.icon} <b>${detail.name}</b>\n` +
                   `   –ê–¥—Ä–µ—Å: <code>${detail.address}</code>\n` +
                   `   –ö–æ–º–∏—Å—Å–∏—è: ${detail.fee}`;
        }).join('\n\n'),
        {
            parse_mode: 'HTML',
            reply_markup: keyboard
        }
    );
});

// –í—ã–±–æ—Ä –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
bot.callbackQuery('details_banks', async (ctx) => {
    await ctx.answerCallbackQuery();
    
    const keyboard = new InlineKeyboard();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–∞–Ω–∫–∞
    Object.keys(paymentDetails.banks).forEach(key => {
        const detail = paymentDetails.banks[key];
        keyboard.text(`${detail.icon} ${detail.name}`, `send_bank_${key}`).row();
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–≤–æ–¥–∞ –≤—Ä—É—á–Ω—É—é
    keyboard.text('‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤—Ä—É—á–Ω—É—é', 'input_custom_bank').row();
    keyboard.text('üîô –ù–∞–∑–∞–¥', 'send_payment_details');
    
    await ctx.editMessageText(
        `üè¶ <b>–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã</b>\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤:\n\n` +
        Object.keys(paymentDetails.banks).map(key => {
            const detail = paymentDetails.banks[key];
            return `${detail.icon} <b>${detail.name}</b>\n` +
                   `   –ö–∞—Ä—Ç–∞: <code>${detail.card}</code>\n` +
                   `   –í–ª–∞–¥–µ–ª–µ—Ü: ${detail.holder}`;
        }).join('\n\n'),
        {
            parse_mode: 'HTML',
            reply_markup: keyboard
        }
    );
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
bot.callbackQuery('details_all', async (ctx) => {
    chatContexts.set(ctx.from.id, {
        action: 'send_all_details'
    });
    
    await ctx.editMessageText(
        `üìú <b>–û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤</b>\n\n` +
        `üí¨ –ù–∞–ø–∏—à–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞ (–∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞) –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤:`,
        { parse_mode: 'HTML' }
    );
    
    await ctx.answerCallbackQuery('–£–∫–∞–∂–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤');
});

// –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
bot.callbackQuery('back_to_main', async (ctx) => {
    await ctx.answerCallbackQuery();
    
    const userId = ctx.from.id;
    const keyboard = await createMainKeyboard(userId);
    
    await ctx.editMessageText(
        `‚ö° <b>ExMachinaX</b> - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
        {
            parse_mode: 'HTML',
            reply_markup: keyboard
        }
    );
});

// –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
const paymentSystem = require('./payment-details-system');

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –∏–∑ –ø–∞–Ω–µ–ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
bot.callbackQuery('input_custom_crypto', async (ctx) => {
    const userId = ctx.from.id;
    const userRole = await db.getUserRole(userId);
    
    if (userRole !== 'operator' && userRole !== 'admin') {
        return ctx.answerCallbackQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
    }
    
    await ctx.answerCallbackQuery('‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å...');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    chatContexts.set(userId, { 
        action: 'input_manual_crypto',
        source: 'operator_panel'
    });
    
    await ctx.editMessageText(
        `‚úçÔ∏è <b>–í–í–û–î –ö–†–ò–ü–¢–û–ê–î–†–ï–°–ê –í–†–£–ß–ù–£–Æ</b>\n\n` +
        `üìù –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n` +
        `<b>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ç–∏</b>\n` +
        `üìç –ê–¥—Ä–µ—Å\n` +
        `üè¶ –û–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ç–∏\n` +
        `üíé –í–∞–ª—é—Ç–∞\n\n` +
        `<b>–ü—Ä–∏–º–µ—Ä:</b>\n` +
        `TRC-20 USDT\n` +
        `THcSDj69NjoD9Ev53mK9cx3jF7AswMDtcW\n` +
        `TRON (TRC-20)\n` +
        `USDT`,
        { 
            parse_mode: 'HTML',
            reply_markup: new InlineKeyboard()
                .text('‚ùå –û—Ç–º–µ–Ω–∞', 'details_crypto')
        }
    );
});

bot.callbackQuery('input_custom_bank', async (ctx) => {
    const userId = ctx.from.id;
    const userRole = await db.getUserRole(userId);
    
    if (userRole !== 'operator' && userRole !== 'admin') {
        return ctx.answerCallbackQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
    }
    
    await ctx.answerCallbackQuery('‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã...');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    chatContexts.set(userId, { 
        action: 'input_manual_bank',
        source: 'operator_panel'
    });
    
    await ctx.editMessageText(
        `‚úçÔ∏è <b>–í–í–û–î –ë–ê–ù–ö–û–í–°–ö–ò–• –†–ï–ö–í–ò–ó–ò–¢–û–í –í–†–£–ß–ù–£–Æ</b>\n\n` +
        `üìù –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n` +
        `<b>–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞</b>\n` +
        `üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã\n` +
        `üë§ –ò–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞\n` +
        `üè¶ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n\n` +
        `<b>–ü—Ä–∏–º–µ—Ä:</b>\n` +
        `–°–±–µ—Ä–±–∞–Ω–∫\n` +
        `5555 4444 3333 2222\n` +
        `–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤\n` +
        `–ü–µ—Ä–µ–≤–æ–¥—ã –¥–æ 100,000‚ÇΩ`,
        { 
            parse_mode: 'HTML',
            reply_markup: new InlineKeyboard()
                .text('‚ùå –û—Ç–º–µ–Ω–∞', 'details_banks')
        }
    );
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
paymentSystem.setupCryptoHandlers(bot, paymentDetails, chatContexts);
paymentSystem.setupBankHandlers(bot, paymentDetails, chatContexts);

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–µ
module.exports = { bot, notifyOperators, notifyWebsiteActivity, db, googleSheetsManager, crmService };

// –§—É–Ω–∫—Ü–∏—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ
async function sendStartupNotification() {
    try {
        const staff = await db.getStaffList();
        const admins = staff.filter(s => s.role === 'admin');
        
        const startTime = new Date().toLocaleString('ru-RU', {
            timeZone: 'Europe/Moscow',
            weekday: 'long',
            year: 'numeric',
            month: 'long', 
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
        });
        
        const startupMessage = 
            `üöÄ <b>EXMACHINAX BOT –ó–ê–ü–£–©–ï–ù!</b>\n\n` +
            `üéâ <b>–°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞</b>\n\n` +
            `üìÖ <b>–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:</b> ${startTime}\n` +
            `üåê <b>–í–µ–±-—Å–µ—Ä–≤–µ—Ä:</b> http://localhost:3000\n` +
            `ü§ñ <b>Telegram Bot:</b> –ê–∫—Ç–∏–≤–µ–Ω\n` +
            `üíæ <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b> –ü–æ–¥–∫–ª—é—á–µ–Ω–∞\n` +
            `üë• <b>–ü–µ—Ä—Å–æ–Ω–∞–ª –æ–Ω–ª–∞–π–Ω:</b> ${admins.length} –∞–¥–º–∏–Ω–æ–≤\n\n` +
            `üî• <b>–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ:</b>\n` +
            `‚úÖ –ü—Ä–∏–µ–º –∑–∞—è–≤–æ–∫ —Å —Å–∞–π—Ç–∞\n` +
            `‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º\n` +
            `‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π\n` +
            `‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n\n` +
            `üéØ <b>ExMachinaX –≥–æ—Ç–æ–≤ –∫ –ø–æ–∫–æ—Ä–µ–Ω–∏—é –∫—Ä–∏–ø—Ç–æ-–º–∏—Ä–∞!</b>\n\n` +
            `#startup #system #online`;
            
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é
        const startupKeyboard = new InlineKeyboard()
            .text('üöÄ –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é', 'startup_open_menu');
            
        for (const admin of admins) {
            try {
                await bot.api.sendMessage(admin.telegram_id, startupMessage, {
                    parse_mode: 'HTML',
                    reply_markup: startupKeyboard
                });
            } catch (error) {
                console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –∞–¥–º–∏–Ω—É ${admin.telegram_id}`);
            }
        }
        
        console.log(`üéâ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã ${admins.length} –∞–¥–º–∏–Ω–∞–º`);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–ø—É—Å–∫–µ:', error);
    }
}

// ‚ùå –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –û–ë –û–°–¢–ê–ù–û–í–ö–ï –û–¢–ö–õ–Æ–ß–ï–ù–´
// –ü—Ä–∏—á–∏–Ω–∞: Railway –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, 
// —ç—Ç–æ –≤—ã–∑—ã–≤–∞–ª–æ –ª–æ–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–º–µ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞

console.log('üîá –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã (Railway –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫)');

// –§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Menu Button
async function setupMenuButton() {
    try {
        const webappUrl = process.env.WEBAPP_URL;
        if (webappUrl && webappUrl.startsWith('https://')) {
            await bot.api.setChatMenuButton({
                menu_button: {
                    type: 'web_app',
                    text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å ExMachinaX',
                    web_app: {
                        url: webappUrl
                    }
                }
            });
            console.log('‚úÖ Menu Button –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è WebApp');
        }
    } catch (error) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Menu Button:', error.message);
    }
}

// –°–æ–∑–¥–∞–µ–º Express —Å–µ—Ä–≤–µ—Ä –¥–ª—è webhook'–æ–≤
const webhookApp = express();
const cors = require('cors');
const RatesService = require('./services/RatesService');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const ratesService = new RatesService();

// Middleware
webhookApp.use(cors());
webhookApp.use(express.json());

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
webhookApp.use(express.static(path.join(__dirname, 'webapp')));
webhookApp.use('/assets', express.static(path.join(__dirname, '..', 'assets')));

// –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
webhookApp.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'webapp', 'index.html'));
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
webhookApp.get('/api/rates', async (req, res) => {
    try {
        const rates = await ratesService.getRates();
        res.json({ 
            success: true, 
            data: rates,
            lastUpdate: ratesService.getLastUpdateTime(),
            source: 'live_api'
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤:', error);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤' });
    }
});

// API –¥–ª—è AML –ø—Ä–æ–≤–µ—Ä–∫–∏
webhookApp.post('/api/aml-check', async (req, res) => {
    try {
        const { address, currency, userId } = req.body;
        
        const amlResult = await amlService.checkAddress(address, currency);
        
        res.json({ success: true, data: amlResult });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ AML –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ AML –ø—Ä–æ–≤–µ—Ä–∫–∏' });
    }
});

// API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
webhookApp.post('/api/create-order', async (req, res) => {
    try {
        console.log('üöÄ API CREATE-ORDER –í BOT.JS –ü–û–õ–£–ß–ò–õ:', req.body);
        
        const {
            userId,
            fromCurrency,
            toCurrency,
            fromAmount,
            toAmount,
            fromAddress,
            toAddress,
            amlResult,
            exchangeRate,
            fee,
            pairType
        } = req.body;

        // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const order = await db.createOrder({
            userId,
            fromCurrency,
            toCurrency,
            fromAmount,
            toAmount,
            fromAddress,
            toAddress,
            exchangeRate: exchangeRate || (toAmount / fromAmount),
            fee: fee || 0,
            amlStatus: amlResult?.status || 'clean',
            status: 'pending',
            source: 'web'
        });

        console.log('‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ bot.js:', order);

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await db.getUser(userId);
        const userName = user?.firstName || user?.username || `User_${userId}`;

        // –ü–†–ê–í–ò–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        await notifyOperators({
            id: order.id,
            userName: userName,
            fromAmount: order.fromAmount,
            fromCurrency: order.fromCurrency,
            toCurrency: order.toCurrency,
            fromAddress: order.fromAddress || '',
            toAddress: order.toAddress || '',
            amlFromResult: req.body.amlFromResult || { status: 'not_checked' },
            amlToResult: req.body.amlToResult || { status: 'not_checked' },
            pairType: pairType || 'fiat'
        });

        res.json({ success: true, data: order });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ bot.js:', error);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: ' + error.message });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
webhookApp.get('/api/history/:userId', async (req, res) => {
    try {
        const { userId } = req.params;
        const history = await db.getUserHistory(userId);
        
        res.json({ success: true, data: history });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', error);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏' });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
webhookApp.get('/api/profile/:userId', async (req, res) => {
    try {
        const { userId } = req.params;
        
        // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await db.getUser(userId);
        if (!user) {
            return res.status(404).json({ success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const stats = await db.getUserStats ? await db.getUserStats(userId) : {};
        const referralStats = await db.getReferralStats ? await db.getReferralStats(userId) : {};
        const achievements = await db.getUserAchievements ? await db.getUserAchievements(userId) : [];
        
        const profile = {
            ...user,
            stats,
            referralStats,
            achievements,
            avatar: `https://t.me/i/userpic/320/${user.username || user.telegram_id}.jpg`
        };
        
        res.json({ success: true, data: profile });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è' });
    }
});

// API –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π
webhookApp.get('/api/news', async (req, res) => {
    try {
        const news = [
            {
                id: 1,
                title: '–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!',
                description: '–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–º–µ–Ω–∞ –≤–∞–ª—é—Ç –¥–æ—Å—Ç—É–ø–Ω—ã',
                date: new Date().toISOString(),
                type: 'info'
            },
            {
                id: 2,
                title: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ',
                description: 'AML –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—â–∞–µ—Ç –≤–∞—à–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏',
                date: new Date(Date.now() - 86400000).toISOString(),
                type: 'security'
            }
        ];
        
        res.json({ success: true, data: news });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π:', error);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π' });
    }
});

// API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –° –£–í–ï–î–û–ú–õ–ï–ù–ò–ï–ú –ê–î–ú–ò–ù–û–í
webhookApp.post('/api/support-ticket', async (req, res) => {
    try {
        const { userId, source, subject, message, timestamp } = req.body;
        
        console.log(`üé´ –ù–û–í–´–ô –¢–ò–ö–ï–¢ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${subject}`);
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await db.getUser(userId);
        const userName = user?.first_name || user?.username || `ID: ${userId}`;
        
        // –°–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç –≤ –±–∞–∑–µ
        const ticketId = `TICKET-${Date.now()}`;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –ø–æ —Ç–µ–º–µ
        const getSubjectEmoji = (subject) => {
            const subjectLower = subject.toLowerCase();
            if (subjectLower.includes('–Ω–∞–ª–∏—á–Ω')) return 'üíµ';
            if (subjectLower.includes('aml')) return 'üõ°Ô∏è';
            if (subjectLower.includes('–∫–∞—Ä—Ç—ã')) return 'üí≥';
            if (subjectLower.includes('otc')) return 'üìà';
            return 'üÜò';
        };

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        const supportMessage = `${getSubjectEmoji(subject)} <b>${subject}</b>\n\n` +
            `üé´ ID: ${ticketId}\n` +
            `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userName}\n` +
            `‚è∞ –í—Ä–µ–º—è: ${new Date(timestamp).toLocaleString('ru-RU')}\n` +
            `üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${message}\n\n` +
            `‚û°Ô∏è –ü–∏—à–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: /user_${userId}`;

        // –ü–†–Ø–ú–û –û–¢–ü–†–ê–í–õ–Ø–ï–ú –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ê–î–ú–ò–ù–ê–ú
        try {
            const adminIds = await db.getAdminIds();
            console.log(`üìã –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${adminIds.length} –∞–¥–º–∏–Ω–∞–º`);
            
            for (const adminId of adminIds) {
                try {
                    await bot.api.sendMessage(adminId, supportMessage, { 
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: [[
                                { text: 'üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', url: `tg://user?id=${userId}` },
                                { text: '‚úÖ –ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç', callback_data: `close_ticket_${ticketId}` }
                            ]]
                        }
                    });
                    console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É ${adminId}`);
                } catch (sendError) {
                    console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ ${adminId}:`, sendError.message);
                }
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
        }
        
        res.json({ 
            success: true, 
            message: '–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
            data: { ticketId, timestamp, subject }
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:', error);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏' });
    }
});

// Webhook endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç Telegram
webhookApp.post('/webhook/telegram', async (req, res) => {
    try {
        console.log('üì® –ü–æ–ª—É—á–µ–Ω webhook –æ—Ç Telegram');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –µ—Å–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        if (!bot.botInfo) {
            await bot.init();
        }
        
        await bot.handleUpdate(req.body);
        res.sendStatus(200);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram webhook:', error);
        res.sendStatus(500);
    }
});

// Webhook endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
webhookApp.post('/webhook/support-ticket', async (req, res) => {
    try {
        const { ticketId, userId, userName, subject, message, timestamp } = req.body;
        
        console.log(`üì® –ü–æ–ª—É—á–µ–Ω webhook —Ç–∏–∫–µ—Ç–∞: ${ticketId} –æ—Ç ${userName}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
        const adminIds = await db.getAdminIds();
        
        for (const adminId of adminIds) {
            try {
                await bot.api.sendMessage(adminId, message, { 
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [[
                            { text: 'üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', url: `tg://user?id=${userId}` },
                            { text: '‚úÖ –ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç', callback_data: `close_ticket_${ticketId}` }
                        ]]
                    }
                });
                console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É ${adminId}`);
            } catch (sendError) {
                console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ ${adminId}:`, sendError.message);
            }
        }
        
        res.json({ success: true, message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook' });
    }
});

// –¢–ï–°–¢–û–í–´–ô ENDPOINT –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
webhookApp.post('/test/notify-operators', async (req, res) => {
    try {
        console.log('üß™ –¢–ï–°–¢ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –û–ü–ï–†–ê–¢–û–†–û–í');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–æ—Ç–∞
        if (!bot.botInfo) {
            console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞...');
            await bot.init();
        }
        console.log('‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', bot.botInfo?.username);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª
        const staff = await db.getStaffList();
        const operators = staff.filter(s => ['admin', 'operator'].includes(s.role));
        console.log(`üë• –ù–∞–π–¥–µ–Ω–æ ${operators.length} –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤:`, operators.map(o => o.telegram_id));
        
        // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
        const testOrderData = {
            id: 'TEST_' + Date.now(),
            userName: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            fromAmount: 500,
            fromCurrency: 'USDT',
            toCurrency: 'RUB',
            address: 'test_address_456',
            amlStatus: 'clean'
        };
        
        console.log('üìã –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞:', testOrderData);
        
        // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        await notifyOperators(testOrderData);
        console.log('‚úÖ –§—É–Ω–∫—Ü–∏—è notifyOperators –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
        
        res.json({ 
            success: true, 
            message: '–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω',
            operators: operators.length,
            testOrder: testOrderData
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
        res.status(500).json({ 
            success: false, 
            error: error.message,
            stack: error.stack
        });
    }
});

// –ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞
const port = process.env.WEBHOOK_PORT || 3001; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è webhook
webhookApp.listen(port, () => {
    console.log(`üîó Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
});

// –°–µ–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ (–û–¢–ö–õ–Æ–ß–ï–ù–ê –î–õ–Ø RAILWAY)
bot.command('phoenix_restart', async (ctx) => {
    const userId = ctx.from.id;
    console.log(`üîç Phoenix restart –∑–∞–ø—Ä–æ—Å –æ—Ç ${userId}`);
    
    try {
        const userRole = await db.getUserRole(userId);
        
        if (userRole !== 'admin') {
            await ctx.reply('üîí –ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
            return;
        }
        
        // –û–¢–ö–õ–Æ–ß–ï–ù–û –î–õ–Ø RAILWAY
        await ctx.reply(
            `‚ö†Ô∏è <b>–ö–û–ú–ê–ù–î–ê –û–¢–ö–õ–Æ–ß–ï–ù–ê</b>\n\n` +
            `üö´ Phoenix restart –æ—Ç–∫–ª—é—á–µ–Ω –Ω–∞ Railway\n` +
            `üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Railway dashboard –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞\n\n` +
            `üîó https://railway.app/dashboard`,
            { parse_mode: 'HTML' }
        );
        
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏ –¥–ª—è ${userId}:`, error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è Railway
bot.callbackQuery('confirm_restart', async (ctx) => {
    await ctx.answerCallbackQuery('–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è Railway');
});

bot.callbackQuery('cancel_restart', async (ctx) => {
    await ctx.answerCallbackQuery('–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è Railway');
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if (require.main === module) {
    (async () => {
        console.log('üöÄ ExMachinaX Bot –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google Sheets
        console.log('üîç –ù–ê–ß–ò–ù–ê–ï–ú –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Æ GOOGLE SHEETS...');
        try {
            await initGoogleSheets();
            console.log('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        } catch (initError) {
            console.error('‚ùå –û–®–ò–ë–ö–ê –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets:', initError.message);
            console.error('üìã Stack trace:', initError.stack);
        }
        
        // –í–†–ï–ú–ï–ù–ù–û: –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º polling —Ä–µ–∂–∏–º –ø–æ–∫–∞ –Ω–µ –∏—Å–ø—Ä–∞–≤–∏–º webhook
        console.log('üîÑ –ê–í–ê–†–ò–ô–ù–´–ô –†–ï–ñ–ò–ú: –ó–∞–ø—É—Å–∫ –≤ polling —Ä–µ–∂–∏–º–µ');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –≤ –±–∞–∑—É –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        try {
            const adminIds = [8141463258, 461759951, 280417617];
            for (const adminId of adminIds) {
                await db.addStaff(adminId, 'admin');
            }
            await db.addStaff(7692725312, 'operator');
            console.log('‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');
        } catch (error) {
            console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞:', error.message);
        }
        
        bot.start();
        
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, –∑–∞—Ç–µ–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Menu Button –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        setTimeout(async () => {
            await setupMenuButton();
            await sendStartupNotification();
        }, 2000);
    })();
} 