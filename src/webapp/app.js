// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let tg = window.Telegram?.WebApp;
let currentUserId = null;
let currentRates = [];
let fromCurrency = 'BTC';
let toCurrency = 'USDT';
let currentAMLResult = null;
let currentFromAMLResult = null;
let currentToAMLResult = null;
let currentCalculation = null;
let userProfile = null;
let charts = {};
let favoriteCurrencies = [];
let currentBank = null;
let currentNetwork = null;
let pendingCurrencySelection = null;

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏ –≤–∞–ª—é—Ç–∞–º–∏
function loadFavorites() {
    try {
        const saved = localStorage.getItem('favoriteCurrencies');
        favoriteCurrencies = saved ? JSON.parse(saved) : ['BTC', 'USDT', 'RUB'];
        console.log('‚úÖ –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –≤–∞–ª—é—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', favoriteCurrencies);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç:', error);
        favoriteCurrencies = ['BTC', 'USDT', 'RUB']; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
}

function saveFavorites() {
    try {
        localStorage.setItem('favoriteCurrencies', JSON.stringify(favoriteCurrencies));
        console.log('‚úÖ –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –≤–∞–ª—é—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', favoriteCurrencies);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç:', error);
    }
}

function toggleFavorite(currency) {
    const index = favoriteCurrencies.indexOf(currency);
    if (index === -1) {
        favoriteCurrencies.push(currency);
        showNotification(`${currency} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ‚≠êÔ∏è`, 'success');
    } else {
        favoriteCurrencies.splice(index, 1);
        showNotification(`${currency} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ`, 'info');
    }
    saveFavorites();
    updateCurrencyList(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
}

function isFavorite(currency) {
    return favoriteCurrencies.includes(currency);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    initTelegramWebApp();
    initEventListeners();
    loadFavorites(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –≤–∞–ª—é—Ç—ã
    loadInitialData();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
function initTelegramWebApp() {
    try {
        if (tg && typeof tg.ready === 'function') {
            tg.ready();
            
            // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ expand
            if (typeof tg.expand === 'function') {
                tg.expand();
            }
            
            // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–ª–∏ Telegram
            const urlParams = new URLSearchParams(window.location.search);
            currentUserId = urlParams.get('user') || tg.initDataUnsafe?.user?.id;
            
            // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
            if (tg.themeParams) {
                document.documentElement.style.setProperty('--tg-theme-bg-color', tg.themeParams.bg_color || '#F2F2F7');
                document.documentElement.style.setProperty('--tg-theme-text-color', tg.themeParams.text_color || '#000000');
                document.documentElement.style.setProperty('--tg-theme-hint-color', tg.themeParams.hint_color || '#8E8E93');
                document.documentElement.style.setProperty('--tg-theme-link-color', tg.themeParams.link_color || '#007AFF');
                document.documentElement.style.setProperty('--tg-theme-button-color', tg.themeParams.button_color || '#007AFF');
                document.documentElement.style.setProperty('--tg-theme-button-text-color', tg.themeParams.button_text_color || '#FFFFFF');
            }
            
            // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫ Telegram
            if (tg.MainButton && typeof tg.MainButton.hide === 'function') {
                tg.MainButton.hide();
            }
            if (tg.BackButton && typeof tg.BackButton.hide === 'function') {
                tg.BackButton.hide();
            }
            
            console.log('‚úÖ Telegram Web App –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
            console.log('üë§ User ID:', currentUserId);
            console.log('üë§ User data:', tg.initDataUnsafe?.user);
        } else {
            console.log('‚ö†Ô∏è Telegram Web App –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');
            const urlParams = new URLSearchParams(window.location.search);
            currentUserId = urlParams.get('user') || 123456789; // –¢–µ—Å—Ç–æ–≤—ã–π ID –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram Web App:', error);
        console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');
        const urlParams = new URLSearchParams(window.location.search);
        currentUserId = urlParams.get('user') || 123456789;
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ userId –µ—Å–ª–∏ –æ–Ω –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
    if (!currentUserId) {
        console.log('‚ö†Ô∏è userId –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π ID');
        currentUserId = 123456789; // –¢–µ—Å—Ç–æ–≤—ã–π ID –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    }
    
    console.log('üîë –§–∏–Ω–∞–ª—å–Ω—ã–π User ID:', currentUserId);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function initEventListeners() {
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    const navItems = document.querySelectorAll('.nav-item');
    navItems.forEach(item => {
        item.addEventListener('click', (e) => {
            e.preventDefault();
            const screen = item.dataset.screen;
            showScreen(screen);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
            navItems.forEach(nav => nav.classList.remove('active'));
            item.classList.add('active');
        });
    });

    // –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
    const fromAmountInput = document.getElementById('from-amount');
    const toAmountInput = document.getElementById('to-amount');
    
    fromAmountInput.addEventListener('input', calculateExchange);
    toAmountInput.addEventListener('input', reverseCalculateExchange);
    
    // –í—ã–±–æ—Ä –≤–∞–ª—é—Ç
    document.getElementById('from-currency').addEventListener('click', () => openCurrencyModal('from'));
    document.getElementById('to-currency').addEventListener('click', () => openCurrencyModal('to'));
    
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∞–ª—é—Ç
    document.getElementById('swap-currencies').addEventListener('click', swapCurrencies);
    
    // –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±–º–µ–Ω
    document.getElementById('continue-button').addEventListener('click', proceedToOrder);
    
    // AML –ø—Ä–æ–≤–µ—Ä–∫–∞
    document.getElementById('aml-check-button').addEventListener('click', performAMLCheck);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
    document.getElementById('create-order-button').addEventListener('click', createOrder);
    
    // –ü–æ–∏—Å–∫ –≤–∞–ª—é—Ç
    // –ü–æ–∏—Å–∫ –≤–∞–ª—é—Ç —É–¥–∞–ª–µ–Ω
    
    // –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
    document.getElementById('wallet-address').addEventListener('input', validateWalletAddress);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
    const themeSelect = document.getElementById('theme-select');
    const languageSelect = document.getElementById('language-select');
    
    if (themeSelect) {
        themeSelect.addEventListener('change', (e) => {
            applyTheme(e.target.value);
        });
    }
    
    if (languageSelect) {
        languageSelect.addEventListener('change', (e) => {
            applyLanguage(e.target.value);
        });
    }
    
    // –î–∞—à–±–æ—Ä–¥ - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤
    const chartPeriods = document.querySelectorAll('.chart-period');
    chartPeriods.forEach(button => {
        button.addEventListener('click', () => {
            chartPeriods.forEach(b => b.classList.remove('active'));
            button.classList.add('active');
            const period = button.dataset.period;
            loadDashboardData(period);
        });
    });
    
    // –ö–∞—Å—Ç–æ–º–Ω—ã–µ –¥—Ä–æ–ø–¥–∞—É–Ω—ã
    initCustomDropdowns();
    
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function loadInitialData() {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    showNotification('–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...', 'info');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ)
    try {
        await loadExchangeRates();
        console.log('‚úÖ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–æ–≤:', error);
        console.log('‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫—É—Ä—Å—ã');
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)
    if (currentUserId) {
        try {
            await loadUserProfile();
            console.log('‚úÖ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)
        try {
            await loadNews();
            console.log('‚úÖ –ù–æ–≤–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π:', error);
        }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Telegram
    try {
        updateProfileDisplay();
        console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
    try {
        calculateExchange();
        console.log('‚úÖ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞:', error);
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)
    setTimeout(() => {
        try {
            loadSavedSettings();
            console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
        }
    }, 500);
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —ç–∫—Ä–∞–Ω —á–µ—Ä–µ–∑ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    console.log('üé¨ –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —ç–∫—Ä–∞–Ω...');
    setTimeout(() => {
        const loadingScreen = document.getElementById('loading-screen');
        const app = document.getElementById('app');
        
        if (loadingScreen) {
            loadingScreen.style.opacity = '0';
            setTimeout(() => {
                loadingScreen.style.display = 'none';
                if (app) {
                    app.classList.remove('hidden');
                }
                console.log('üéâ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–æ!');
                showNotification('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!', 'success');
            }, 300);
        }
    }, 1200); // –°–æ–∫—Ä–∞—Ç–∏–ª–∏ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
async function loadExchangeRates() {
    try {
        const response = await fetch('/api/rates');
        const data = await response.json();
        
        if (data.success) {
            currentRates = data.data;
            updateCurrencyList();
            updateRatesTime();
            console.log('‚úÖ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', currentRates.length, '–≤–∞–ª—é—Ç');
        } else {
            throw new Error(data.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–æ–≤');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–æ–≤:', error);
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫—É—Ä—Å—ã
        currentRates = getTestRates();
        updateCurrencyList();
        updateRatesTime();
    }
}

// –¢–µ—Å—Ç–æ–≤—ã–µ –∫—É—Ä—Å—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
function getTestRates() {
    return [
        { currency: 'BTC', buy: 95000, sell: 96000, lastUpdate: new Date().toISOString(), type: 'crypto' },
        { currency: 'ETH', buy: 3500, sell: 3520, lastUpdate: new Date().toISOString(), type: 'crypto' },
        { currency: 'USDT', buy: 1.0, sell: 1.02, lastUpdate: new Date().toISOString(), type: 'crypto' },
        { currency: 'USDC', buy: 1.0, sell: 1.02, lastUpdate: new Date().toISOString(), type: 'crypto' },
        { currency: 'USD', buy: 1.0, sell: 1.0, lastUpdate: new Date().toISOString(), type: 'fiat' },
        { currency: 'EUR', buy: 0.92, sell: 0.94, lastUpdate: new Date().toISOString(), type: 'fiat' },
        { currency: 'RUB', buy: 0.0098, sell: 0.0102, lastUpdate: new Date().toISOString(), type: 'fiat' },
        { currency: 'ARS', buy: 0.00098, sell: 0.00102, lastUpdate: new Date().toISOString(), type: 'fiat' },
        { currency: 'BRL', buy: 0.194, sell: 0.206, lastUpdate: new Date().toISOString(), type: 'fiat' }
    ];
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∫—É—Ä—Å–æ–≤
function updateRatesTime() {
    const updateTime = document.getElementById('update-time');
    updateTime.textContent = new Date().toLocaleTimeString('ru-RU', { 
        hour: '2-digit', 
        minute: '2-digit' 
    });
}

// –†–∞—Å—á–µ—Ç –æ–±–º–µ–Ω–∞
function calculateExchange() {
    const fromAmount = parseFloat(document.getElementById('from-amount').value) || 0;
    
    if (fromAmount <= 0) {
        updateCalculationDisplay(0, 0, 0, 0);
        document.getElementById('continue-button').disabled = true;
        return;
    }
    
    const fromRate = currentRates.find(r => r.currency === fromCurrency);
    const toRate = currentRates.find(r => r.currency === toCurrency);
    
    if (!fromRate || !toRate) {
        console.error('‚ùå –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
    }
    
    // –†–∞—Å—á–µ—Ç –∫—É—Ä—Å–∞ –æ–±–º–µ–Ω–∞
    const exchangeRate = fromRate.sell / toRate.buy;
    const toAmount = fromAmount * exchangeRate;
    const fee = 0; // –ö–æ–º–∏—Å—Å–∏—è —É–±—Ä–∞–Ω–∞
    const finalAmount = toAmount;
    
    currentCalculation = {
        fromAmount,
        toAmount: finalAmount,
        exchangeRate,
        fee,
        fromCurrency,
        toCurrency
    };
    
    updateCalculationDisplay(fromAmount, finalAmount, exchangeRate, fee);
    document.getElementById('continue-button').disabled = false;
}

// –û–±—Ä–∞—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç –æ–±–º–µ–Ω–∞
function reverseCalculateExchange() {
    const toAmount = parseFloat(document.getElementById('to-amount').value) || 0;
    
    if (toAmount <= 0) {
        document.getElementById('from-amount').value = '';
        calculateExchange();
        return;
    }
    
    const fromRate = currentRates.find(r => r.currency === fromCurrency);
    const toRate = currentRates.find(r => r.currency === toCurrency);
    
    if (!fromRate || !toRate) {
        return;
    }
    
    const exchangeRate = fromRate.sell / toRate.buy;
    const fee = 0; // –ö–æ–º–∏—Å—Å–∏—è —É–±—Ä–∞–Ω–∞
    const grossAmount = toAmount; // –ë–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏
    const fromAmount = grossAmount / exchangeRate;
    
    document.getElementById('from-amount').value = fromAmount.toFixed(8);
    calculateExchange();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞
function updateCalculationDisplay(fromAmount, toAmount, exchangeRate, fee) {
    document.getElementById('to-amount').value = toAmount.toFixed(8);
    document.getElementById('exchange-rate').textContent = `1 ${fromCurrency} = ${exchangeRate.toFixed(2)} ${toCurrency}`;
    document.getElementById('final-amount').textContent = `${toAmount.toFixed(8)} ${toCurrency}`;
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∞–ª—é—Ç
function swapCurrencies() {
    const temp = fromCurrency;
    fromCurrency = toCurrency;
    toCurrency = temp;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤–∞–ª—é—Ç
    const fromButton = document.querySelector('#from-currency');
    const toButton = document.querySelector('#to-currency');
    
    fromButton.querySelector('.currency-name').textContent = fromCurrency;
    fromButton.querySelector('.currency-desc').textContent = getCurrencyName(fromCurrency);
    fromButton.querySelector('.currency-icon').textContent = getCurrencyIcon(fromCurrency);
    
    toButton.querySelector('.currency-name').textContent = toCurrency;
    toButton.querySelector('.currency-desc').textContent = getCurrencyName(toCurrency);
    toButton.querySelector('.currency-icon').textContent = getCurrencyIcon(toCurrency);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
    const swapButton = document.getElementById('swap-currencies');
    swapButton.style.transform = 'rotate(180deg)';
    setTimeout(() => {
        swapButton.style.transform = 'rotate(0deg)';
    }, 300);
    
    calculateExchange();
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã
let currentCurrencyType = 'from';

function openCurrencyModal(type) {
    currentCurrencyType = type;
    updateCurrencyList();
    document.getElementById('currency-modal').classList.add('active');
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∞ –≤–∞–ª—é—Ç
function closeCurrencyModal() {
    document.getElementById('currency-modal').classList.remove('active');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–∞–ª—é—Ç
function updateCurrencyList() {
    const currencyList = document.getElementById('currency-list');
    currencyList.innerHTML = '';
    
    // –†–∞–∑–¥–µ–ª—è–µ–º –≤–∞–ª—é—Ç—ã –Ω–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∏ –æ–±—ã—á–Ω—ã–µ
    const favorites = currentRates.filter(rate => isFavorite(rate.currency));
    const others = currentRates.filter(rate => !isFavorite(rate.currency));
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (favorites.length > 0) {
        const favoritesHeader = document.createElement('div');
        favoritesHeader.className = 'currency-section-header';
        favoritesHeader.innerHTML = `
            <h4><i class="fas fa-star" style="color: #FFD700;"></i> –ò–∑–±—Ä–∞–Ω–Ω—ã–µ</h4>
        `;
        currencyList.appendChild(favoritesHeader);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –≤–∞–ª—é—Ç—ã
        favorites.forEach(rate => {
            currencyList.appendChild(createCurrencyItem(rate, true));
        });
        
        // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        if (others.length > 0) {
            const separator = document.createElement('div');
            separator.className = 'currency-section-header';
            separator.innerHTML = `<h4><i class="fas fa-list"></i> –í—Å–µ –≤–∞–ª—é—Ç—ã</h4>`;
            currencyList.appendChild(separator);
        }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞–ª—é—Ç—ã
    others.forEach(rate => {
        currencyList.appendChild(createCurrencyItem(rate, false));
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤–∞–ª—é—Ç—ã
function createCurrencyItem(rate, isFav) {
    const item = document.createElement('div');
    item.className = 'currency-item';
    
    const changePercent = rate.change24h || 0;
    const changeClass = changePercent > 0 ? 'positive' : 'negative';
    const changeIcon = changePercent > 0 ? '+' : '';
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤–∞–ª—é—Ç—ã
    let priceDisplay;
    if (rate.type === 'fiat' && rate.currency !== 'USD') {
        priceDisplay = `$${rate.price.toFixed(4)}`;
    } else if (rate.price >= 1000) {
        priceDisplay = `$${rate.price.toLocaleString()}`;
    } else if (rate.price >= 1) {
        priceDisplay = `$${rate.price.toFixed(2)}`;
    } else {
        priceDisplay = `$${rate.price.toFixed(6)}`;
    }

    item.innerHTML = `
        <div class="currency-info" onclick="selectCurrency('${rate.currency}')">
            <div class="currency-icon">${rate.currency.substr(0, 2)}</div>
            <div class="currency-details">
                <h4>${rate.currency}</h4>
                <p>${getCurrencyName(rate.currency)}</p>
            </div>
        </div>
        <div class="currency-actions">
            <div class="currency-rate">
                <div class="currency-price">${priceDisplay}</div>
                <div class="currency-change ${changeClass}">${changeIcon}${Math.abs(changePercent).toFixed(1)}%</div>
            </div>
            <button class="favorite-btn ${isFav ? 'active' : ''}" onclick="toggleFavorite('${rate.currency}')" title="${isFav ? '–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ' : '–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'}">
                <i class="fas fa-star"></i>
            </button>
        </div>
    `;
    
    return item;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã
function getCurrencyName(currency) {
    const names = {
        'BTC': 'Bitcoin',
        'ETH': 'Ethereum',
        'USDT': 'Tether',
        'USDC': 'USD Coin',
        'BNB': 'Binance Coin',
        'SOL': 'Solana',
        'ADA': 'Cardano',
        'DOT': 'Polkadot',
        'MATIC': 'Polygon',
        'AVAX': 'Avalanche',
        'USD': 'US Dollar',
        'EUR': 'Euro',
        'RUB': 'Russian Ruble',
        'UAH': 'Ukrainian Hryvnia',
        'KZT': 'Kazakhstani Tenge',
        'ARS': 'Argentine Peso',
        'BRL': 'Brazilian Real'
    };
    return names[currency] || currency;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –≤–∞–ª—é—Ç—ã
function getCurrencyIcon(currency) {
    const icons = {
        'BTC': '‚Çø',
        'ETH': '‚ü†',
        'USDT': 'üíµ',
        'USDC': 'üíµ',
        'BNB': 'üü°',
        'SOL': '‚òÄÔ∏è',
        'ADA': 'üî∑',
        'DOT': '‚ö´',
        'MATIC': 'üü£',
        'AVAX': 'üèîÔ∏è',
        'USD': 'üíµ',
        'EUR': 'üí∂',
        'RUB': '‚ÇΩ',
        'UAH': '‚Ç¥',
        'KZT': '‚Ç∏',
        'ARS': 'üí∞',
        'BRL': 'üí∞'
    };
    return icons[currency] || 'ü™ô';
}

// –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã
function selectCurrency(currency) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –≤–∞–ª—é—Ç—ã –∏ –≤–∞–ª—é—Ç—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    pendingCurrencySelection = {
        type: currentCurrencyType,
        currency: currency
    };
    
    // –ï—Å–ª–∏ —ç—Ç–æ —Ä—É–±–ª–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –±–∞–Ω–∫–∞
    if (currency === 'RUB') {
        closeCurrencyModal();
        openBankModal();
        return;
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ USDT - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å–µ—Ç–∏
    if (currency === 'USDT') {
        closeCurrencyModal();
        openNetworkModal();
        return;
    }
    
    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤–∞–ª—é—Ç - –æ–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞
    finalizeCurrencySelection(currency);
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã
function finalizeCurrencySelection(currency, additionalInfo = null) {
    const currencyType = pendingCurrencySelection?.type || currentCurrencyType;
    
    if (currencyType === 'from') {
        fromCurrency = currency;
        let displayText = currency;
        let desc = getCurrencyName(currency);
        if (additionalInfo) {
            displayText += ` (${additionalInfo})`;
            desc = additionalInfo;
        }
        
        const button = document.querySelector('#from-currency');
        button.querySelector('.currency-name').textContent = displayText;
        button.querySelector('.currency-desc').textContent = desc;
        button.querySelector('.currency-icon').textContent = getCurrencyIcon(currency);
    } else {
        toCurrency = currency;
        let displayText = currency;
        let desc = getCurrencyName(currency);
        if (additionalInfo) {
            displayText += ` (${additionalInfo})`;
            desc = additionalInfo;
        }
        
        const button = document.querySelector('#to-currency');
        button.querySelector('.currency-name').textContent = displayText;
        button.querySelector('.currency-desc').textContent = desc;
        button.querySelector('.currency-icon').textContent = getCurrencyIcon(currency);
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    pendingCurrencySelection = null;
    
    closeCurrencyModal();
    calculateExchange();
}

// –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –±–∞–Ω–∫–æ–≤
function openBankModal() {
    document.getElementById('bank-modal').style.display = 'flex';
    document.body.style.overflow = 'hidden';
}

function closeBankModal() {
    document.getElementById('bank-modal').style.display = 'none';
    document.body.style.overflow = 'auto';
}

function selectBank(bank) {
    currentBank = bank;
    finalizeCurrencySelection('RUB', bank);
    closeBankModal();
}

// –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ —Å–µ—Ç–µ–π
function openNetworkModal() {
    document.getElementById('network-modal').style.display = 'flex';
    document.body.style.overflow = 'hidden';
}

function closeNetworkModal() {
    document.getElementById('network-modal').style.display = 'none';
    document.body.style.overflow = 'auto';
}

function selectNetwork(network) {
    currentNetwork = network;
    finalizeCurrencySelection('USDT', network);
    closeNetworkModal();
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–∞–ª—é—Ç
// –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤–∞–ª—é—Ç —É–¥–∞–ª–µ–Ω–∞

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–π
function isCryptoPair(fromCurrency, toCurrency) {
    const cryptoCurrencies = ['BTC', 'ETH', 'USDT', 'BNB', 'ADA', 'DOT', 'XRP', 'LTC', 'BCH', 'LINK'];
    return cryptoCurrencies.includes(fromCurrency) && cryptoCurrencies.includes(toCurrency);
}

// –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞—è–≤–∫–∏
function proceedToOrder() {
    if (!currentCalculation) {
        showNotification('–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ–±–º–µ–Ω–∞', 'warning');
        return;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
    const isCrypto = isCryptoPair(currentCalculation.fromCurrency, currentCalculation.toCurrency);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–∞—Ä—ã
    updateOrderInterfaceForPairType(isCrypto);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –∑–∞—è–≤–∫–∏
    updateOrderSummary();
    showScreen('order-screen');
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    document.getElementById('wallet-address').value = '';
    document.getElementById('aml-result').innerHTML = '';
    document.getElementById('create-order-button').disabled = true; // –ü–æ–∫–∞ –Ω–µ –≤–≤–µ–¥–µ–Ω –∞–¥—Ä–µ—Å
    currentAMLResult = null;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
function updateOrderInterfaceForPairType(isCrypto) {
    const addressLabel = document.querySelector('label[for="wallet-address"]');
    const addressInput = document.getElementById('wallet-address');
    const amlSection = document.getElementById('aml-section');
    const inputHelp = document.querySelector('.input-help');
    
    if (isCrypto) {
        // –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –∞–¥—Ä–µ—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        if (addressLabel) addressLabel.textContent = '–ê–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–æ–≤';
        if (addressInput) addressInput.placeholder = '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è';
        if (amlSection) {
            amlSection.style.display = 'block';
            // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ –ø–æ–ª–µ –¥–ª—è –∞–¥—Ä–µ—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
            if (!document.getElementById('from-address-input')) {
                const fromAddressDiv = document.createElement('div');
                fromAddressDiv.className = 'address-input';
                fromAddressDiv.innerHTML = `
                    <label for="from-wallet-address">–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏</label>
                    <div class="input-group">
                        <input type="text" id="from-wallet-address" placeholder="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∫–∏">
                        <button class="scan-button" onclick="scanQR('from')">
                            <i class="fas fa-qrcode"></i>
                        </button>
                    </div>
                    <div class="input-help">
                        –ê–¥—Ä–µ—Å —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –±—É–¥–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞
                    </div>
                `;
                fromAddressDiv.id = 'from-address-input';
                amlSection.parentNode.insertBefore(fromAddressDiv, amlSection);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º AML —Å–µ–∫—Ü–∏—é –¥–ª—è –¥–≤—É—Ö –∞–¥—Ä–µ—Å–æ–≤
            amlSection.innerHTML = `
                <div class="aml-checks">
                    <h4>–ü—Ä–æ–≤–µ—Ä–∫–∞ AML</h4>
                    <button class="secondary-button" id="aml-check-from-button" disabled>
                        <i class="fas fa-shield-alt"></i>
                        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∫–∏
                    </button>
                    <div class="aml-result" id="aml-from-result"></div>
                    
                    <button class="secondary-button" id="aml-check-to-button" disabled>
                        <i class="fas fa-shield-alt"></i>
                        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω–∏—è
                    </button>
                    <div class="aml-result" id="aml-to-result"></div>
                </div>
            `;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
            setTimeout(() => {
                const fromButton = document.getElementById('aml-check-from-button');
                const toButton = document.getElementById('aml-check-to-button');
                const fromInput = document.getElementById('from-wallet-address');
                const toInput = document.getElementById('wallet-address');
                
                if (fromButton) fromButton.addEventListener('click', () => performAMLCheck('from'));
                if (toButton) toButton.addEventListener('click', () => performAMLCheck('to'));
                
                if (fromInput) fromInput.addEventListener('input', () => validateCryptoAddresses());
                if (toInput) toInput.addEventListener('input', () => validateCryptoAddresses());
            }, 100);
        }
        if (inputHelp) inputHelp.textContent = '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–æ–≤ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π';
    } else {
        // –§–∏–∞—Ç–Ω–∞—è –ø–∞—Ä–∞
        // –£–¥–∞–ª—è–µ–º –ø–æ–ª–µ –∞–¥—Ä–µ—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        const fromAddressDiv = document.getElementById('from-address-input');
        if (fromAddressDiv) fromAddressDiv.remove();
        
        if (addressLabel) addressLabel.textContent = '–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞ (CVU/Alias)';
        if (addressInput) addressInput.placeholder = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞';
        if (amlSection) {
            amlSection.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º AML –¥–ª—è —Ñ–∏–∞—Ç–Ω—ã—Ö –ø–∞—Ä
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É AML
            amlSection.innerHTML = `
                <button class="secondary-button" id="aml-check-button">
                    <i class="fas fa-shield-alt"></i>
                    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å AML
                </button>
                <div class="aml-result" id="aml-result"></div>
            `;
        }
        if (inputHelp) inputHelp.textContent = '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Å—á–µ—Ç–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π';
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –∑–∞—è–≤–∫–∏
function updateOrderSummary() {
    const summary = document.getElementById('order-summary');
    const isCrypto = isCryptoPair(currentCalculation.fromCurrency, currentCalculation.toCurrency);
    
    let addressSection = '';
    
    if (isCrypto) {
        // –î–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–∞ –∞–¥—Ä–µ—Å–∞
        const fromAddress = document.getElementById('from-wallet-address')?.value?.trim() || '';
        const toAddress = document.getElementById('wallet-address')?.value?.trim() || '';
        
        if (fromAddress || toAddress) {
            addressSection = `
                <div class="info-section">
                    <h4>üéØ –ê–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–æ–≤</h4>
                    ${fromAddress ? createCopyableElement(fromAddress, '–ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∫–∏', 'üì§') : ''}
                    ${toAddress ? createCopyableElement(toAddress, '–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω–∏—è', 'üì•') : ''}
                </div>
            `;
        }
    } else {
        // –î–ª—è —Ñ–∏–∞—Ç–Ω—ã—Ö –ø–∞—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞
        const account = document.getElementById('wallet-address')?.value?.trim() || '';
        
        if (account) {
            addressSection = `
                <div class="info-section">
                    <h4>üè¶ –ù–æ–º–µ—Ä —Å—á–µ—Ç–∞</h4>
                    ${createCopyableElement(account, 'CVU/Alias', 'üí≥')}
                </div>
            `;
        }
    }
    
    summary.innerHTML = `
        <h3>–°–≤–æ–¥–∫–∞ –æ–±–º–µ–Ω–∞</h3>
        <div class="info-row">
            <span>–û—Ç–¥–∞–µ—Ç–µ</span>
            <span><strong>${currentCalculation.fromAmount} ${currentCalculation.fromCurrency}</strong></span>
        </div>
        <div class="info-row">
            <span>–ü–æ–ª—É—á–∞–µ—Ç–µ</span>
            <span><strong>${currentCalculation.toAmount.toFixed(8)} ${currentCalculation.toCurrency}</strong></span>
        </div>
        <div class="info-row">
            <span>–ö—É—Ä—Å –æ–±–º–µ–Ω–∞</span>
            <span>1 ${currentCalculation.fromCurrency} = ${currentCalculation.exchangeRate.toFixed(2)} ${currentCalculation.toCurrency}</span>
        </div>
        ${addressSection}
    `;
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞ (—Å—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
function validateWalletAddress() {
    const isCrypto = currentCalculation && isCryptoPair(currentCalculation.fromCurrency, currentCalculation.toCurrency);
    
    if (isCrypto) {
        validateCryptoAddresses();
    } else {
        validateFiatAccount();
    }
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ (–¥–≤–∞ –∞–¥—Ä–µ—Å–∞)
function validateCryptoAddresses() {
    const fromAddress = document.getElementById('from-wallet-address')?.value?.trim() || '';
    const toAddress = document.getElementById('wallet-address')?.value?.trim() || '';
    
    const fromButton = document.getElementById('aml-check-from-button');
    const toButton = document.getElementById('aml-check-to-button');
    const createButton = document.getElementById('create-order-button');
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
    if (fromButton) {
        fromButton.disabled = fromAddress.length <= 20;
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—É—á–µ–Ω–∏—è
    if (toButton) {
        toButton.disabled = toAddress.length <= 20;
    }
    
    // –†–∞–∑—Ä–µ—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –µ—Å–ª–∏ –æ–±–∞ –∞–¥—Ä–µ—Å–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
    if (createButton) {
        createButton.disabled = !(fromAddress.length > 20 && toAddress.length > 20);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –∑–∞–∫–∞–∑–∞
    if (currentCalculation) {
        updateOrderSummary();
    }
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∏–∞—Ç–Ω–æ–≥–æ —Å—á–µ—Ç–∞
function validateFiatAccount() {
    const account = document.getElementById('wallet-address').value.trim();
    const createButton = document.getElementById('create-order-button');
    
    if (createButton) {
        // –î–ª—è —Ñ–∏–∞—Ç–Ω—ã—Ö –ø–∞—Ä —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞
        createButton.disabled = account.length <= 5; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Å—á–µ—Ç–∞
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –∑–∞–∫–∞–∑–∞
    if (currentCalculation) {
        updateOrderSummary();
    }
}

// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ AML –ø—Ä–æ–≤–µ—Ä–∫–∏
async function performAMLCheck(addressType = 'to') {
    const addressInput = addressType === 'from' ? 
        document.getElementById('from-wallet-address') : 
        document.getElementById('wallet-address');
    
    const address = addressInput?.value?.trim();
    
    if (!address) {
        showNotification(`–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å ${addressType === 'from' ? '–æ—Ç–ø—Ä–∞–≤–∫–∏' : '–ø–æ–ª—É—á–µ–Ω–∏—è'}`, 'warning');
        return;
    }
    
    const amlButton = addressType === 'from' ? 
        document.getElementById('aml-check-from-button') : 
        document.getElementById('aml-check-to-button');
    
    const amlResult = addressType === 'from' ? 
        document.getElementById('aml-from-result') : 
        document.getElementById('aml-to-result');
    
    if (!amlButton || !amlResult) {
        // Fallback –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        return performOldAMLCheck();
    }
    
    amlButton.disabled = true;
    amlButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> –ü—Ä–æ–≤–µ—Ä—è–µ–º...';
    
    try {
        const response = await fetch('/api/aml-check', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                address: address,
                currency: addressType === 'from' ? currentCalculation.fromCurrency : currentCalculation.toCurrency,
                type: addressType
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            const amlResult = data.data;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç AML
            if (addressType === 'from') {
                currentFromAMLResult = amlResult;
            } else {
                currentToAMLResult = amlResult;
            }
            
            displayAMLResult(amlResult, addressType);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º AML —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–¥–º–∏–Ω–∞–º –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ "approved"
            if (amlResult.status !== 'approved') {
                sendAMLAlertToAdmins(address, amlResult, addressType);
            }
        } else {
            throw new Error(data.error || '–û—à–∏–±–∫–∞ AML –ø—Ä–æ–≤–µ—Ä–∫–∏');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ AML –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ AML. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', 'error');
        
        const resultDiv = addressType === 'from' ? 
            document.getElementById('aml-from-result') : 
            document.getElementById('aml-to-result');
        
        if (resultDiv) {
            resultDiv.innerHTML = `
                <div class="aml-result error">
                    <i class="fas fa-exclamation-triangle"></i>
                    –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.
                </div>
            `;
        }
    } finally {
        const button = addressType === 'from' ? 
            document.getElementById('aml-check-from-button') : 
            document.getElementById('aml-check-to-button');
        
        if (button) {
            button.disabled = false;
            button.innerHTML = `<i class="fas fa-shield-alt"></i> –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–¥—Ä–µ—Å ${addressType === 'from' ? '–æ—Ç–ø—Ä–∞–≤–∫–∏' : '–ø–æ–ª—É—á–µ–Ω–∏—è'}`;
        }
    }
}

// –°—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è AML –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
async function performOldAMLCheck() {
    const address = document.getElementById('wallet-address').value.trim();
    
    if (!address) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞', 'warning');
        return;
    }
    
    const amlButton = document.getElementById('aml-check-button');
    const amlResult = document.getElementById('aml-result');
    
    if (!amlButton || !amlResult) return;
    
    amlButton.disabled = true;
    amlButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> –ü—Ä–æ–≤–µ—Ä—è–µ–º...';
    
    try {
        const response = await fetch('/api/aml-check', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                address: address,
                currency: currentCalculation.toCurrency
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            currentAMLResult = data.data;
            displayAMLResult(currentAMLResult);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º AML —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–¥–º–∏–Ω–∞–º –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ "approved"
            if (currentAMLResult.status !== 'approved') {
                sendAMLAlertToAdmins(address, currentAMLResult);
            }
        } else {
            throw new Error(data.error || '–û—à–∏–±–∫–∞ AML –ø—Ä–æ–≤–µ—Ä–∫–∏');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ AML –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ AML. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', 'error');
        
        amlResult.innerHTML = `
            <div class="aml-result error">
                <i class="fas fa-exclamation-triangle"></i>
                –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.
            </div>
        `;
    } finally {
        amlButton.disabled = false;
        amlButton.innerHTML = '<i class="fas fa-shield-alt"></i> –ü—Ä–æ–≤–µ—Ä–∏—Ç—å AML';
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ AML
function displayAMLResult(result, addressType = 'to') {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç AML –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
    if (addressType === 'from') {
        currentFromAMLResult = result;
    } else if (addressType === 'to') {
        currentToAMLResult = result;
    } else {
        // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
        currentAMLResult = result;
    }
    
    const amlResultId = addressType === 'from' ? 'aml-from-result' : 
                       addressType === 'to' ? 'aml-to-result' : 'aml-result';
    const amlResult = document.getElementById(amlResultId);
    
    if (!amlResult) return; // –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
    
    let resultClass = 'success';
    let icon = 'fas fa-check-circle';
    let message = `–ê–¥—Ä–µ—Å ${addressType === 'from' ? '–æ—Ç–ø—Ä–∞–≤–∫–∏' : '–ø–æ–ª—É—á–µ–Ω–∏—è'} –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É`;
    
    if (result.status === 'rejected') {
        resultClass = 'warning'; // –ò–∑–º–µ–Ω–∏–ª —Å error –Ω–∞ warning
        icon = 'fas fa-exclamation-triangle';
        message = `–ê–¥—Ä–µ—Å ${addressType === 'from' ? '–æ—Ç–ø—Ä–∞–≤–∫–∏' : '–ø–æ–ª—É—á–µ–Ω–∏—è'} —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è (–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å)`;
    } else if (result.status === 'manual_review') {
        resultClass = 'warning';
        icon = 'fas fa-exclamation-triangle';
        message = `–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞ ${addressType === 'from' ? '–æ—Ç–ø—Ä–∞–≤–∫–∏' : '–ø–æ–ª—É—á–µ–Ω–∏—è'} (–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å)`;
    }

    // –î–ª—è –∫—Ä–∏–ø—Ç–æ–ø–∞—Ä –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ –∞–¥—Ä–µ—Å–∞ –ø–µ—Ä–µ–¥ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
    const createButton = document.getElementById('create-order-button');
    if (createButton && currentCalculation) {
        const isCrypto = isCryptoPair(currentCalculation.fromCurrency, currentCalculation.toCurrency);
        if (isCrypto) {
            // –†–∞–∑—Ä–µ—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–±–∞ –∞–¥—Ä–µ—Å–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
            const fromAddress = document.getElementById('from-wallet-address')?.value?.trim() || '';
            const toAddress = document.getElementById('wallet-address')?.value?.trim() || '';
            createButton.disabled = !(fromAddress.length > 20 && toAddress.length > 20);
        } else {
            // –î–ª—è —Ñ–∏–∞—Ç–Ω—ã—Ö –ø–∞—Ä –∫–∞–∫ —Ä–∞–Ω—å—à–µ
            createButton.disabled = false;
        }
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
    if (result.detailedReport && result.connections) {
        const majorConnections = result.connections.filter(c => c.percent >= 1.0);
        const minorConnections = result.connections.filter(c => c.percent < 1.0);
        
        let majorConnectionsHtml = majorConnections.map(conn => {
            const riskClass = conn.risk === 'high' ? 'high-risk' : conn.risk === 'medium' ? 'medium-risk' : 'low-risk';
            return `<div class="connection-item ${riskClass}">
                        <span class="connection-name">‚Ä¢ ${conn.name}</span>
                        <span class="connection-percent">${conn.percent}%</span>
                    </div>`;
        }).join('');

        let minorConnectionsHtml = '';
        if (minorConnections.length > 0) {
            const minorList = minorConnections.map(conn => conn.name).join(', ');
            minorConnectionsHtml = `
                <div class="minor-connections">
                    <p class="minor-header">–ú–µ–Ω–µ–µ 1.0%:</p>
                    <p class="minor-list">${minorList}</p>
                </div>
            `;
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –¥–ª—è —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
        let riskColor = '#10B981'; // –∑–µ–ª–µ–Ω—ã–π
        let riskIcon = 'üü¢';
        if (result.score > 80) {
            riskColor = '#EF4444'; // –∫—Ä–∞—Å–Ω—ã–π
            riskIcon = 'üî¥';
        } else if (result.score > 50) {
            riskColor = '#F59E0B'; // –∂–µ–ª—Ç—ã–π
            riskIcon = 'üü°';
        }

        amlResult.innerHTML = `
            <div class="aml-detailed-result ${resultClass}">
                <div class="aml-header">
                    <i class="${icon}"></i>
                    <strong>${message}</strong>
                </div>
                
                <div class="aml-detailed-report">
                    <div class="address-info">
                        ${createCopyableElement(result.address || 'N/A', 'üîµ –ê–¥—Ä–µ—Å', 'üìç')}
                    </div>
                    
                    <div class="blockchain-info">
                        ‚õìÔ∏è <strong>–ë–ª–æ–∫—á–µ–π–Ω:</strong> ${result.blockchain || 'Unknown'}
                    </div>
                    
                    <div class="connections-section">
                        <h4>–°–≤—è–∑–∏ –∞–¥—Ä–µ—Å–∞:</h4>
                        <div class="connections-list">
                            ${majorConnectionsHtml}
                        </div>
                        ${minorConnectionsHtml}
                    </div>
                    
                    <div class="risk-summary" style="border-left: 4px solid ${riskColor};">
                        üìà <strong>–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:</strong> 
                        <span style="color: ${riskColor};">${result.score > 80 ? '–í—ã—Å–æ–∫–∏–π' : result.score > 50 ? '–°—Ä–µ–¥–Ω–∏–π' : '–ù–∏–∑–∫–∏–π'} (${result.score}%) ${riskIcon}</span>
                    </div>
                </div>
            </div>
        `;
    } else {
        // –ü—Ä–æ—Å—Ç–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        amlResult.innerHTML = `
            <div class="aml-result ${resultClass}">
                <i class="${icon}"></i>
                <strong>${message}</strong>
                <p>–†–∏—Å–∫: ${result.risk} (${result.score}/100)</p>
                ${result.reasons.length > 0 ? `<p>–ü—Ä–∏—á–∏–Ω—ã: ${result.reasons.join(', ')}</p>` : ''}
            </div>
        `;
    }
    
    if (result.status === 'rejected') {
        amlResult.innerHTML += `
            <div style="margin-top: 15px;">
                <button class="secondary-button" onclick="contactOperator()">
                    <i class="fas fa-phone"></i> –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
                </button>
            </div>
        `;
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
async function createOrder() {
    if (!currentCalculation) {
        showNotification('–°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –æ–±–º–µ–Ω', 'warning');
        return;
    }
    
    const address = document.getElementById('wallet-address').value.trim();
    
    if (!address) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞', 'warning');
        return;
    }
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ userId –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
    if (!currentUserId) {
        console.log('‚ö†Ô∏è currentUserId –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π');
        currentUserId = 123456789;
    }
    
    console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å userId:', currentUserId);
    
    const createButton = document.getElementById('create-order-button');
    createButton.disabled = true;
    createButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É...';
    
    try {
        const isCrypto = isCryptoPair(currentCalculation.fromCurrency, currentCalculation.toCurrency);
        
        let orderData;
        
        if (isCrypto) {
            // –î–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä
            const fromAddress = document.getElementById('from-wallet-address')?.value?.trim() || '';
            
            if (!fromAddress) {
                showNotification('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∫–∏', 'warning');
                return;
            }
            
            orderData = {
                userId: currentUserId,
                fromCurrency: currentCalculation.fromCurrency,
                toCurrency: currentCalculation.toCurrency,
                fromAmount: currentCalculation.fromAmount,
                toAmount: currentCalculation.toAmount,
                fromAddress: fromAddress,
                toAddress: address,
                exchangeRate: currentCalculation.exchangeRate,
                fee: currentCalculation.fee,
                amlFromResult: currentFromAMLResult || { status: 'not_checked', risk: 'unknown' },
                amlToResult: currentToAMLResult || { status: 'not_checked', risk: 'unknown' },
                pairType: 'crypto'
            };
        } else {
            // –î–ª—è —Ñ–∏–∞—Ç–Ω—ã—Ö –ø–∞—Ä
            orderData = {
                userId: currentUserId,
                fromCurrency: currentCalculation.fromCurrency,
                toCurrency: currentCalculation.toCurrency,
                fromAmount: currentCalculation.fromAmount,
                toAmount: currentCalculation.toAmount,
                fromAddress: '', // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
                toAddress: address, // –ù–æ–º–µ—Ä —Å—á–µ—Ç–∞ –¥–ª—è —Ñ–∏–∞—Ç–Ω—ã—Ö –ø–∞—Ä
                exchangeRate: currentCalculation.exchangeRate,
                fee: currentCalculation.fee,
                pairType: 'fiat'
            };
        }
        
        console.log('üìã –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:', orderData);
        
        const response = await fetch('/api/create-order', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(orderData)
        });
        
        console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status, response.statusText);
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const data = await response.json();
        console.log('üìã –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', data);
        
        if (data.success) {
            console.log('‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:', data.data);
            showNotification(`–ó–∞—è–≤–∫–∞ #${data.data.id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!`, 'success');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
            try {
                if (tg && typeof tg.showAlert === 'function') {
                    tg.showAlert(`–ó–∞—è–≤–∫–∞ #${data.data.id} —Å–æ–∑–¥–∞–Ω–∞!\n\n–û–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.`);
                } else {
                    // –ï—Å–ª–∏ –Ω–µ—Ç Telegram, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    alert(`–ó–∞—è–≤–∫–∞ #${data.data.id} —Å–æ–∑–¥–∞–Ω–∞!\n\n–û–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.`);
                }
            } catch (alertError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', alertError);
                // Fallback —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                alert(`–ó–∞—è–≤–∫–∞ #${data.data.id} —Å–æ–∑–¥–∞–Ω–∞!\n\n–û–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.`);
            }
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
            setTimeout(() => {
                showScreen('calculator-screen');
                const navItem = document.querySelector('.nav-item[data-screen="calculator-screen"]');
                if (navItem) navItem.click();
                
                // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
                const fromAmountInput = document.getElementById('from-amount');
                const toAmountInput = document.getElementById('to-amount');
                if (fromAmountInput) fromAmountInput.value = '';
                if (toAmountInput) toAmountInput.value = '';
                calculateExchange();
            }, 2000);
            
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);
            throw new Error(data.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:', error);
        showNotification('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', 'error');
    } finally {
        createButton.disabled = false;
        createButton.innerHTML = '<i class="fas fa-check"></i> –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É';
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function loadUserProfile() {
    try {
        const response = await fetch(`/api/profile/${currentUserId}`);
        const data = await response.json();
        
        if (data.success) {
            userProfile = data.data;
            console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω');
        } else {
            console.log('‚ÑπÔ∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
        console.log('‚ÑπÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
function updateProfileDisplay() {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram WebApp API
    const telegramUser = tg?.initDataUnsafe?.user;
    
    // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–∞–Ω–Ω—ã–º –∏–∑ Telegram)
    const firstName = telegramUser?.first_name || userProfile?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    const lastName = telegramUser?.last_name || userProfile?.last_name || '';
    const fullName = `${firstName} ${lastName}`.trim();
    const username = telegramUser?.username || userProfile?.username || currentUserId;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å (–µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
    const profileName = document.getElementById('profile-name');
    const profileUsername = document.getElementById('profile-username');
    
    if (profileName) profileName.textContent = fullName;
    if (profileUsername) profileUsername.textContent = `@${username}`;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
    const headerUserName = document.getElementById('header-user-name');
    if (headerUserName) {
        headerUserName.textContent = firstName; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
    }
    
    // –ê–≤–∞—Ç–∞—Ä (–µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ –≤ Telegram, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ)
    const avatarImg = document.getElementById('avatar-image');
    if (avatarImg) {
        if (telegramUser?.photo_url) {
            console.log('üñºÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤–∞—Ç–∞—Ä –∏–∑ Telegram:', telegramUser.photo_url);
            avatarImg.src = telegramUser.photo_url;
        } else if (userProfile?.avatar) {
            console.log('üñºÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤–∞—Ç–∞—Ä –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è:', userProfile.avatar);
            avatarImg.src = userProfile.avatar;
        } else {
            console.log('üñºÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤–∞—Ç–∞—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
            // –°–æ–∑–¥–∞–µ–º –∞–≤–∞—Ç–∞—Ä —Å –∏–Ω–∏—Ü–∏–∞–ª–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            canvas.width = 100;
            canvas.height = 100;
            
            // –§–æ–Ω –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
            const gradient = ctx.createLinearGradient(0, 0, 100, 100);
            gradient.addColorStop(0, '#007AFF');
            gradient.addColorStop(1, '#5856D6');
            
            ctx.fillStyle = gradient;
            ctx.fillRect(0, 0, 100, 100);
            
            // –ò–Ω–∏—Ü–∏–∞–ª—ã
            ctx.fillStyle = 'white';
            ctx.font = 'bold 40px Arial';
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            
            const initials = firstName.charAt(0) + (lastName ? lastName.charAt(0) : '');
            ctx.fillText(initials.toUpperCase(), 50, 50);
            
            avatarImg.src = canvas.toDataURL();
        }
        
        avatarImg.onerror = () => {
            console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞, —Å–æ–∑–¥–∞–µ–º –∞–≤–∞—Ç–∞—Ä —Å –∏–Ω–∏—Ü–∏–∞–ª–∞–º–∏');
            // –°–æ–∑–¥–∞–µ–º –∞–≤–∞—Ç–∞—Ä —Å –∏–Ω–∏—Ü–∏–∞–ª–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            canvas.width = 100;
            canvas.height = 100;
            
            ctx.fillStyle = '#6B7280';
            ctx.fillRect(0, 0, 100, 100);
            
            ctx.fillStyle = 'white';
            ctx.font = 'bold 40px Arial';
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            
            const initials = firstName.charAt(0) + (lastName ? lastName.charAt(0) : '');
            ctx.fillText(initials.toUpperCase(), 50, 50);
            
            avatarImg.src = canvas.toDataURL();
        };
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ (–µ—Å–ª–∏ userProfile –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
    if (userProfile) {
        const stats = userProfile.stats || {};
        const profileOrders = document.getElementById('profile-orders');
        const profileVolume = document.getElementById('profile-volume');
        
        if (profileOrders) profileOrders.textContent = stats.ordersCount || 0;
        if (profileVolume) profileVolume.textContent = `$${formatNumber(stats.totalVolume || 0)}`;
    }
    
    // –£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, –¥–∞–∂–µ –¥–ª—è –Ω–æ–≤—ã—Ö)
    const stats = userProfile?.stats || { ordersCount: 0, totalVolume: 0 };
    let level = userProfile?.level;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞ - –µ—Å–ª–∏ –∞–¥–º–∏–Ω, —Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ê–î–ú–ò–ù
    if (userProfile?.role === 'admin') {
        level = {
            level: '–ê–î–ú–ò–ù',
            name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
            color: '#FF3B30',
            benefits: ['–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ', '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞']
        };
        console.log('üë®‚Äçüíº –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', currentUserId);
    } else if (!level) {
        // –ï—Å–ª–∏ –Ω–µ—Ç —É—Ä–æ–≤–Ω—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–∏—á–∫–∞
        level = { 
            level: 'NEWBIE', 
            name: '–ù–æ–≤–∏—á–æ–∫', 
            color: '#6B7280',
            benefits: ['–î–æ—Å—Ç—É–ø –∫ –±–∞–∑–æ–≤—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º', '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7']
        };
        console.log('üë∂ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Ä–æ–≤–µ–Ω—å –Ω–æ–≤–∏—á–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', currentUserId);
    }
    
    updateLevelDisplay(level, stats);
    
    // –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å userProfile)
    if (userProfile) {
        const referralStats = userProfile.referralStats || {};
        const referralCount = document.getElementById('referral-count');
        const referralEarnings = document.getElementById('referral-earnings');
        
        if (referralCount) referralCount.textContent = referralStats.total_referrals || 0;
        if (referralEarnings) referralEarnings.textContent = `$${formatNumber(referralStats.total_commission || 0)}`;
    }
    
    // –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ (–≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å currentUserId)
    if (currentUserId) {
        const referralLinkInput = document.getElementById('referral-link-input');
        if (referralLinkInput) {
            const botUsername = 'swapcoon_bot'; // –ò–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ env
            const referralLink = `https://t.me/${botUsername}?start=${currentUserId}`;
            referralLinkInput.value = referralLink;
        }
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
function updateLevelDisplay(level, stats) {
    console.log('üìä –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è:', level, stats);
    
    // –í –ø—Ä–æ—Ñ–∏–ª–µ (–µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
    
    const currentLevelEl = document.getElementById('current-level');
    if (currentLevelEl) {
        currentLevelEl.innerHTML = `
            <span class="level-badge" style="background: ${level.color}">${level.level}</span>
            <span class="level-name">${level.name}</span>
        `;
    }
    
    // –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    const progress = calculateLevelProgress(level.level, stats);
    
    const progressFill = document.getElementById('level-progress-fill');
    if (progressFill) {
        progressFill.style.width = `${progress.percentage}%`;
    }
    
    const progressDesc = document.getElementById('progress-description');
    if (progressDesc) {
        progressDesc.textContent = progress.description;
    }
    
    const profileProgress = document.getElementById('profile-level-progress');
    if (profileProgress) {
        profileProgress.textContent = `${progress.percentage}%`;
    }
    
    // –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
    const nextLevelEl = document.getElementById('next-level');
    if (nextLevelEl) {
        nextLevelEl.innerHTML = `<span>–°–ª–µ–¥—É—é—â–∏–π: ${progress.nextLevel}</span>`;
    }
    
    // –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
    const benefits = level.benefits || ['–î–æ—Å—Ç—É–ø –∫ –±–∞–∑–æ–≤—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º', '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7'];
    const benefitsList = benefits.map(benefit => `<li>${benefit}</li>`).join('');
    const levelBenefits = document.getElementById('level-benefits');
    if (levelBenefits) {
        levelBenefits.innerHTML = `
            <h4>–í–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</h4>
            <ul>${benefitsList}</ul>
        `;
    }
}

// –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É—Ä–æ–≤–Ω—è
function calculateLevelProgress(currentLevel, stats) {
    const ordersCount = stats.ordersCount || 0;
    const totalVolume = stats.totalVolume || 0;
    
    let nextLevel, requirement, current, target, percentage, description;
    
    switch (currentLevel) {
        case 'NEWBIE':
            nextLevel = '–¢–†–ï–ô–î–ï–†';
            requirement = '–æ–±–º–µ–Ω–æ–≤';
            current = ordersCount;
            target = 5;
            break;
        case 'TRADER':
            nextLevel = '–ü–†–û';
            requirement = '–æ–±–º–µ–Ω–æ–≤';
            current = ordersCount;
            target = 25;
            break;
        case 'PRO':
            nextLevel = 'VIP';
            requirement = '–æ–±–º–µ–Ω–æ–≤';
            current = ordersCount;
            target = 100;
            break;
        case '–ê–î–ú–ò–ù':
            nextLevel = '–ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†';
            requirement = '';
            current = target = 1;
            break;
        default:
            nextLevel = '–ú–ê–ö–°–ò–ú–£–ú';
            requirement = '';
            current = target = 1;
    }
    
    percentage = Math.min(100, Math.round((current / target) * 100));
    
    if (currentLevel === '–ê–î–ú–ò–ù') {
        description = '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏!';
    } else {
        description = target > current ? 
            `–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: ${target - current} ${requirement}` : 
            '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!';
    }
    
    return { percentage, description, nextLevel };
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞
async function loadDashboardData(period = '7d') {
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const statsResponse = await fetch(`/api/stats/${currentUserId}?period=${period}`);
        const statsData = await statsResponse.json();
        
        if (statsData.success) {
            updateDashboardMetrics(statsData.data.summary);
            updateCharts(statsData.data.charts);
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const marketResponse = await fetch('/api/market-data');
        const marketData = await marketResponse.json();
        
        if (marketData.success) {
            updateMarketData(marketData.data);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –¥–∞—à–±–æ—Ä–¥–∞
function updateDashboardMetrics(summary) {
    document.getElementById('total-volume').textContent = `$${formatNumber(summary.totalVolume || 0)}`;
    document.getElementById('total-orders').textContent = summary.totalOrders || 0;
    document.getElementById('total-fees').textContent = `$${formatNumber(summary.totalFees || 0)}`;
    
    if (userProfile?.referralStats) {
        document.getElementById('referral-earnings').textContent = `$${formatNumber(userProfile.referralStats.total_commission || 0)}`;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
function updateCharts(chartsData) {
    // –ì—Ä–∞—Ñ–∏–∫ –æ–±—ä–µ–º–∞
    updateChart('volume-chart', {
        type: 'line',
        data: {
            labels: chartsData.volume.labels,
            datasets: [{
                label: '–û–±—ä–µ–º ($)',
                data: chartsData.volume.data,
                borderColor: '#007AFF',
                backgroundColor: 'rgba(0, 122, 255, 0.1)',
                fill: true,
                tension: 0.4
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: { display: false }
            },
            scales: {
                y: { beginAtZero: true }
            }
        }
    });
    
    // –ì—Ä–∞—Ñ–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
    updateChart('orders-chart', {
        type: 'bar',
        data: {
            labels: chartsData.orders.labels,
            datasets: [{
                label: '–û–ø–µ—Ä–∞—Ü–∏–∏',
                data: chartsData.orders.data,
                backgroundColor: 'rgba(0, 122, 255, 0.8)',
                borderColor: '#007AFF',
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: { display: false }
            },
            scales: {
                y: { beginAtZero: true }
            }
        }
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
function updateChart(canvasId, config) {
    const ctx = document.getElementById(canvasId);
    if (!ctx) return;
    
    // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≥—Ä–∞—Ñ–∏–∫
    if (charts[canvasId]) {
        charts[canvasId].destroy();
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫
    charts[canvasId] = new Chart(ctx, config);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function updateMarketData(marketData) {
    const marketGrid = document.getElementById('market-data');
    if (!marketGrid || !marketData.trends) return;
    
    marketGrid.innerHTML = marketData.trends.map(trend => `
        <div class="market-item">
            <div>
                <div class="market-currency">${trend.currency}</div>
                <div class="market-price">${trend.price}</div>
            </div>
            <div class="market-change ${trend.change24h.startsWith('+') ? 'positive' : 'negative'}">
                ${trend.change24h}
            </div>
        </div>
    `).join('');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
async function loadAchievements() {
    try {
        const response = await fetch(`/api/achievements/${currentUserId}`);
        const data = await response.json();
        
        if (data.success) {
            updateAchievementsDisplay(data.data);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function updateAchievementsDisplay(achievementsData) {
    const earned = achievementsData.earned || [];
    const available = achievementsData.available || [];
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    document.getElementById('earned-achievements').textContent = earned.length;
    document.getElementById('total-achievements').textContent = available.length;
    const progress = available.length > 0 ? Math.round((earned.length / available.length) * 100) : 0;
    document.getElementById('achievement-progress').textContent = `${progress}%`;
    
    // –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    const achievementsGrid = document.getElementById('achievements-grid');
    if (!achievementsGrid) return;
    
    const earnedIds = earned.map(a => a.achievement_id);
    
    achievementsGrid.innerHTML = available.map(achievement => {
        const isEarned = earnedIds.includes(achievement.id);
        return `
            <div class="achievement-card ${isEarned ? 'earned' : 'locked'}">
                ${isEarned ? '<div class="achievement-earned-badge">‚úì</div>' : ''}
                <div class="achievement-icon">${achievement.icon}</div>
                <div class="achievement-name">${achievement.name}</div>
                <div class="achievement-description">${achievement.description}</div>
                <div class="achievement-reward">${achievement.reward}</div>
            </div>
        `;
    }).join('');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
async function loadNews() {
    try {
        const response = await fetch('/api/news');
        const data = await response.json();
        
        if (data.success) {
            updateNewsDisplay(data.data);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
function updateNewsDisplay(news) {
    const newsList = document.getElementById('news-list');
    if (!newsList || !news.length) return;
    
    newsList.innerHTML = news.map(item => `
        <div class="news-item">
            <div class="news-header">
                <div>
                    <div class="news-title">${item.title}</div>
                    <div class="news-description">${item.description}</div>
                </div>
                <div class="news-type ${item.type}">${item.type}</div>
            </div>
            <div class="news-date">${formatDate(item.date)}</div>
        </div>
    `).join('');
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
async function saveSettings() {
    try {
        const settings = {
            notifications_enabled: document.getElementById('notifications-enabled').checked,
            language: document.getElementById('language-select').value,
            theme: document.getElementById('theme-select').value,
            currency_preference: document.getElementById('currency-preference').value,
            privacy_level: document.getElementById('privacy-level').value,
            two_fa_enabled: document.getElementById('two-fa-enabled').checked
        };
        
        const response = await fetch(`/api/profile/${currentUserId}/settings`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(settings)
        });
        
        const data = await response.json();
        
        if (data.success) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ
            localStorage.setItem('userSettings', JSON.stringify(settings));
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            applyTheme(settings.theme);
            applyLanguage(settings.language);
            
            showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!', 'success');
        } else {
            throw new Error(data.error);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
        showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫', 'error');
    }
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã
function applyTheme(theme) {
    const root = document.documentElement;
    
    console.log(`üé® –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã: ${theme}`);
    
    if (theme === 'dark') {
        // –¢–µ–º–Ω–∞—è —Ç–µ–º–∞
        root.style.setProperty('--background-color', '#000000');
        root.style.setProperty('--surface-color', '#1C1C1E');
        root.style.setProperty('--text-primary', '#FFFFFF');
        root.style.setProperty('--text-secondary', '#8E8E93');
        root.style.setProperty('--text-tertiary', '#48484A');
        root.style.setProperty('--border-color', '#38383A');
        
        document.body.classList.add('dark-theme');
    } else if (theme === 'light') {
        // –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞
        root.style.setProperty('--background-color', '#F2F2F7');
        root.style.setProperty('--surface-color', '#FFFFFF');
        root.style.setProperty('--text-primary', '#000000');
        root.style.setProperty('--text-secondary', '#8E8E93');
        root.style.setProperty('--text-tertiary', '#C7C7CC');
        root.style.setProperty('--border-color', '#E5E5EA');
        
        document.body.classList.remove('dark-theme');
    } else {
        // –ê–≤—Ç–æ —Ç–µ–º–∞ (—Å–ª–µ–¥—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–π)
        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        applyTheme(prefersDark ? 'dark' : 'light');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ Telegram WebApp
    if (tg) {
        try {
            if (tg && typeof tg.setHeaderColor === 'function') {
                tg.setHeaderColor(theme === 'dark' ? '#1C1C1E' : '#007AFF');
            }
            if (tg && typeof tg.setBackgroundColor === 'function') {
                tg.setBackgroundColor(theme === 'dark' ? '#000000' : '#F2F2F7');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–≤–µ—Ç–æ–≤ Telegram:', error);
        }
    }
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞
function applyLanguage(language) {
    console.log(`üåê –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞: ${language}`);
    
    if (language === 'en') {
        // –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã
        updateText('–ì–ª–∞–≤–Ω–∞—è', 'Main');
        updateText('–î–∞—à–±–æ—Ä–¥', 'Dashboard');
        updateText('–ò—Å—Ç–æ—Ä–∏—è', 'History');
        updateText('–ü—Ä–æ—Ñ–∏–ª—å', 'Profile');
        updateText('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'Settings');
        updateText('–û–±–º–µ–Ω –≤–∞–ª—é—Ç', 'Currency Exchange');
        updateText('–°—É–º–º–∞', 'Amount');
        updateText('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', 'Continue');
        updateText('–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', 'Create Order');
        updateText('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', 'Save Settings');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
        const amountInput = document.getElementById('from-amount');
        if (amountInput) amountInput.placeholder = 'Enter amount';
        
    } else {
        // –†—É—Å—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        updateText('Main', '–ì–ª–∞–≤–Ω–∞—è');
        updateText('Dashboard', '–î–∞—à–±–æ—Ä–¥');
        updateText('History', '–ò—Å—Ç–æ—Ä–∏—è');
        updateText('Profile', '–ü—Ä–æ—Ñ–∏–ª—å');
        updateText('Settings', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏');
        updateText('Currency Exchange', '–û–±–º–µ–Ω –≤–∞–ª—é—Ç');
        updateText('Amount', '–°—É–º–º–∞');
        updateText('Continue', '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å');
        updateText('Create Order', '–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É');
        updateText('Save Settings', '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
        
        const amountInput = document.getElementById('from-amount');
        if (amountInput) amountInput.placeholder = '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É';
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
function updateText(oldText, newText) {
    const elements = document.querySelectorAll('*');
    elements.forEach(element => {
        if (element.children.length === 0 && element.textContent.trim() === oldText) {
            element.textContent = newText;
        }
    });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
function loadSavedSettings() {
    try {
        const savedSettings = localStorage.getItem('userSettings');
        if (savedSettings) {
            const settings = JSON.parse(savedSettings);
            console.log('üìã –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', settings);
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ
            if (settings.theme) {
                const themeSelect = document.getElementById('theme-select');
                if (themeSelect) {
                    themeSelect.value = settings.theme;
                }
                applyTheme(settings.theme);
            }
            
            if (settings.language) {
                const languageSelect = document.getElementById('language-select');
                if (languageSelect) {
                    languageSelect.value = settings.language;
                }
                applyLanguage(settings.language);
            }
            
            if (settings.notifications_enabled !== undefined) {
                const notificationsToggle = document.getElementById('notifications-enabled');
                if (notificationsToggle) {
                    notificationsToggle.checked = settings.notifications_enabled;
                }
            }
            
            if (settings.currency_preference) {
                const currencySelect = document.getElementById('currency-preference');
                if (currencySelect) {
                    currencySelect.value = settings.currency_preference;
                }
            }
            
            if (settings.privacy_level) {
                const privacySelect = document.getElementById('privacy-level');
                if (privacySelect) {
                    privacySelect.value = settings.privacy_level;
                }
            }
            
            if (settings.two_fa_enabled !== undefined) {
                const twoFaToggle = document.getElementById('two-fa-enabled');
                if (twoFaToggle) {
                    twoFaToggle.checked = settings.two_fa_enabled;
                }
            }
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
function exportData() {
    if (tg) {
        try {
            if (tg && typeof tg.showAlert === 'function') {
                tg.showAlert('–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!');
            } else {
                alert('–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
            alert('–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!');
        }
    } else {
        alert('–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!');
    }
}

// –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø
function copyToClipboard(text, successMessage = '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!') {
    if (navigator.clipboard) {
        navigator.clipboard.writeText(text).then(() => {
            showNotification(successMessage, 'success');
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –≤–∏–±—Ä–∞—Ü–∏–∏ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
            if (navigator.vibrate) {
                navigator.vibrate(50);
            }
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è Telegram WebApp
            if (tg && typeof tg.HapticFeedback === 'object') {
                tg.HapticFeedback.notificationOccurred('success');
            }
        }).catch(err => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
            fallbackCopy(text, successMessage);
        });
    } else {
        fallbackCopy(text, successMessage);
    }
}

// –†–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
function fallbackCopy(text, successMessage) {
    const textArea = document.createElement('textarea');
    textArea.value = text;
    textArea.style.position = 'fixed';
    textArea.style.left = '-999999px';
    textArea.style.top = '-999999px';
    document.body.appendChild(textArea);
    textArea.focus();
    textArea.select();
    
    try {
        document.execCommand('copy');
        showNotification(successMessage, 'success');
        
        if (navigator.vibrate) {
            navigator.vibrate(50);
        }
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
        showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å', 'error');
    }
    
    document.body.removeChild(textArea);
}

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)
function copyReferralLink() {
    const linkInput = document.getElementById('referral-link-input');
    if (linkInput && linkInput.value) {
        copyToClipboard(linkInput.value, 'üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!');
    }
}

// –°–û–ó–î–ê–ù–ò–ï –ö–û–ü–ò–†–£–ï–ú–û–ì–û –≠–õ–ï–ú–ï–ù–¢–ê –° –ö–ù–û–ü–ö–û–ô
function createCopyableElement(text, label = '', icon = 'üìã') {
    return `
        <div class="copyable-item">
            <div class="copyable-content">
                ${label ? `<span class="copyable-label">${label}:</span>` : ''}
                <code class="copyable-text" onclick="copyToClipboard('${text}', '${icon} ${label || '–î–∞–Ω–Ω—ã–µ'} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã!')">${text}</code>
            </div>
            <button class="copy-btn" onclick="copyToClipboard('${text}', '${icon} ${label || '–î–∞–Ω–Ω—ã–µ'} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã!')" title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å">
                <i class="fas fa-copy"></i>
            </button>
        </div>
    `;
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
let currentStatusFilter = '';
let currentPeriodFilter = 'all';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –¥—Ä–æ–ø–¥–∞—É–Ω–æ–≤
function initCustomDropdowns() {
    const dropdowns = document.querySelectorAll('.custom-dropdown');
    
    dropdowns.forEach(dropdown => {
        const trigger = dropdown.querySelector('.dropdown-trigger');
        const items = dropdown.querySelectorAll('.dropdown-item');
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const firstItem = items[0];
        if (firstItem) {
            firstItem.classList.add('selected');
        }
        
        // –ö–ª–∏–∫ –ø–æ —Ç—Ä–∏–≥–≥–µ—Ä—É
        trigger.addEventListener('click', (e) => {
            e.stopPropagation();
            closeAllDropdowns();
            dropdown.classList.toggle('active');
        });
        
        // –ö–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É
        items.forEach(item => {
            item.addEventListener('click', (e) => {
                e.stopPropagation();
                selectDropdownItem(dropdown, item);
                dropdown.classList.remove('active');
            });
        });
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –¥—Ä–æ–ø–¥–∞—É–Ω–∞
    document.addEventListener('click', closeAllDropdowns);
}

// –í—ã–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ –¥—Ä–æ–ø–¥–∞—É–Ω–∞
function selectDropdownItem(dropdown, selectedItem) {
    const trigger = dropdown.querySelector('.dropdown-trigger');
    const valueSpan = trigger.querySelector('.dropdown-value');
    const items = dropdown.querySelectorAll('.dropdown-item');
    
    // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    items.forEach(item => item.classList.remove('selected'));
    
    // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
    selectedItem.classList.add('selected');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ —Ç—Ä–∏–≥–≥–µ—Ä–µ
    const newText = selectedItem.querySelector('span').textContent;
    valueSpan.textContent = newText;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
    const value = selectedItem.dataset.value;
    if (dropdown.id === 'status-dropdown') {
        currentStatusFilter = value;
    } else if (dropdown.id === 'period-dropdown') {
        currentPeriodFilter = value;
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
    filterHistory();
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –¥—Ä–æ–ø–¥–∞—É–Ω–æ–≤
function closeAllDropdowns() {
    const dropdowns = document.querySelectorAll('.custom-dropdown');
    dropdowns.forEach(dropdown => {
        dropdown.classList.remove('active');
    });
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏
function filterHistory() {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    console.log('–§–∏–ª—å—Ç—Ä—ã –∏—Å—Ç–æ—Ä–∏–∏:', { 
        status: currentStatusFilter, 
        period: currentPeriodFilter 
    });
    loadHistory();
}



// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–æ–≤ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
function showScreen(screenId) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
    const screens = document.querySelectorAll('.screen');
    screens.forEach(screen => screen.classList.remove('active'));
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —ç–∫—Ä–∞–Ω
    const targetScreen = document.getElementById(screenId);
    if (targetScreen) {
        targetScreen.classList.add('active');
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–∫—Ä–æ–ª–ª –∫ –Ω–∞—á–∞–ª—É —ç–∫—Ä–∞–Ω–∞
        setTimeout(() => {
            targetScreen.scrollTop = 0;
            // –¢–∞–∫–∂–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–∫—Ä–æ–ª–ª –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            const mainContent = document.querySelector('.main-content');
            if (mainContent) {
                mainContent.scrollTop = 0;
            }
            // –ò —Å–∫—Ä–æ–ª–ª –≤—Å–µ–≥–æ –æ–∫–Ω–∞
            window.scrollTo(0, 0);
        }, 10);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —ç–∫—Ä–∞–Ω–æ–≤
        if (screenId === 'history-screen') {
            loadHistory();
        } else if (screenId === 'profile-screen' && currentUserId) {
            loadUserProfile();
        } else if (screenId === 'dashboard-screen') {
            loadDashboardData();
        } else if (screenId === 'achievements-screen') {
            loadAchievements();
        } else if (screenId === 'browser-screen') {
            loadNews();
        }
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function formatNumber(num) {
    if (num >= 1000000) {
        return (num / 1000000).toFixed(1) + 'M';
    } else if (num >= 1000) {
        return (num / 1000).toFixed(1) + 'K';
    }
    return num.toFixed(2);
}

function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', {
        day: 'numeric',
        month: 'short',
        hour: '2-digit',
        minute: '2-digit'
    });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
async function loadHistory() {
    if (!currentUserId) return;
    
    try {
        const response = await fetch(`/api/history/${currentUserId}`);
        const data = await response.json();
        
        if (data.success) {
            displayHistory(data.data);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
        displayHistory([]);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
function displayHistory(history) {
    const historyContent = document.getElementById('history-content');
    
    if (history.length === 0) {
        historyContent.innerHTML = `
            <div class="coming-soon">
                <i class="fas fa-history"></i>
                <h3>–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞</h3>
                <p>–í–∞—à–∏ –æ–±–º–µ–Ω—ã –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å</p>
            </div>
        `;
        return;
    }
    
    historyContent.innerHTML = history.map(order => `
        <div class="history-item">
            <div class="history-header">
                <div class="history-pair">${order.from_currency} ‚Üí ${order.to_currency}</div>
                <div class="history-date">${new Date(order.created_at_local).toLocaleDateString('ru-RU')}</div>
            </div>
            <div class="history-details">
                <div class="history-detail">
                    <span>–û—Ç–¥–∞–ª:</span>
                    <span>${order.from_amount} ${order.from_currency}</span>
                </div>
                <div class="history-detail">
                    <span>–ü–æ–ª—É—á–∏–ª:</span>
                    <span>${order.to_amount} ${order.to_currency}</span>
                </div>
                <div class="history-detail">
                    <span>–ö—É—Ä—Å:</span>
                    <span>${order.exchange_rate?.toFixed(4) || 'N/A'}</span>
                </div>
            </div>
            <div class="history-status ${order.status}">
                ${getStatusText(order.status)}
            </div>
        </div>
    `).join('');
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
function getStatusText(status) {
    const statuses = {
        'pending': '–û–∂–∏–¥–∞–µ—Ç',
        'processing': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
        'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω',
        'failed': '–û—Ç–∫–ª–æ–Ω–µ–Ω',
        'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
    };
    return statuses[status] || status;
}

// –°–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º (–æ–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
function contactOperator() {
    createSupportTicket('–ü–æ–º–æ—â—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å —á–µ—Ä–µ–∑ WebApp');
}

// –û–±–º–µ–Ω –Ω–∞–ª–∏—á–Ω—ã—Ö
function requestCashExchange() {
    createSupportTicket('–û–±–º–µ–Ω –Ω–∞–ª–∏—á–Ω—ã—Ö', '–ó–∞—è–≤–∫–∞ –Ω–∞ –æ–±–º–µ–Ω —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –¥–µ–Ω–µ–≥ –≤ –æ—Ñ–∏—Å–∞—Ö. –ö–ª–∏–µ–Ω—Ç –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è –æ–±–º–µ–Ω–æ–º –Ω–∞–ª–∏—á–Ω—ã—Ö –≤–∞–ª—é—Ç.');
}

// –û–±–º–µ–Ω –±–µ–∑ AML
function requestNoAMLExchange() {
    createSupportTicket('–û–±–º–µ–Ω –±–µ–∑ AML', '–ó–∞—è–≤–∫–∞ –Ω–∞ –±—ã—Å—Ç—Ä—ã–π –æ–±–º–µ–Ω –±–µ–∑ AML –ø—Ä–æ–≤–µ—Ä–∫–∏. –ö–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–±–º–µ–Ω –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥—Ä–µ—Å–æ–≤.');
}

// –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã
function requestBankCards() {
    createSupportTicket('–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã', '–ó–∞—è–≤–∫–∞ –Ω–∞ –æ–±–º–µ–Ω —Å –±–∞–Ω–∫–æ–≤—Å–∫–∏–º–∏ –∫–∞—Ä—Ç–∞–º–∏. –ö–ª–∏–µ–Ω—Ç –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∏–ª–∏ –≤—ã–≤–æ–¥–æ–º —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã.');
}

// OTC —Ç–æ—Ä–≥–æ–≤–ª—è
function requestOTCTrading() {
    createSupportTicket('OTC —Ç–æ—Ä–≥–æ–≤–ª—è', '–ó–∞—è–≤–∫–∞ –Ω–∞ OTC —Ç–æ—Ä–≥–æ–≤–ª—é –±–æ–ª—å—à–∏–º–∏ –æ–±—ä–µ–º–∞–º–∏. –ö–ª–∏–µ–Ω—Ç –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è –æ–±–º–µ–Ω–æ–º –∫—Ä—É–ø–Ω—ã—Ö —Å—É–º–º —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏.');
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ AML —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º
async function sendAMLAlertToAdmins(address, amlResult, addressType = 'to') {
    try {
        if (!currentUserId) return;
        
        const riskLevel = amlResult.status === 'rejected' ? '–í–´–°–û–ö–ò–ô' : '–°–†–ï–î–ù–ò–ô';
        const addressTypeText = addressType === 'from' ? '–æ—Ç–ø—Ä–∞–≤–∫–∏' : '–ø–æ–ª—É—á–µ–Ω–∏—è';
        const subject = `üõ°Ô∏è AML –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï - ${riskLevel} –†–ò–°–ö (${addressTypeText.toUpperCase()})`;
        const message = `–ê–¥—Ä–µ—Å ${addressTypeText}: ${address}\n–°—Ç–∞—Ç—É—Å: ${amlResult.status}\n–†–∏—Å–∫: ${amlResult.risk}\n–û—Ü–µ–Ω–∫–∞: ${amlResult.score}/100\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${currentUserId}`;
        
        await createSupportTicket(subject, message);
        console.log(`üì® AML —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥—Ä–µ—Å–∞ ${addressTypeText} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∞–º`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ AML —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å —Ç–µ–º–æ–π
async function createSupportTicket(subject = '–ü–æ–º–æ—â—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞', message = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å —á–µ—Ä–µ–∑ WebApp') {
    try {
        if (!currentUserId) {
            showNotification('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω', 'error');
            return;
        }
        
        showNotification('–°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É...', 'info');
        
        const response = await fetch('/api/support-ticket', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                userId: currentUserId,
                source: tg ? 'webapp_telegram' : 'webapp_browser',
                subject: subject,
                message: message,
                timestamp: new Date().toISOString()
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            showNotification('–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.', 'success');
            console.log('‚úÖ –¢–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–æ–∑–¥–∞–Ω:', data.data);
        } else {
            throw new Error(data.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:', error);
        showNotification('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏. –ü–∏—à–∏—Ç–µ @SwapCoonSupport', 'error');
        
        // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º—Å—è –∫ —Å—Ç–∞—Ä–æ–º—É —Å–ø–æ—Å–æ–±—É
        if (window && window.open) {
            setTimeout(() => {
                window.open('https://t.me/SwapCoonSupport', '_blank');
            }, 1000);
        }
    }
}

// –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR –∫–æ–¥–∞
function scanQR(addressType = 'to') {
    try {
        if (tg && typeof tg.showScanQrPopup === 'function') {
            const text = addressType === 'from' ? 
                '–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥ –∞–¥—Ä–µ—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏' : 
                '–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥ –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—É—á–µ–Ω–∏—è';
                
            tg.showScanQrPopup({
                text: text
            }, (result) => {
                const inputId = addressType === 'from' ? 'from-wallet-address' : 'wallet-address';
                const input = document.getElementById(inputId);
                
                if (input) {
                    input.value = result;
                    validateWalletAddress();
                    showNotification('QR –∫–æ–¥ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω!', 'success');
                }
                
                if (typeof tg.closeScanQrPopup === 'function') {
                    tg.closeScanQrPopup();
                }
            });
        } else {
            showNotification('–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ', 'warning');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR:', error);
        showNotification('–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR', 'error');
    }
}

// –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'info') {
    const notifications = document.getElementById('notifications');
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    
    notifications.appendChild(notification);
    
    // –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    setTimeout(() => {
        notification.style.opacity = '0';
        notification.style.transform = 'translateY(-100%)';
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }, 4000);
    
    console.log(`üì¢ ${type.toUpperCase()}: ${message}`);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
setInterval(() => {
    loadExchangeRates();
}, 30000);

console.log('‚úÖ SwapCoon App –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!'); 