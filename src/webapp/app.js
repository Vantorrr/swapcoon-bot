console.log("üöÄ APP.JS –ó–ê–ì–†–£–ñ–ê–ï–¢–°–Ø!");

// ‚ö° –°–í–ï–†–•–ë–´–°–¢–†–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –ö–£–†–°–û–í (–î–û DOM!)
console.log("‚ö° –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫—É—Ä—Å–æ–≤ —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∫—Ä–∏–ø—Ç–∞!");

// –§—É–Ω–∫—Ü–∏—è —Ä–∞–Ω–Ω–µ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –∫–µ—à–∞
function loadCachedRatesEarly() {
    try {
        const cachedRates = localStorage.getItem('cachedRates');
        const cacheTime = localStorage.getItem('ratesCacheTime');
        
        if (cachedRates && cacheTime) {
            const cacheAge = Date.now() - parseInt(cacheTime);
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à –µ—Å–ª–∏ –æ–Ω —Å–≤–µ–∂–µ–µ 2 –º–∏–Ω—É—Ç
            if (cacheAge < 120000) {
                console.log('‚ö° –ú–ì–ù–û–í–ï–ù–ù–û –∑–∞–≥—Ä—É–∂–∞–µ–º –∫—É—Ä—Å—ã –∏–∑ –∫–µ—à–∞!');
                const cached = JSON.parse(cachedRates);
                currentRates = cached.rates || [];
                window.rawPairData = cached.rawPairs || [];
                console.log('‚úÖ –ö—É—Ä—Å—ã –∏–∑ –∫–µ—à–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–æ DOM!', currentRates.length, '–≤–∞–ª—é—Ç');
                return true;
            }
        }
    } catch (error) {
        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞–Ω–Ω–µ–≥–æ –∫–µ—à–∞:', error.message);
    }
    return false;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–Ω–Ω—é—é –∑–∞–≥—Ä—É–∑–∫—É —Å—Ä–∞–∑—É!
loadCachedRatesEarly();

let earlyRatesPromise = null;

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let tg = window.Telegram?.WebApp;
let currentUserId = null;
let currentUserData = null; // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
let currentRates = [];
let fromCurrency = null; // –£–±–∏—Ä–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ BTC
let toCurrency = null; // –£–±–∏—Ä–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ USDT
let currentAMLResult = null;
let currentFromAMLResult = null;
let currentToAMLResult = null;
let currentCalculation = null;
let userProfile = null;
let charts = {};
let favoriteCurrencies = [];
let currentBank = null;
let currentNetwork = null;
let pendingCurrencySelection = null;

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏ –≤–∞–ª—é—Ç–∞–º–∏
function loadFavorites() {
    if (!currentUserId) {
        favoriteCurrencies = ['BTC', 'USDT', 'RUB'];
        return;
    }
    
    fetch(`/api/favorites/${currentUserId}`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                favoriteCurrencies = data.data;
                updateCurrencyList();
            }
        })
        .catch(() => {
            favoriteCurrencies = ['BTC', 'USDT', 'RUB'];
        });
}

function saveFavorites() {
    console.log("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –≤–∞–ª—é—Ç—ã, currentUserId:", currentUserId, "favorites:", favoriteCurrencies);
    if (!currentUserId) return;
    
    fetch('/api/favorites', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userId: currentUserId, favorites: favoriteCurrencies })
    }).catch(console.error);
}
function toggleFavorite(currency) {
    const index = favoriteCurrencies.indexOf(currency);
    if (index === -1) {
        favoriteCurrencies.push(currency);
        showNotification(`${currency} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ‚≠êÔ∏è`, 'success');
    } else {
        favoriteCurrencies.splice(index, 1);
        showNotification(`${currency} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ`, 'info');
    }
    saveFavorites();
    updateCurrencyList(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
}

function isFavorite(currency) {
    return favoriteCurrencies.includes(currency);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    initTelegramWebApp();
    initEventListeners();
    loadFavorites(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –≤–∞–ª—é—Ç—ã
    loadInitialData();
    
    // üß™ –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–û–ß–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ö–û–ù–°–û–õ–ò
    window.debugCreateButton = function() {
        console.log('üß™ –†–£–ß–ù–ê–Ø –û–¢–õ–ê–î–ö–ê –ö–ù–û–ü–ö–ò –ó–ê–Ø–í–ö–ò');
        testCreateButton();
        setTimeout(() => {
            console.log('üß™ –ó–ê–ü–£–°–ö–ê–ï–ú –í–ê–õ–ò–î–ê–¶–ò–Æ...');
            validateWalletAddress();
        }, 100);
    };
    
    console.log('üß™ –î–æ—Å—Ç—É–ø–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: debugCreateButton() - –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∫–Ω–æ–ø–∫–∏ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏');
    
    // üß™ –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–û–ó–î–ê–ù–ò–Ø –ó–ê–Ø–í–ö–ò
    window.testCreateOrder = function() {
        console.log('üß™ –†–£–ß–ù–û–ô –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –ó–ê–Ø–í–ö–ò');
        createOrder();
    };
    
    // üîß –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ô –ü–†–ò–í–Ø–ó–ö–ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê
    window.forceBindCreateButton = function() {
        console.log('üîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–ò–í–Ø–ó–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê –ö–ù–û–ü–ö–ò');
        const createOrderButton = document.getElementById('create-order-button');
        if (createOrderButton) {
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞');
            
            // –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            createOrderButton.replaceWith(createOrderButton.cloneNode(true));
            const newButton = document.getElementById('create-order-button');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            newButton.addEventListener('click', function(event) {
                console.log('üî• –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö CLICK –°–†–ê–ë–û–¢–ê–õ');
                event.preventDefault();
                event.stopPropagation();
                createOrder();
            });
            
            newButton.onclick = function(event) {
                console.log('üî• –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö ONCLICK –°–†–ê–ë–û–¢–ê–õ');
                event.preventDefault();
                event.stopPropagation();
                createOrder();
            };
            
            console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∞–Ω—ã');
        } else {
            console.error('‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
        }
    };
    
    // ü§ñ –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–†–û–ì–†–ê–ú–ú–ù–û–ì–û –ö–õ–ò–ö–ê
    window.simulateClick = function() {
        console.log('ü§ñ –°–ò–ú–£–õ–Ø–¶–ò–Ø –ö–õ–ò–ö–ê –ü–û –ö–ù–û–ü–ö–ï');
        const createOrderButton = document.getElementById('create-order-button');
        if (createOrderButton) {
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞, —Å–∏–º—É–ª–∏—Ä—É–µ–º –∫–ª–∏–∫...');
            
            // –ù–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ —Å–∏–º—É–ª—è—Ü–∏–∏ –∫–ª–∏–∫–∞
            createOrderButton.click();
            
            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
            const clickEvent = new MouseEvent('click', {
                view: window,
                bubbles: true,
                cancelable: true
            });
            createOrderButton.dispatchEvent(clickEvent);
            
            console.log('‚úÖ –ö–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
        } else {
            console.error('‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
        }
    };
    
    // üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–ï–†–ï–ö–†–´–í–ê–Æ–©–ò–• –≠–õ–ï–ú–ï–ù–¢–û–í
    window.checkOverlappingElements = function() {
        console.log('üîç –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ö–†–´–í–ê–Æ–©–ò–• –≠–õ–ï–ú–ï–ù–¢–û–í');
        const createOrderButton = document.getElementById('create-order-button');
        if (createOrderButton) {
            const rect = createOrderButton.getBoundingClientRect();
            const centerX = rect.left + rect.width / 2;
            const centerY = rect.top + rect.height / 2;
            
            console.log('üîç –ö–Ω–æ–ø–∫–∞ rect:', rect);
            console.log('üîç –¶–µ–Ω—Ç—Ä –∫–Ω–æ–ø–∫–∏:', centerX, centerY);
            
            const elementAtPoint = document.elementFromPoint(centerX, centerY);
            console.log('üîç –≠–ª–µ–º–µ–Ω—Ç –≤ —Ü–µ–Ω—Ç—Ä–µ –∫–Ω–æ–ø–∫–∏:', elementAtPoint);
            console.log('üîç –≠—Ç–æ —Ç–∞ –∂–µ –∫–Ω–æ–ø–∫–∞?', elementAtPoint === createOrderButton);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å—é –∏–µ—Ä–∞—Ä—Ö–∏—é —Ä–æ–¥–∏—Ç–µ–ª–µ–π
            let currentElement = createOrderButton;
            console.log('üîç ========== –ò–ï–†–ê–†–•–ò–Ø –†–û–î–ò–¢–ï–õ–ï–ô ==========');
            while (currentElement) {
                console.log('üîç –≠–ª–µ–º–µ–Ω—Ç:', currentElement.tagName, currentElement.id, currentElement.className);
                console.log('üîç pointer-events:', getComputedStyle(currentElement).pointerEvents);
                console.log('üîç z-index:', getComputedStyle(currentElement).zIndex);
                console.log('üîç position:', getComputedStyle(currentElement).position);
                console.log('üîç overflow:', getComputedStyle(currentElement).overflow);
                console.log('---');
                currentElement = currentElement.parentElement;
                if (currentElement && currentElement.tagName === 'BODY') break;
            }
            
            if (elementAtPoint !== createOrderButton) {
                console.log('‚ùå –ö–ù–û–ü–ö–ê –ü–ï–†–ï–ö–†–´–¢–ê –î–†–£–ì–ò–ú –≠–õ–ï–ú–ï–ù–¢–û–ú!');
                console.log('‚ùå –ü–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç:', elementAtPoint);
                console.log('‚ùå Z-index –∫–Ω–æ–ø–∫–∏:', getComputedStyle(createOrderButton).zIndex);
                console.log('‚ùå Z-index –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–µ–≥–æ:', elementAtPoint ? getComputedStyle(elementAtPoint).zIndex : 'N/A');
                
                // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–¥–Ω—è—Ç—å z-index –∫–Ω–æ–ø–∫–∏
                createOrderButton.style.zIndex = '999999';
                createOrderButton.style.position = 'relative';
                console.log('‚úÖ –ü–æ–¥–Ω—è–ª–∏ z-index –∫–Ω–æ–ø–∫–∏ –¥–æ 999999');
            } else {
                console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –ù–ï –ø–µ—Ä–µ–∫—Ä—ã—Ç–∞');
            }
        }
    };
    
    // üíÄ –Ø–î–ï–†–ù–´–ô –°–ü–û–°–û–ë –ü–†–ò–í–Ø–ó–ö–ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê
    window.nuclearBind = function() {
        console.log('üíÄ –Ø–î–ï–†–ù–ê–Ø –ü–†–ò–í–Ø–ó–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê');
        
        // –û—á–∏—â–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        const oldButton = document.getElementById('create-order-button');
        if (oldButton) {
            console.log('üíÄ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–Ω–æ–ø–∫–µ –î–û –∑–∞–º–µ–Ω—ã:');
            console.log('üíÄ Parent:', oldButton.parentElement);
            console.log('üíÄ Siblings:', Array.from(oldButton.parentElement.children));
            
            const newButton = oldButton.cloneNode(true);
            oldButton.parentNode.replaceChild(newButton, oldButton);
            
            // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ø—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            newButton.onclick = function(e) {
                console.log('üíÄ –Ø–î–ï–†–ù–´–ô –ö–õ–ò–ö –°–†–ê–ë–û–¢–ê–õ!');
                console.log('üíÄ Event:', e);
                alert('–ö–õ–ò–ö –°–†–ê–ë–û–¢–ê–õ! –°–µ–π—á–∞—Å –∑–∞–ø—É—Å—Ç–∏–º createOrder...');
                try {
                    createOrder();
                } catch (error) {
                    console.error('üíÄ –û—à–∏–±–∫–∞ –≤ createOrder:', error);
                    alert('–û—à–∏–±–∫–∞: ' + error.message);
                }
            };
            
            // –î–û–ë–ê–í–õ–Ø–ï–ú –í–°–ï –í–û–ó–ú–û–ñ–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
            newButton.addEventListener('click', function(e) {
                console.log('üíÄ ADDEVENTLISTENER –ö–õ–ò–ö –°–†–ê–ë–û–¢–ê–õ!');
                e.preventDefault();
                e.stopPropagation();
                createOrder();
            });
            
            newButton.addEventListener('mousedown', function(e) {
                console.log('üíÄ MOUSEDOWN –°–†–ê–ë–û–¢–ê–õ!');
            });
            
            newButton.addEventListener('touchstart', function(e) {
                console.log('üíÄ TOUCHSTART –°–†–ê–ë–û–¢–ê–õ!');
            });
            
            // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            newButton.style.setProperty('pointer-events', 'auto', 'important');
            newButton.style.setProperty('cursor', 'pointer', 'important');
            newButton.style.setProperty('z-index', '999999', 'important');
            newButton.style.setProperty('position', 'relative', 'important');
            newButton.style.setProperty('background', '#ff0000', 'important'); // –ö—Ä–∞—Å–Ω–∞—è –¥–ª—è –æ—Ç–ª–∏—á–∏—è
            newButton.style.setProperty('border', '3px solid #00ff00', 'important'); // –ó–µ–ª–µ–Ω–∞—è —Ä–∞–º–∫–∞
            newButton.disabled = false;
            newButton.removeAttribute('disabled');
            newButton.classList.remove('disabled');
            
            console.log('üíÄ –Ø–î–ï–†–ù–ê–Ø –ü–†–ò–í–Ø–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê - –∫–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ö–†–ê–°–ù–û–ô –° –ó–ï–õ–ï–ù–û–ô –†–ê–ú–ö–û–ô');
            console.log('üíÄ –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞:', newButton);
        }
    };
    
    // üéØ –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ô –ö–ù–û–ü–ö–ò –î–õ–Ø –°–†–ê–í–ù–ï–ù–ò–Ø
    window.createTestButton = function() {
        console.log('üéØ –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ô –ö–ù–û–ü–ö–ò');
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–µ—Å—Ç–æ–≤—É—é –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
        const oldTestButton = document.getElementById('test-button');
        if (oldTestButton) oldTestButton.remove();
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–µ—Å—Ç–æ–≤—É—é –∫–Ω–æ–ø–∫—É
        const testButton = document.createElement('button');
        testButton.id = 'test-button';
        testButton.textContent = 'üéØ –¢–ï–°–¢ –ö–ù–û–ü–ö–ê - –ö–õ–ò–ö –°–Æ–î–ê';
        testButton.style.cssText = `
            position: fixed !important;
            top: 50px !important;
            right: 50px !important;
            z-index: 999999 !important;
            background: #ff6600 !important;
            color: white !important;
            border: none !important;
            padding: 15px !important;
            border-radius: 5px !important;
            cursor: pointer !important;
            pointer-events: auto !important;
            font-size: 14px !important;
            font-weight: bold !important;
        `;
        
        testButton.onclick = function() {
            console.log('üéØ –¢–ï–°–¢–û–í–ê–Ø –ö–ù–û–ü–ö–ê –ö–õ–ò–ö–ù–£–¢–ê!');
            alert('–¢–ï–°–¢–û–í–ê–Ø –ö–ù–û–ü–ö–ê –†–ê–ë–û–¢–ê–ï–¢! –¢–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ–º createOrder...');
            createOrder();
        };
        
        document.body.appendChild(testButton);
        console.log('üéØ –¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª');
    };
    
    // üîß –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ò–ù–¢–ï–†–§–ï–ô–°–ê –ë–ï–ó AML
    window.testInterface = function() {
        console.log('üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–†–§–ï–ô–°–ê –ó–ê–Ø–í–ö–ò –ë–ï–ó AML');
        
        if (!currentCalculation) {
            console.log('üîß –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π currentCalculation –¥–ª—è USDT ‚Üí ARS');
            currentCalculation = {
                fromAmount: 500,
                toAmount: 566666.67,
                exchangeRate: 1133.33,
                fee: 0,
                fromCurrency: 'USDT',
                toCurrency: 'ARS'
            };
        }
        
        console.log('üîß currentCalculation:', currentCalculation);
        const pairType = getPairType(currentCalculation.fromCurrency, currentCalculation.toCurrency);
        console.log('üîß –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø –ø–∞—Ä—ã:', pairType);
        
        console.log('üîß –í—ã–∑—ã–≤–∞–µ–º updateOrderInterfaceForPairType –ë–ï–ó AML...');
        updateOrderInterfaceForPairType(pairType);
        
        setTimeout(() => {
            const receivingField = document.getElementById('receiving-details');
            const amlSection = document.getElementById('aml-section');
            console.log('üîß –ü–æ–ª–µ –¥–ª—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ?', !!receivingField);
            console.log('üîß AML —Å–µ–∫—Ü–∏—è —Å–∫—Ä—ã—Ç–∞?', amlSection ? amlSection.style.display === 'none' : '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            
            if (receivingField) {
                console.log('üîß ‚úÖ –ü–æ–ª–µ –Ω–∞–π–¥–µ–Ω–æ:', receivingField);
                receivingField.value = 'test-receiving-details';
                receivingField.dispatchEvent(new Event('input'));
                console.log('üîß ‚úÖ –ó–∞–ø–æ–ª–Ω–∏–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã');
            } else {
                console.log('üîß ‚ùå –ü–æ–ª–µ –ù–ï –ù–ê–ô–î–ï–ù–û');
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é –∫–Ω–æ–ø–∫–∏
            const createButton = document.getElementById('create-order-button');
            if (createButton) {
                console.log('üîß –ö–Ω–æ–ø–∫–∞ –∑–∞—è–≤–∫–∏ disabled?', createButton.disabled);
                console.log('üîß –ö–Ω–æ–ø–∫–∞ –∑–∞—è–≤–∫–∏ className:', createButton.className);
            }
        }, 200);
    };
    
    console.log('üß™ –î–æ—Å—Ç—É–ø–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: testCreateOrder() - –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏');
    console.log('üîß –î–æ—Å—Ç—É–ø–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: forceBindCreateButton() - –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞');
    console.log('ü§ñ –î–æ—Å—Ç—É–ø–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: simulateClick() - –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ');
    console.log('üîç –î–æ—Å—Ç—É–ø–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: checkOverlappingElements() - –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤');
    console.log('üíÄ –î–æ—Å—Ç—É–ø–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: nuclearBind() - –¥–ª—è —è–¥–µ—Ä–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ (–¥–µ–ª–∞–µ—Ç –∫–Ω–æ–ø–∫—É –ö–†–ê–°–ù–û–ô)');
    console.log('üéØ –î–æ—Å—Ç—É–ø–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: createTestButton() - —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∫–Ω–æ–ø–∫—É –≤ —É–≥–ª—É —ç–∫—Ä–∞–Ω–∞');
    console.log('üîß –î–æ—Å—Ç—É–ø–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: testInterface() - –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ë–ï–ó AML');
    console.log('üí• AML –ü–†–û–í–ï–†–ö–ò –ü–û–õ–ù–û–°–¢–¨–Æ –£–î–ê–õ–ï–ù–´ - —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã–µ –ø–æ–ª—è –≤–≤–æ–¥–∞!');
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
function initTelegramWebApp() {
    console.log('üîå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp...');
    
    // ‚ö° –£–ú–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –ö–£–†–°–û–í (–¢–û–õ–¨–ö–û –ï–°–õ–ò –ù–ï –ó–ê–ì–†–£–ñ–ï–ù–´)
    if (currentRates.length === 0) {
        console.log('‚ö° –ö—É—Ä—Å—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É...');
        earlyRatesPromise = loadExchangeRates().catch(error => {
            console.log('‚ö†Ô∏è –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫—É—Ä—Å–æ–≤ –Ω–µ—É–¥–∞—á–Ω–∞:', error.message);
        });
    } else {
        console.log('‚úÖ –ö—É—Ä—Å—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫–µ—à–∞!');
    }
    
    // üöÄ –ë–û–ú–ë–û–í–ê–Ø –ó–ê–°–¢–ê–í–ö–ê –£–ü–†–ê–í–õ–Ø–ï–¢–°–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò
    
    if (window.Telegram?.WebApp) {
        tg = window.Telegram.WebApp;
        
        console.log('‚úÖ Telegram WebApp API –æ–±–Ω–∞—Ä—É–∂–µ–Ω');
        console.log('üì± initData:', tg.initData ? '–ï—Å—Ç—å –¥–∞–Ω–Ω—ã–µ' : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö');
        
        // üöÄ –ù–ê–°–¢–û–Ø–©–ò–ô –ü–û–õ–ù–û–≠–ö–†–ê–ù–ù–´–ô –†–ï–ñ–ò–ú (Bot API 8.0+)
        window.Telegram.WebApp.ready();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        setTimeout(() => {
            console.log('üîç Telegram Bot API –≤–µ—Ä—Å–∏—è:', tg.version);
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            tg.onEvent('fullscreenChanged', (data) => {
                console.log('üéØ Fullscreen changed:', data.is_fullscreen);
                if (data.is_fullscreen) {
                    console.log('‚úÖ –ü–û–õ–ù–û–≠–ö–†–ê–ù–ù–´–ô –†–ï–ñ–ò–ú –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!');
                } else {
                    console.log('üì± –†–µ–∂–∏–º –æ–±—ã—á–Ω–æ–≥–æ –æ–∫–Ω–∞');
                }
            });
            
            tg.onEvent('fullscreenFailed', (data) => {
                console.log('‚ùå Fullscreen failed:', data.error);
                console.log('üîÑ Fallback to expand...');
                window.Telegram.WebApp.expand();
            });
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è Bot API 8.0+
            if (tg.isVersionAtLeast && tg.isVersionAtLeast('8.0')) {
                console.log('üöÄ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–ê–°–¢–û–Ø–©–ò–ô –ü–û–õ–ù–û–≠–ö–†–ê–ù–ù–´–ô –†–ï–ñ–ò–ú!');
                try {
                    window.Telegram.WebApp.requestFullscreen();
                    console.log('üì± requestFullscreen() –≤—ã–∑–≤–∞–Ω!');
                } catch (error) {
                    console.log('‚ùå –û—à–∏–±–∫–∞ requestFullscreen:', error);
                    window.Telegram.WebApp.expand(); // Fallback
                }
            } else {
                console.log('‚ö†Ô∏è –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è API, –∏—Å–ø–æ–ª—å–∑—É–µ–º expand()');
                window.Telegram.WebApp.expand(); // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π
            }
            
            // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            setTimeout(() => {
                console.log('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞:');
                console.log('  - isExpanded:', tg.isExpanded);
                console.log('  - isFullscreen:', tg.isFullscreen);
                console.log('  - viewportHeight:', tg.viewportHeight);
                console.log('  - viewportStableHeight:', tg.viewportStableHeight);
            }, 500);
        }, 50);
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º User ID –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (tg.initDataUnsafe?.user?.id) {
            currentUserId = tg.initDataUnsafe.user.id;
            currentUserData = {
                id: tg.initDataUnsafe.user.id,
                first_name: tg.initDataUnsafe.user.first_name || '',
                last_name: tg.initDataUnsafe.user.last_name || '',
                username: tg.initDataUnsafe.user.username || ''
            };
            console.log('üë§ –†–ï–ê–õ–¨–ù–´–ô –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ Telegram:', currentUserData);
            console.log('‚úÖ –≠—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!');
        } else {
            console.log('‚ö†Ô∏è User ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ initDataUnsafe, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π');
            currentUserId = 123456789; // –¢–µ—Å—Ç–æ–≤—ã–π ID –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            currentUserData = {
                id: 123456789,
                first_name: '–¢–µ—Å—Ç–æ–≤—ã–π',
                last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                username: 'test_user'
            };
            console.log('üî• –í–ù–ò–ú–ê–ù–ò–ï: –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ! –ù–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å!');
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
        applyTelegramTheme();
        
        // üë§ –ú–ì–ù–û–í–ï–ù–ù–û –û–ë–ù–û–í–õ–Ø–ï–ú –ü–†–û–§–ò–õ–¨ –° –î–ê–ù–ù–´–ú–ò TELEGRAM
        setTimeout(() => {
            try {
                updateProfileDisplay();
                console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
            }
        }, 100);
        
        // ‚ùå –£–ë–†–ê–õ –ì–õ–ê–í–ù–£–Æ –ö–ù–û–ü–ö–£ - –û–ù–ê –ù–ï –ù–£–ñ–ù–ê
        // tg.MainButton —Å–∫—Ä—ã—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if (tg.MainButton) {
            tg.MainButton.hide();
        }
        
    } else {
        console.log('‚ö†Ô∏è Telegram WebApp API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        console.log('üåê –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –±—Ä–∞—É–∑–µ—Ä–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
        currentUserId = 123456789;
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
        setupFullscreenMode();
    }
    
    console.log('üîë –§–∏–Ω–∞–ª—å–Ω—ã–π User ID:', currentUserId);
    loadFavorites();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function initEventListeners() {
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π...');
    
    // üì± –î–û–ë–ê–í–õ–Ø–ï–ú –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –°–ö–†–´–¢–ò–Ø –ö–õ–ê–í–ò–ê–¢–£–†–´ –ü–†–ò –ö–õ–ò–ö–ï –ù–ê –û–ë–õ–ê–°–¢–¨
    document.addEventListener('click', function(event) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–∫ –ù–ï –ø–æ –ø–æ–ª—é –≤–≤–æ–¥–∞
        if (!event.target.matches('input[type="number"]') && 
            !event.target.closest('.currency-input')) {
            // –£–±–∏—Ä–∞–µ–º —Ñ–æ–∫—É—Å —Å –≤—Å–µ—Ö –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
            const inputs = document.querySelectorAll('input[type="number"]');
            inputs.forEach(input => {
                input.blur();
            });
            
            // –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω Telegram WebApp API, —Å–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            if (tg && tg.HapticFeedback) {
                tg.HapticFeedback.impactOccurred('light');
            }
        }
    });

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    const navItems = document.querySelectorAll('.nav-item');
    navItems.forEach(item => {
        item.addEventListener('click', (e) => {
            e.preventDefault();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ —Å–∞–π—Ç–∞ - –æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ onclick
            if (item.dataset.action === 'website') {
                return; // –î–ª—è –∫–Ω–æ–ø–∫–∏ —Å–∞–π—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è onclick –≤ HTML
            }
            
            const screen = item.dataset.screen;
            if (screen) {
                console.log('üì± –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω:', screen);
                showScreen(screen);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
                navItems.forEach(nav => nav.classList.remove('active'));
                item.classList.add('active');
            } else {
                console.log('‚ö†Ô∏è –≠–∫—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è:', item);
            }
        });
    });

    // –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
    const fromAmountInput = document.getElementById('from-amount');
    const toAmountInput = document.getElementById('to-amount');
    
    fromAmountInput.addEventListener('input', calculateExchange);
    toAmountInput.addEventListener('input', reverseCalculateExchange);
    
    // –í—ã–±–æ—Ä –≤–∞–ª—é—Ç
    document.getElementById('from-currency').addEventListener('click', () => openCurrencyModal('from'));
    document.getElementById('to-currency').addEventListener('click', () => openCurrencyModal('to'));
    
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∞–ª—é—Ç
    document.getElementById('swap-currencies').addEventListener('click', swapCurrencies);
    
    // –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±–º–µ–Ω
    document.getElementById('continue-button').addEventListener('click', proceedToOrder);
    
    // AML –ø—Ä–æ–≤–µ—Ä–∫–∞
    document.getElementById('aml-check-button').addEventListener('click', performAMLCheck);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
    const createOrderButton = document.getElementById('create-order-button');
    if (createOrderButton) {
        console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ create-order-button –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫');
        createOrderButton.addEventListener('click', function(event) {
            console.log('üî• ========== –ö–õ–ò–ö –ó–ê–§–ò–ö–°–ò–†–û–í–ê–ù ==========');
            console.log('üî• Event:', event);
            console.log('üî• Target:', event.target);
            console.log('üî• Button disabled:', createOrderButton.disabled);
            console.log('üî• Button classes:', createOrderButton.className);
            console.log('üî• –í—ã–∑—ã–≤–∞–µ–º createOrder...');
            createOrder();
        });
        console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω');
    } else {
        console.error('‚ùå –ö–Ω–æ–ø–∫–∞ create-order-button –ù–ï –ù–ê–ô–î–ï–ù–ê –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏!');
    }
    
    // –ü–æ–∏—Å–∫ –≤–∞–ª—é—Ç
    // –ü–æ–∏—Å–∫ –≤–∞–ª—é—Ç —É–¥–∞–ª–µ–Ω
    
    // –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
    const walletAddressField = document.getElementById('wallet-address');
    if (walletAddressField) {
        walletAddressField.addEventListener('input', function() {
            console.log('üí° –ü–æ–ª–µ –∞–¥—Ä–µ—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–æ, –∑–∞–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é...');
            validateWalletAddress();
        });
    } else {
        console.log('‚ö†Ô∏è –ü–æ–ª–µ wallet-address –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
    const themeSelect = document.getElementById('theme-select');
    const languageSelect = document.getElementById('language-select');
    
    if (themeSelect) {
        themeSelect.addEventListener('change', (e) => {
            applyTheme(e.target.value);
        });
    }
    
    if (languageSelect) {
        languageSelect.addEventListener('change', (e) => {
            applyLanguage(e.target.value);
        });
    }
    
    // –î–∞—à–±–æ—Ä–¥ - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤
    const chartPeriods = document.querySelectorAll('.chart-period');
    chartPeriods.forEach(button => {
        button.addEventListener('click', () => {
            chartPeriods.forEach(b => b.classList.remove('active'));
            button.classList.add('active');
            const period = button.dataset.period;
            loadDashboardData(period);
        });
    });
    
    // –ö–∞—Å—Ç–æ–º–Ω—ã–µ –¥—Ä–æ–ø–¥–∞—É–Ω—ã
    initCustomDropdowns();
    
    // üì± –°–ö–†–´–¢–ò–ï –ö–õ–ê–í–ò–ê–¢–£–†–´ –ü–†–ò –¢–ê–ü–ï –í –õ–Æ–ë–û–ï –ú–ï–°–¢–û
    document.addEventListener('click', function(event) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–∏–∫ –Ω–µ –ø–æ –ø–æ–ª—é –≤–≤–æ–¥–∞
        if (!event.target.matches('input[type="number"], input[type="text"], textarea')) {
            // –£–±–∏—Ä–∞–µ–º —Ñ–æ–∫—É—Å —Å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ (—Å–∫—Ä—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É)
            if (document.activeElement && document.activeElement.blur) {
                document.activeElement.blur();
            }
        }
    });
    
    // üì± –°–ö–†–´–¢–ò–ï –ö–õ–ê–í–ò–ê–¢–£–†–´ –ü–†–ò –ù–ê–ñ–ê–¢–ò–ò ENTER
    document.addEventListener('keydown', function(event) {
        if (event.key === 'Enter' && event.target.matches('input[type="number"], input[type="text"]')) {
            event.target.blur();
        }
    });
    
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
}

    // üé® –û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–ù–û–ü–û–ö –í–ê–õ–Æ–¢
function updateDefaultCurrencyIcons() {
    console.log('üé® –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤–∞–ª—é—Ç...');
    updateCurrencyButtons();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function loadInitialData() {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    showNotification('–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...', 'info');
    
    // üî• –ñ–î–ï–ú –¢–û–õ–¨–ö–û GOOGLE SHEETS - –ë–ï–ó FALLBACK!
    console.log('üî• –ñ–î–ï–ú –ó–ê–ì–†–£–ó–ö–ò –ö–£–†–°–û–í –ò–ó GOOGLE SHEETS...');
    currentRates = [];
    // –ù–ï –û–ë–ù–û–í–õ–Ø–ï–ú –ò–ù–¢–ï–†–§–ï–ô–° –ü–û–ö–ê –ù–ï –ó–ê–ì–†–£–ó–ò–ú –†–ï–ê–õ–¨–ù–´–ï –ö–£–†–°–´
    
    // üî• –ú–ì–ù–û–í–ï–ù–ù–û–ï –°–ö–†–´–¢–ò–ï –ó–ê–ì–†–£–ó–û–ß–ù–û–ì–û –≠–ö–†–ê–ù–ê
    // üöÄ –ë–û–ú–ë–û–í–ê–Ø –ó–ê–°–¢–ê–í–ö–ê –£–ü–†–ê–í–õ–Ø–ï–¢–°–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò
    
    // ‚ö° –£–°–ö–û–†–ï–ù–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø - –í–°–ï –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Telegram
    try {
        updateProfileDisplay();
        console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
    try {
        calculateExchange();
        console.log('‚úÖ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞:', error);
    }
    
    // üé® –û–ë–ù–û–í–õ–Ø–ï–ú –ò–ö–û–ù–ö–ò –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ –ù–ê PNG
    try {
        updateDefaultCurrencyIcons();
        console.log('‚úÖ –ò–∫–æ–Ω–∫–∏ –≤–∞–ª—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ PNG');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∫–æ–Ω–æ–∫:', error);
    }
    
    // üöÄ –£–ú–ù–û–ï –û–ñ–ò–î–ê–ù–ò–ï –ö–£–†–°–û–í
    try {
        console.log('‚ö° –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫—É—Ä—Å–æ–≤...');
        if (currentRates.length === 0) {
            if (earlyRatesPromise) {
                console.log('‚ö° –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏...');
                await earlyRatesPromise;
            } else {
                console.log('‚ö° –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫—É—Ä—Å–æ–≤...');
                await loadExchangeRates();
            }
        } else {
            console.log('‚úÖ –ö—É—Ä—Å—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–æ–≤:', error);
    }
    
    // üöÄ –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –ü–†–û–§–ò–õ–Ø
    if (currentUserId && currentUserId !== 123456789) {
        loadUserProfile().catch(error => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
        });
    }
}

// üöÄ –ë–´–°–¢–†–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –ö–£–†–°–û–í –° –ö–ï–®–ò–†–û–í–ê–ù–ò–ï–ú
async function loadExchangeRates() {
    console.log('üì° –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç...');
    
    // ‚ö° –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –ò–ó –ö–ï–®–ê
    try {
        const cachedRates = localStorage.getItem('cachedRates');
        const cacheTime = localStorage.getItem('ratesCacheTime');
        
        if (cachedRates && cacheTime) {
            const cacheAge = Date.now() - parseInt(cacheTime);
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à –µ—Å–ª–∏ –æ–Ω —Å–≤–µ–∂–µ–µ 30 —Å–µ–∫—É–Ω–¥
            if (cacheAge < 30000) {
                console.log('‚ö° –ò—Å–ø–æ–ª—å–∑—É–µ–º –°–í–ï–ñ–ò–ô –∫–µ—à –∫—É—Ä—Å–æ–≤!');
                const cached = JSON.parse(cachedRates);
                currentRates = cached.rates || [];
                window.rawPairData = cached.rawPairs || [];
                updateCurrencyList();
                updateRatesTime();
                console.log('‚úÖ –ö—É—Ä—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫–µ—à–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ!');
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ–Ω–µ
            } else {
                console.log('‚ö†Ô∏è –ö–µ—à —É—Å—Ç–∞—Ä–µ–ª, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ...');
            }
        }
    } catch (cacheError) {
        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–µ—à–∞:', cacheError.message);
    }
    
    try {
        // üî• –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ü–ï–†–ï–î –ó–ê–ü–†–û–°–û–ú!
        console.log('üî• –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...');
        try {
            await fetch('/api/force-sync', { method: 'POST' });
            console.log('‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—à–µ–Ω–∞');
            // –£–ë–†–ê–õ–ò –ó–ê–î–ï–†–ñ–ö–£ 2 –°–ï–ö–£–ù–î–´ –î–õ–Ø –£–°–ö–û–†–ï–ù–ò–Ø!
        } catch (syncError) {
            console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', syncError.message);
        }
        
        const response = await fetch('/api/rates', {
            headers: {
                'Content-Type': 'application/json'
            }
        });
        
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const data = await response.json();
        
        if (data.success && data.data && data.data.length > 0) {
            currentRates = data.data;
            
            // üî• –°–û–•–†–ê–ù–Ø–ï–ú –°–´–†–´–ï –î–ê–ù–ù–´–ï –ü–ê–† –î–õ–Ø –ü–†–Ø–ú–´–• –†–ê–°–ß–ï–¢–û–í!
            if (data.rawPairs && data.rawPairs.length > 0) {
                window.rawPairData = data.rawPairs;
                console.log('üî• –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä:', window.rawPairData.length, '–ø–∞—Ä');
                window.rawPairData.forEach(pair => {
                    console.log(`   ${pair.pair}: ${pair.sellRate}/${pair.buyRate}`);
                });
            } else {
                console.log('‚ö†Ô∏è –ù–µ—Ç —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä –æ—Ç API');
            }
            
            // ‚ö° –°–û–•–†–ê–ù–Ø–ï–ú –í –ö–ï–® –î–õ–Ø –ë–´–°–¢–†–û–ô –ó–ê–ì–†–£–ó–ö–ò
            try {
                const cacheData = {
                    rates: currentRates,
                    rawPairs: window.rawPairData || []
                };
                localStorage.setItem('cachedRates', JSON.stringify(cacheData));
                localStorage.setItem('ratesCacheTime', Date.now().toString());
                console.log('‚ö° –ö—É—Ä—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–µ—à!');
            } catch (cacheError) {
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫–µ—à:', cacheError.message);
            }
            
            updateCurrencyList();
            updateRatesTime();
            console.log('‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –∑–∞–º–µ–Ω–∏–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ:', currentRates.length, '–≤–∞–ª—é—Ç');
            // showNotification('–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã!', 'success'); // –£–ë–†–ê–ù–û –ü–û –ó–ê–ü–†–û–°–£
            
            // üöÄ –ë–û–ú–ë–û–í–ê–Ø –ó–ê–°–¢–ê–í–ö–ê –£–ü–†–ê–í–õ–Ø–ï–¢–°–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò
        } else {
            throw new Error(data.error || '–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–æ–≤:', error.message);
        
        if (error.name === 'AbortError') {
            console.log('‚ö° –¢–∞–π–º–∞—É—Ç 500–º—Å –ø—Ä–µ–≤—ã—à–µ–Ω - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –∫—É—Ä—Å–∞–º–∏');
            showNotification('–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫—É—Ä—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–∞–±–æ—Ç—ã', 'info');
        } else {
            console.log('‚ö° –û—à–∏–±–∫–∞ API - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –∫—É—Ä—Å–∞–º–∏');
            showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã', 'warning');
        }
        
        // üöÄ –ë–û–ú–ë–û–í–ê–Ø –ó–ê–°–¢–ê–í–ö–ê –£–ü–†–ê–í–õ–Ø–ï–¢–°–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò
    }
}

// ‚ùå FALLBACK –ö–£–†–°–´ –û–¢–ö–õ–Æ–ß–ï–ù–´ - –¢–û–õ–¨–ö–û GOOGLE SHEETS!
function getTestRates() {
    console.log('‚ùå FALLBACK –ö–£–†–°–´ –û–¢–ö–õ–Æ–ß–ï–ù–´! –ñ–î–ï–ú GOOGLE SHEETS!');
    return []; // –ü–£–°–¢–û–ô –ú–ê–°–°–ò–í - –ù–ò–ö–ê–ö–ò–• –ö–£–†–°–û–í –ü–û–ö–ê –ù–ï –ó–ê–ì–†–£–ó–ò–ú –ò–ó –¢–ê–ë–õ–ò–¶–´!
}
// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∫—É—Ä—Å–æ–≤
function updateRatesTime() {
    const updateTime = document.getElementById('update-time');
    updateTime.textContent = new Date().toLocaleTimeString('ru-RU', { 
        hour: '2-digit', 
        minute: '2-digit' 
    });
}

// –†–∞—Å—á–µ—Ç –æ–±–º–µ–Ω–∞
function calculateExchange() {
    const fromAmount = parseFloat(document.getElementById('from-amount').value) || 0;
    
    if (fromAmount <= 0) {
        updateCalculationDisplay(0, 0, 0, 0);
        document.getElementById('continue-button').disabled = true;
        return;
    }
    
    // üî• –ò–©–ï–ú –ü–†–Ø–ú–£–Æ –ü–ê–†–£ –í –î–ê–ù–ù–´–• –û–¢ API
    console.log(`üìä –ü–†–Ø–ú–û–ô –ü–û–ò–°–ö –ü–ê–†–´ ${fromCurrency}/${toCurrency} –≤ –¥–∞–Ω–Ω—ã—Ö...`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ)
    let pairData = null;
    
    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø—Ä—è–º—É—é –ø–∞—Ä—É FROM/TO
    if (window.rawPairData) {
        // üî• –°–ù–ê–ß–ê–õ–ê –ò–©–ï–ú –û–ë–†–ê–¢–ù–£–Æ –ü–ê–†–£ –î–õ–Ø –ü–†–ê–í–ò–õ–¨–ù–´–• –ö–£–†–°–û–í!
        const reversePair = window.rawPairData.find(p => p.pair === `${toCurrency}/${fromCurrency}`);
        if (reversePair) {
            console.log(`üìä –ù–ê–ô–î–ï–ù–ê –û–ë–†–ê–¢–ù–ê–Ø –ü–ê–†–ê (–ü–†–ò–û–†–ò–¢–ï–¢): ${reversePair.pair} = ${reversePair.sellRate}/${reversePair.buyRate}`);
            // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
            pairData = {
                pair: `${fromCurrency}/${toCurrency}`,
                sellRate: 1 / reversePair.buyRate,
                buyRate: 1 / reversePair.sellRate
            };
            console.log(`üìä –ò–ù–í–ï–†–¢–ò–†–û–í–ê–ù–ù–ê–Ø –ü–ê–†–ê: ${pairData.sellRate}/${pairData.buyRate}`);
        } else {
            // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ–π - –∏—â–µ–º –ø—Ä—è–º—É—é –ø–∞—Ä—É FROM/TO
            pairData = window.rawPairData.find(p => p.pair === `${fromCurrency}/${toCurrency}`);
            if (pairData) {
                console.log(`üìä –ù–ê–ô–î–ï–ù–ê –ü–†–Ø–ú–ê–Ø –ü–ê–†–ê (–ó–ê–ü–ê–°–ù–û–ô –í–ê–†–ò–ê–ù–¢): ${pairData.pair} = ${pairData.sellRate}/${pairData.buyRate}`);
            }
        }
    }
    
    if (!pairData) {
        console.error(`‚ùå –ü–∞—Ä–∞ ${fromCurrency}/${toCurrency} –ù–ï –ù–ê–ô–î–ï–ù–ê –≤ Google Sheets!`);
        showNotification(`–ü–∞—Ä–∞ ${fromCurrency}/${toCurrency} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞`, 'error');
        updateCalculationDisplay(0, 0, 0, 0);
        document.getElementById('continue-button').disabled = true;
        return;
    }
    
    // üî• –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê –†–ê–°–ß–ï–¢–ê - –ü–†–û–í–ï–†–Ø–ï–ú –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï –û–ë–ú–ï–ù–ê
    const exchangeRate = pairData.sellRate;
    let toAmount;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø–∞—Ä—ã
    const [pairFromCurrency, pairToCurrency] = pairData.pair.split('/');
    
    // üî• –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –ü–ê–†–´ –î–õ–Ø –ò–ù–í–ï–†–°–ò–ò –õ–û–ì–ò–ö–ò –†–ê–°–ß–ï–¢–ê
    const specialCalcPairs = ['ARS/UAH', 'UAH/ARS', 'RUB/ARS', 'ARS/RUB', 'RUB/KZT', 'KZT/RUB', 'USDT/ARS', 'ARS/USDT', 'USDT/KZT', 'KZT/USDT', 'BTC/ETH', 'ETH/BTC', 'BTC/ARS', 'ARS/BTC', 'BTC/KZT', 'KZT/BTC'];
    const currentCalcPair = `${fromCurrency}/${toCurrency}`;
    const isSpecialCalc = specialCalcPairs.includes(currentCalcPair);
    
    if (fromCurrency === pairFromCurrency && toCurrency === pairToCurrency) {
        // –ü—Ä—è–º–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—ã
        if (isSpecialCalc) {
            // –î–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–∞—Ä - —É–º–Ω–æ–∂–∞–µ–º –≤–º–µ—Å—Ç–æ –¥–µ–ª–µ–Ω–∏—è
            toAmount = fromAmount * exchangeRate;
            console.log(`üìä –°–ü–ï–¶ –ü–†–Ø–ú–û–ï (√ó): ${fromAmount} ${fromCurrency} * ${exchangeRate} = ${toAmount} ${toCurrency}`);
        } else {
            // –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ - –¥–µ–ª–∏–º  
            toAmount = fromAmount / exchangeRate;
            console.log(`üìä –ü–†–Ø–ú–û–ï –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï (/): ${fromAmount} ${fromCurrency} / ${exchangeRate} = ${toAmount} ${toCurrency}`);
        }
    } else if (fromCurrency === pairToCurrency && toCurrency === pairFromCurrency) {
        // –û–±—Ä–∞—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—ã
        if (isSpecialCalc) {
            // –î–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–∞—Ä - –¥–µ–ª–∏–º –≤–º–µ—Å—Ç–æ —É–º–Ω–æ–∂–µ–Ω–∏—è
            toAmount = fromAmount / exchangeRate;
            console.log(`üìä –°–ü–ï–¶ –û–ë–†–ê–¢–ù–û–ï (/): ${fromAmount} ${fromCurrency} / ${exchangeRate} = ${toAmount} ${toCurrency}`);
        } else {
            // –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ - —É–º–Ω–æ–∂–∞–µ–º
            toAmount = fromAmount * exchangeRate;
            console.log(`üìä –û–ë–†–ê–¢–ù–û–ï –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï (√ó): ${fromAmount} ${fromCurrency} * ${exchangeRate} = ${toAmount} ${toCurrency}`);
        }
    } else {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è! –ü–∞—Ä–∞: ${pairData.pair}, –æ–±–º–µ–Ω: ${fromCurrency}‚Üí${toCurrency}`);
        toAmount = fromAmount * exchangeRate; // fallback
    }
    const fee = 0;
    const finalAmount = toAmount;
    
    currentCalculation = {
        fromAmount,
        toAmount: finalAmount,
        exchangeRate,
        fee,
        fromCurrency,
        toCurrency
    };
    
    // üî• –ü–†–û–°–¢–û –ü–ï–†–ï–î–ê–ï–ú –ö–£–†–° –ö–ê–ö –ï–°–¢–¨ - –ù–ï –õ–û–ú–ê–ï–ú!
    updateCalculationDisplay(fromAmount, finalAmount, exchangeRate, fee);
    document.getElementById('continue-button').disabled = false;
}

// –†–∞—Å—á–µ—Ç –æ–±–º–µ–Ω–∞ —á–µ—Ä–µ–∑ API (–¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –ø–∞—Ä)
async function calculateExchangeViaAPI(fromAmount) {
    console.log(`üåê –†–∞—Å—á–µ—Ç —á–µ—Ä–µ–∑ API: ${fromAmount} ${fromCurrency} ‚Üí ${toCurrency}`);
    
    try {
        const response = await fetch('/api/calculate', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                fromCurrency,
                toCurrency,
                amount: fromAmount,
                userId: currentUserId
            })
        });
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const result = await response.json();
        
        if (result.success && result.data) {
            const toAmount = result.data.toAmount;
            const exchangeRate = result.data.exchangeRate;
            const fee = result.data.fee || 0;
            const finalAmount = toAmount;
            
            console.log(`‚úÖ API —Ä–∞—Å—á–µ—Ç: ${fromAmount} ${fromCurrency} = ${finalAmount} ${toCurrency} (–∫—É—Ä—Å: ${exchangeRate})`);
            
            currentCalculation = {
                fromAmount,
                toAmount: finalAmount,
                exchangeRate,
                fee,
                fromCurrency,
                toCurrency
            };
            
            updateCalculationDisplay(fromAmount, finalAmount, exchangeRate, fee);
            document.getElementById('continue-button').disabled = false;
        } else {
            throw new Error(result.error || '–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ API —Ä–∞—Å—á–µ—Ç–∞:', error.message);
        showNotification('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫—É—Ä—Å–∞: ' + error.message, 'error');
        updateCalculationDisplay(0, 0, 0, 0);
        document.getElementById('continue-button').disabled = true;
    }
}

// –û–±—Ä–∞—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç –æ–±–º–µ–Ω–∞
function reverseCalculateExchange() {
    const toAmount = parseFloat(document.getElementById('to-amount').value) || 0;
    
    if (toAmount <= 0) {
        document.getElementById('from-amount').value = '';
        calculateExchange();
        return;
    }
    
    // üî• –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–†–Ø–ú–´–ï –ü–ê–†–´ –î–õ–Ø –û–ë–†–ê–¢–ù–û–ì–û –†–ê–°–ß–ï–¢–ê
    let pairData = null;
    
    if (window.rawPairData) {
        pairData = window.rawPairData.find(p => p.pair === `${fromCurrency}/${toCurrency}`);
        if (!pairData) {
            const reversePair = window.rawPairData.find(p => p.pair === `${toCurrency}/${fromCurrency}`);
            if (reversePair) {
                pairData = {
                    sellRate: 1 / reversePair.buyRate,
                    buyRate: 1 / reversePair.sellRate
                };
            }
        }
    }
    
    if (!pairData) {
        return;
    }
    
    const exchangeRate = pairData.sellRate;
    const fee = 0; // –ö–æ–º–∏—Å—Å–∏—è —É–±—Ä–∞–Ω–∞
    const grossAmount = toAmount; // –ë–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏
    
    // üî• –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–ë–†–ê–¢–ù–û–ì–û –†–ê–°–ß–ï–¢–ê
    let fromAmount;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø–∞—Ä—ã
    const [pairFromCurrency, pairToCurrency] = pairData.pair ? pairData.pair.split('/') : [fromCurrency, toCurrency];
    
    if (fromCurrency === pairFromCurrency && toCurrency === pairToCurrency) {
        // –ü—Ä—è–º–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—ã: BTC/RUB, –æ–±—Ä–∞—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç RUB ‚Üí BTC
        fromAmount = grossAmount * exchangeRate;
        console.log(`üìä –û–ë–†–ê–¢–ù–´–ô –ü–†–Ø–ú–û–ô: ${grossAmount} ${toCurrency} * ${exchangeRate} = ${fromAmount} ${fromCurrency}`);
    } else if (fromCurrency === pairToCurrency && toCurrency === pairFromCurrency) {
        // –û–±—Ä–∞—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—ã: RUB/BTC —á–µ—Ä–µ–∑ –ø–∞—Ä—É BTC/RUB, –æ–±—Ä–∞—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç BTC ‚Üí RUB
        fromAmount = grossAmount / exchangeRate;
        console.log(`üìä –û–ë–†–ê–¢–ù–´–ô –û–ë–†–ê–¢–ù–´–ô: ${grossAmount} ${toCurrency} / ${exchangeRate} = ${fromAmount} ${fromCurrency}`);
    } else {
        fromAmount = grossAmount / exchangeRate; // fallback
    }
    
    document.getElementById('from-amount').value = formatCurrencyAmount(fromAmount);
    calculateExchange();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞
function updateCalculationDisplay(fromAmount, toAmount, exchangeRate, fee) {
    console.log(`üîç updateCalculationDisplay –ø–æ–ª—É—á–∏–ª:
    - fromAmount: ${fromAmount}
    - toAmount: ${toAmount}  
    - exchangeRate: ${exchangeRate}
    - fromCurrency: ${fromCurrency}
    - toCurrency: ${toCurrency}`);
    
    document.getElementById('to-amount').value = formatCurrencyAmount(toAmount);
    
    // üî• –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ö–£–†–°–ê
    let rateText;
    
    // –î–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é –≤–∞–ª—é—Ç—É
    const cryptoCurrencies = ['BTC', 'ETH', 'USDT', 'USDC', 'BNB', 'ADA', 'DOT', 'LINK', 'LTC', 'XRP', 'SOL', 'MATIC', 'AVAX', 'BCH'];
    
    // üî• –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –ü–ê–†–´ –î–õ–Ø –ò–ù–í–ï–†–°–ò–ò –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø
    const specialInvertPairs = [
        'RUB/BTC', 'BTC/RUB',
        'RUB/ETH', 'ETH/RUB', 
        'USDT/BTC', 'BTC/USDT',
        'USDT/ETH', 'ETH/USDT',
        'ARS/UAH', 'UAH/ARS'
    ];
    
    const currentPair = `${fromCurrency}/${toCurrency}`;
    const isSpecialPair = specialInvertPairs.includes(currentPair);
    
    // üî• –û–°–û–ë–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø USDT/BTC - –í–°–ï–ì–î–ê –ü–û–ö–ê–ó–´–í–ê–ï–ú 1 BTC = X USDT
    if (currentPair === 'USDT/BTC' || currentPair === 'BTC/USDT') {
        const btcToUsdtRate = (currentPair === 'USDT/BTC') ? exchangeRate : (1 / exchangeRate);
        rateText = `1 BTC = ${formatCurrencyAmount(btcToUsdtRate)} USDT`;
        console.log(`üìä USDT/BTC –°–ü–ï–¶: ${currentPair}, –∫—É—Ä—Å ${exchangeRate} ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 1 BTC = ${btcToUsdtRate} USDT`);
    } 
    // üî• –û–°–û–ë–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø USDT/ETH - –í–°–ï–ì–î–ê –ü–û–ö–ê–ó–´–í–ê–ï–ú 1 ETH = X USDT
    else if (currentPair === 'USDT/ETH' || currentPair === 'ETH/USDT') {
        const ethToUsdtRate = (currentPair === 'USDT/ETH') ? exchangeRate : (1 / exchangeRate);
        rateText = `1 ETH = ${formatCurrencyAmount(ethToUsdtRate)} USDT`;
        console.log(`üìä USDT/ETH –°–ü–ï–¶: ${currentPair}, –∫—É—Ä—Å ${exchangeRate} ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 1 ETH = ${ethToUsdtRate} USDT`);
    }
    // üî• –û–°–û–ë–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø RUB/USDT - –í–°–ï–ì–î–ê –ü–û–ö–ê–ó–´–í–ê–ï–ú 1 USDT = X RUB
    else if (currentPair === 'RUB/USDT' || currentPair === 'USDT/RUB') {
        const usdtToRubRate = (currentPair === 'RUB/USDT') ? exchangeRate : (1 / exchangeRate);
        rateText = `1 USDT = ${formatCurrencyAmount(usdtToRubRate)} RUB`;
        console.log(`üìä RUB/USDT –°–ü–ï–¶: ${currentPair}, –∫—É—Ä—Å ${exchangeRate} ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 1 USDT = ${usdtToRubRate} RUB`);
    }
    // üî• –û–°–û–ë–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø RUB/BTC - –í–°–ï–ì–î–ê –ü–û–ö–ê–ó–´–í–ê–ï–ú 1 BTC = X RUB
    else if (currentPair === 'RUB/BTC' || currentPair === 'BTC/RUB') {
        const btcToRubRate = (currentPair === 'RUB/BTC') ? exchangeRate : (1 / exchangeRate);
        rateText = `1 BTC = ${formatCurrencyAmount(btcToRubRate)} RUB`;
        console.log(`üìä RUB/BTC –°–ü–ï–¶: ${currentPair}, –∫—É—Ä—Å ${exchangeRate} ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 1 BTC = ${btcToRubRate} RUB`);
    }
    // üî• –û–°–û–ë–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø RUB/ETH - –í–°–ï–ì–î–ê –ü–û–ö–ê–ó–´–í–ê–ï–ú 1 ETH = X RUB
    else if (currentPair === 'RUB/ETH' || currentPair === 'ETH/RUB') {
        const ethToRubRate = (currentPair === 'RUB/ETH') ? exchangeRate : (1 / exchangeRate);
        rateText = `1 ETH = ${formatCurrencyAmount(ethToRubRate)} RUB`;
        console.log(`üìä RUB/ETH –°–ü–ï–¶: ${currentPair}, –∫—É—Ä—Å ${exchangeRate} ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 1 ETH = ${ethToRubRate} RUB`);
    }
    // üî• –û–°–û–ë–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø RUB/UAH - –ò–ù–í–ï–†–¢–ò–†–£–ï–ú –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï
    else if (currentPair === 'RUB/UAH' || currentPair === 'UAH/RUB') {
        const invertedRate = 1 / exchangeRate;
        if (currentPair === 'RUB/UAH') {
            rateText = `1 RUB = ${formatCurrencyAmount(invertedRate)} UAH`;
        } else {
            rateText = `1 UAH = ${formatCurrencyAmount(invertedRate)} RUB`;
        }
        console.log(`üìä RUB/UAH –°–ü–ï–¶: ${currentPair}, –∫—É—Ä—Å ${exchangeRate} ‚Üí –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ${invertedRate}`);
    } else if (isSpecialPair && exchangeRate < 0.01) {
        // –î–ª—è –¥—Ä—É–≥–∏—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–∞—Ä —Å –º–∞–ª–µ–Ω—å–∫–∏–º –∫—É—Ä—Å–æ–º - –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
        const normalRate = 1 / exchangeRate;
        rateText = `1 ${fromCurrency} = ${formatCurrencyAmount(normalRate)} ${toCurrency}`;
        console.log(`üìä –°–ü–ï–¶ –ü–ê–†–ê ${currentPair}: –ò–ù–í–ï–†–¢–ò–†–û–í–ê–õ–ò ${exchangeRate} ‚Üí ${normalRate}`);
    } else {
        // –û–±—ã—á–Ω—ã–π –∫—É—Ä—Å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        rateText = `1 ${fromCurrency} = ${formatCurrencyAmount(exchangeRate)} ${toCurrency}`;
        console.log(`üìä –û–ë–´–ß–ù–´–ô –ö–£–†–° –¥–ª—è ${currentPair}: ${exchangeRate}`);
    }
    
    document.getElementById('exchange-rate').textContent = rateText;
    document.getElementById('final-amount').textContent = `${formatCurrencyAmount(toAmount)} ${toCurrency}`;
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∞–ª—é—Ç
function swapCurrencies() {
    const temp = fromCurrency;
    fromCurrency = toCurrency;
    toCurrency = temp;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤–∞–ª—é—Ç
    const fromButton = document.querySelector('#from-currency');
    const toButton = document.querySelector('#to-currency');
    
    fromButton.querySelector('.currency-name').textContent = fromCurrency;
            // currency-desc —É–¥–∞–ª–µ–Ω
    fromButton.querySelector('.currency-icon').innerHTML = getCurrencyIcon(fromCurrency);
    
    toButton.querySelector('.currency-name').textContent = toCurrency;
            // currency-desc —É–¥–∞–ª–µ–Ω
    toButton.querySelector('.currency-icon').innerHTML = getCurrencyIcon(toCurrency);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
    const swapButton = document.getElementById('swap-currencies');
    swapButton.style.transform = 'rotate(180deg)';
    setTimeout(() => {
        swapButton.style.transform = 'rotate(0deg)';
    }, 300);
    
    calculateExchange();
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã
let currentCurrencyType = 'from';

async function openCurrencyModal(type) {
    currentCurrencyType = type;
    
    // üöÄ –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ò –ó–ê–ì–†–£–ó–ö–ê –ö–£–†–°–û–í
    if (!currentRates || currentRates.length === 0) {
        console.log('‚ö° –ö—É—Ä—Å—ã –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã - –§–û–†–°–ò–†–£–ï–ú –ó–ê–ì–†–£–ó–ö–£ –ò–ó GOOGLE SHEETS!');
        await loadExchangeRates(); // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê
    }
    
    updateCurrencyList();
    document.getElementById('currency-modal').classList.add('active');
    
    // üîÑ –í–°–ï–ì–î–ê –§–û–†–°–ò–†–£–ï–ú –ê–ö–¢–£–ê–õ–¨–ù–´–ï –ö–£–†–°–´ –í –§–û–ù–ï
    loadExchangeRates().then(() => {
        console.log('‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã - –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫');
        updateCurrencyList();
    }).catch(error => {
        console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–æ–≤:', error.message);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–æ–≤ –∏–∑ Google Sheets', 'error');
    });
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∞ –≤–∞–ª—é—Ç
function closeCurrencyModal() {
    document.getElementById('currency-modal').classList.remove('active');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–∞–ª—é—Ç
function updateCurrencyList() {
    const currencyList = document.getElementById('currency-list');
    currencyList.innerHTML = '';
    
    // üî• –ï–°–õ–ò –ù–ï–¢ –ö–£–†–°–û–í - –ü–û–ö–ê–ó–´–í–ê–ï–ú –ó–ê–ì–†–£–ó–ö–£
    if (!currentRates || currentRates.length === 0) {
        console.log('‚ö° –ù–µ—Ç –∫—É—Ä—Å–æ–≤ - –∂–¥–µ–º Google Sheets');
        currencyList.innerHTML = '<div style="text-align: center; padding: 40px; color: #666;"><div style="font-size: 24px; margin-bottom: 10px;">üìä</div><div>–ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É—Ä—Å—ã –∏–∑ Google Sheets...</div><div style="font-size: 12px; margin-top: 10px; opacity: 0.7;">–ñ–¥–∏—Ç–µ, –∫—É—Ä—Å—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã</div></div>';
        return;
    }
    
    // –†–∞–∑–¥–µ–ª—è–µ–º –≤–∞–ª—é—Ç—ã –Ω–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∏ –æ–±—ã—á–Ω—ã–µ
    const favorites = currentRates.filter(rate => isFavorite(rate.currency));
    const others = currentRates.filter(rate => !isFavorite(rate.currency));
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (favorites.length > 0) {
        const favoritesHeader = document.createElement('div');
        favoritesHeader.className = 'currency-section-header';
        favoritesHeader.innerHTML = `
            <h4><i class="fas fa-star" style="color: #FFD700;"></i> –ò–∑–±—Ä–∞–Ω–Ω—ã–µ</h4>
        `;
        currencyList.appendChild(favoritesHeader);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –≤–∞–ª—é—Ç—ã
        favorites.forEach(rate => {
            currencyList.appendChild(createCurrencyItem(rate, true));
        });
        
        // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        if (others.length > 0) {
            const separator = document.createElement('div');
            separator.className = 'currency-section-header';
            separator.innerHTML = `<h4><i class="fas fa-list"></i> –í—Å–µ –≤–∞–ª—é—Ç—ã</h4>`;
            currencyList.appendChild(separator);
        }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞–ª—é—Ç—ã
    others.forEach(rate => {
        currencyList.appendChild(createCurrencyItem(rate, false));
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤–∞–ª—é—Ç—ã
function createCurrencyItem(rate, isFav) {
    const item = document.createElement('div');
    item.className = 'currency-item';
    
    const changePercent = rate.change24h || 0;
    const changeClass = changePercent > 0 ? 'positive' : 'negative';
    const changeIcon = changePercent > 0 ? '+' : '';
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤–∞–ª—é—Ç—ã
    let priceDisplay;
    if (rate.type === 'fiat' && rate.currency !== 'USD') {
        priceDisplay = `$${rate.price.toFixed(4)}`;
    } else if (rate.price >= 1000) {
        priceDisplay = `$${rate.price.toLocaleString()}`;
    } else if (rate.price >= 1) {
        priceDisplay = `$${rate.price.toFixed(2)}`;
    } else {
        priceDisplay = `$${rate.price.toFixed(6)}`;
    }

    // ü™ô –ö–†–ê–°–ò–í–´–ï –ò–ö–û–ù–ö–ò –í–ê–õ–Æ–¢
    const currencyIcon = getCurrencyIcon(rate.currency);

    item.innerHTML = `
        <div class="currency-info" onclick="selectCurrency('${rate.currency}')">
            <div class="currency-icon">${currencyIcon}</div>
            <div class="currency-details">
                <h4>${rate.currency}</h4>
                <p>${getCurrencyName(rate.currency)}</p>
            </div>
        </div>
        <div class="currency-actions">
            <div class="currency-rate">
                <div class="currency-price">${priceDisplay}</div>
                <div class="currency-change ${changeClass}">${changeIcon}${Math.abs(changePercent).toFixed(1)}%</div>
            </div>
            <button class="favorite-btn ${isFav ? 'active' : ''}" onclick="toggleFavorite('${rate.currency}')" title="${isFav ? '–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ' : '–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'}">
                <i class="fas fa-star"></i>
            </button>
        </div>
    `;
    
    return item;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã
function getCurrencyName(currency) {
    const names = {
        'BTC': 'Bitcoin',
        'ETH': 'Ethereum',
        'USDT': 'Tether',
        'USDC': 'USD Coin',
        
        'XRP': 'Ripple',
        'LTC': 'Litecoin',
        'BCH': 'Bitcoin Cash',
        'LINK': 'Chainlink',
        'USD': 'US Dollar',
        'EUR': 'Euro',
        'RUB': 'Russian Ruble',
        'UAH': 'Ukrainian Hryvnia',
        'KZT': 'Kazakhstani Tenge',
        'ARS': 'Argentine Peso',
        'BRL': 'Brazilian Real'
    };
    return names[currency] || currency;
}

// üîÑ FALLBACK –ò–ö–û–ù–ö–ò –î–õ–Ø –°–õ–£–ß–ê–ï–í –ö–û–ì–î–ê PNG –ù–ï –ó–ê–ì–†–£–ñ–ê–ï–¢–°–Ø
function getFallbackIcon(currency) {
    const fallbackSymbols = {
        'BTC': '‚Çø',
        'ETH': 'Œû', 
        'USDT': '‚ÇÆ',
        'USDC': '‚ìä',
        
        'XRP': '‚úï',
        'LTC': '≈Å',
        'BCH': '‚ö°',
        'LINK': 'üîó',
        'USD': '$',
        'EUR': '‚Ç¨',
        'RUB': '‚ÇΩ',
        'UAH': '‚Ç¥',
        'KZT': '‚Ç∏',
        'ARS': '$',
        'BRL': 'R$'
    };
    return fallbackSymbols[currency] || 'üí±';
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –≤–∞–ª—é—Ç—ã
function getCurrencyIcon(currency) {
    // üé® –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï –ò–ö–û–ù–ö–ò –í–ê–õ–Æ–¢ (48x48px)
    const availableIcons = [
        'BTC', 'ETH', 'USDT', 'USDC',
        'XRP', 'LTC', 'BCH', 'LINK',
        'USD', 'EUR', 'RUB', 'UAH', 'KZT', 'ARS', 'BRL'
    ];
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –∏–∫–æ–Ω–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
    if (availableIcons.includes(currency)) {
        const imgPath = `/assets/images/currencies/${currency.toLowerCase()}.png`;
        console.log(`üé® –ó–∞–≥—Ä—É–∂–∞–µ–º PNG –∏–∫–æ–Ω–∫—É –¥–ª—è ${currency}: ${imgPath}`);
        return `<img src="${imgPath}" alt="${currency}" class="currency-icon-img" onerror="console.error('‚ùå PNG –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è: ${imgPath}'); this.style.display='none'; this.parentNode.innerHTML='${getFallbackIcon(currency)}';">`;
    }
    
    // –§–æ–ª–ª–±—ç–∫ - —Å–∏–º–≤–æ–ª—ã –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤–∞–ª—é—Ç
    const fallbackIcons = {
        'TRX': 'üåä',
        'DOGE': 'üêï',
        'SHIB': 'üê±',
        'GBP': '¬£',
        'JPY': '¬•',
        'CNY': '¬•'
    };
    
    return fallbackIcons[currency] || 'üí±';
}

// –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã
function selectCurrency(currency) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –≤–∞–ª—é—Ç—ã –∏ –≤–∞–ª—é—Ç—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    pendingCurrencySelection = {
        type: currentCurrencyType,
        currency: currency
    };
    
    // –ï—Å–ª–∏ —ç—Ç–æ —Ä—É–±–ª–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –±–∞–Ω–∫–∞
    if (currency === 'RUB') {
        closeCurrencyModal();
        openBankModal();
        return;
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ USDT - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å–µ—Ç–∏
    if (currency === 'USDT') {
        closeCurrencyModal();
        openNetworkModal();
        return;
    }
    
    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤–∞–ª—é—Ç - –æ–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞
    finalizeCurrencySelection(currency);
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã
function finalizeCurrencySelection(currency, additionalInfo = null) {
    const currencyType = pendingCurrencySelection?.type || currentCurrencyType;
    
    if (currencyType === 'from') {
        fromCurrency = currency;
        let displayText = currency;
        let desc = getCurrencyName(currency);
        if (additionalInfo) {
            displayText += ` (${additionalInfo})`;
            desc = additionalInfo;
        }
        
        const button = document.querySelector('#from-currency');
        button.querySelector('.currency-name').textContent = displayText;
        // currency-desc —É–¥–∞–ª–µ–Ω
        button.querySelector('.currency-icon').innerHTML = getCurrencyIcon(currency);
    } else {
        toCurrency = currency;
        let displayText = currency;
        let desc = getCurrencyName(currency);
        if (additionalInfo) {
            displayText += ` (${additionalInfo})`;
            desc = additionalInfo;
        }
        
        const button = document.querySelector('#to-currency');
        button.querySelector('.currency-name').textContent = displayText;
        // currency-desc —É–¥–∞–ª–µ–Ω  
        button.querySelector('.currency-icon').innerHTML = getCurrencyIcon(currency);
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    pendingCurrencySelection = null;
    
    closeCurrencyModal();
    calculateExchange();
}

// –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –±–∞–Ω–∫–æ–≤
function openBankModal() {
    document.getElementById('bank-modal').style.display = 'flex';
    document.body.style.overflow = 'hidden';
}

function closeBankModal() {
    document.getElementById('bank-modal').style.display = 'none';
    document.body.style.overflow = 'auto';
}

function selectBank(bank) {
    currentBank = bank;
    finalizeCurrencySelection('RUB', bank);
    closeBankModal();
}

// –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ —Å–µ—Ç–µ–π
function openNetworkModal() {
    document.getElementById('network-modal').style.display = 'flex';
    document.body.style.overflow = 'hidden';
}

function closeNetworkModal() {
    document.getElementById('network-modal').style.display = 'none';
    document.body.style.overflow = 'auto';
}

function selectNetwork(network) {
    currentNetwork = network;
    finalizeCurrencySelection('USDT', network);
    closeNetworkModal();
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–∞–ª—é—Ç
// –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤–∞–ª—é—Ç —É–¥–∞–ª–µ–Ω–∞

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–π
function isCryptoPair(fromCurrency, toCurrency) {
    const cryptoCurrencies = ['BTC', 'ETH', 'USDT', 'USDC', 'XRP', 'LTC', 'BCH', 'LINK'];
    return cryptoCurrencies.includes(fromCurrency) && cryptoCurrencies.includes(toCurrency);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞—Ä–∞ —Å–º–µ—à–∞–Ω–Ω–æ–π (–∫—Ä–∏–ø—Ç–æ ‚Üí —Ñ–∏–∞—Ç)
function isCryptoToFiatPair(fromCurrency, toCurrency) {
    const cryptoCurrencies = ['BTC', 'ETH', 'USDT', 'USDC', 'XRP', 'LTC', 'BCH', 'LINK'];
    const fiatCurrencies = ['USD', 'EUR', 'RUB', 'UAH', 'KZT', 'ARS', 'BRL'];
    return cryptoCurrencies.includes(fromCurrency) && fiatCurrencies.includes(toCurrency);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞—Ä–∞ —Å–º–µ—à–∞–Ω–Ω–æ–π (—Ñ–∏–∞—Ç ‚Üí –∫—Ä–∏–ø—Ç–æ)
function isFiatToCryptoPair(fromCurrency, toCurrency) {
    const cryptoCurrencies = ['BTC', 'ETH', 'USDT', 'USDC', 'XRP', 'LTC', 'BCH', 'LINK'];
    const fiatCurrencies = ['USD', 'EUR', 'RUB', 'UAH', 'KZT', 'ARS', 'BRL'];
    return fiatCurrencies.includes(fromCurrency) && cryptoCurrencies.includes(toCurrency);
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
function getPairType(fromCurrency, toCurrency) {
    if (isCryptoPair(fromCurrency, toCurrency)) {
        return 'crypto'; // BTC ‚Üí ETH
    } else if (isCryptoToFiatPair(fromCurrency, toCurrency)) {
        return 'crypto-to-fiat'; // USDT ‚Üí RUB
    } else if (isFiatToCryptoPair(fromCurrency, toCurrency)) {
        return 'fiat-to-crypto'; // RUB ‚Üí USDT
    } else {
        return 'fiat'; // ARS ‚Üí BRL
    }
}

// –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞—è–≤–∫–∏
function proceedToOrder() {
    if (!currentCalculation) {
        showNotification('–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ–±–º–µ–Ω–∞', 'warning');
        return;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
    const pairType = getPairType(currentCalculation.fromCurrency, currentCalculation.toCurrency);
    
    // –û–¢–õ–ê–î–ö–ê: –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–∞—Ä—ã
    console.log(`üîç –ü–†–û–í–ï–†–ö–ê –ü–ê–†–´: ${currentCalculation.fromCurrency} ‚Üí ${currentCalculation.toCurrency}`);
    console.log(`üîç –¢–∏–ø –ø–∞—Ä—ã: ${pairType}`);
    console.log(`üîç currentCalculation:`, currentCalculation);
    
    let interfaceDescription = '';
    switch (pairType) {
        case 'crypto':
            interfaceDescription = '–î–≤–∞ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–æ–≤ + AML –¥–ª—è –∫–∞–∂–¥–æ–≥–æ';
            break;
        case 'crypto-to-fiat':
            interfaceDescription = '–ö—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å + AML, –∑–∞—Ç–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ–ª—É—á–µ–Ω–∏—è';
            break;
        case 'fiat-to-crypto':
            interfaceDescription = '–ö–æ—à–µ–ª–µ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–∏–ø—Ç—ã + AML –ø—Ä–æ–≤–µ—Ä–∫–∞';
            break;
        case 'fiat':
            const isSpecialCase = currentCalculation && (
                (currentCalculation.fromCurrency === 'ARS' && currentCalculation.toCurrency === 'RUB') ||
                (currentCalculation.fromCurrency === 'RUB' && currentCalculation.toCurrency === 'KZT') ||
                (currentCalculation.fromCurrency === 'RUB' && currentCalculation.toCurrency === 'UAH') ||
                (currentCalculation.fromCurrency === 'UAH' && currentCalculation.toCurrency === 'RUB')
            );
            if (isSpecialCase) {
                if (currentCalculation.fromCurrency === 'ARS' && currentCalculation.toCurrency === 'RUB') {
                    interfaceDescription = '–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—É–±–ª–µ–π –ë–ï–ó AML';
                } else if (currentCalculation.fromCurrency === 'RUB' && currentCalculation.toCurrency === 'KZT') {
                    interfaceDescription = '–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–Ω–≥–µ –ë–ï–ó AML';
                } else if (currentCalculation.fromCurrency === 'RUB' && currentCalculation.toCurrency === 'UAH') {
                    interfaceDescription = '–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä–∏–≤–µ–Ω –ë–ï–ó AML';
                } else if (currentCalculation.fromCurrency === 'UAH' && currentCalculation.toCurrency === 'RUB') {
                    interfaceDescription = '–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—É–±–ª–µ–π –ë–ï–ó AML';
                }
            } else {
                interfaceDescription = '–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞ –ë–ï–ó AML';
            }
            break;
    }
    console.log(`üîç –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: ${interfaceDescription}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–∞—Ä—ã
    updateOrderInterfaceForPairType(pairType);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –∑–∞—è–≤–∫–∏
    updateOrderSummary();
    showScreen('order-screen');
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    document.getElementById('wallet-address').value = '';
    document.getElementById('aml-result').innerHTML = '';
    currentAMLResult = null;
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∫–∞ –Ω–µ –≤–≤–µ–¥–µ–Ω –∞–¥—Ä–µ—Å
    setCreateButtonState(false);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–∏—á–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é
    setTimeout(() => {
        validateWalletAddress();
    }, 100);
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
function setCreateButtonState(enabled) {
    const createButton = document.getElementById('create-order-button');
    if (createButton) {
        console.log('üîß ========== –ò–ó–ú–ï–ù–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–Ø –ö–ù–û–ü–ö–ò ==========');
        console.log('üîß –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ disabled:', createButton.disabled);
        console.log('üîß –¢–µ–∫—É—â–∏–µ –∫–ª–∞—Å—Å—ã:', createButton.className);
        console.log('üîß –ó–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', enabled);
        
        if (enabled) {
            createButton.removeAttribute('disabled');
            createButton.classList.remove('disabled');
            console.log('üîß ‚úÖ –ê–ö–¢–ò–í–ò–†–û–í–ê–õ–ò –∫–Ω–æ–ø–∫—É');
        } else {
            createButton.setAttribute('disabled', 'disabled');
            createButton.classList.add('disabled');
            console.log('üîß ‚ùå –î–ï–ê–ö–¢–ò–í–ò–†–û–í–ê–õ–ò –∫–Ω–æ–ø–∫—É');
        }
        
        console.log('üîß –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ disabled:', createButton.disabled);
        console.log('üîß –ù–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã:', createButton.className);
        console.log(`üîÑ –ö–ù–û–ü–ö–ê –ó–ê–Ø–í–ö–ò: ${enabled ? '‚úÖ –ê–ö–¢–ò–í–ù–ê' : '‚ùå –ù–ï–ê–ö–¢–ò–í–ù–ê'}`);
        console.log('üîß ========== –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø –°–û–°–¢–û–Ø–ù–ò–Ø ==========');
    } else {
        console.log('‚ùå setCreateButtonState: –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
function updateOrderInterfaceForPairType(pairType) {
    console.log('üîß ========== –û–ë–ù–û–í–õ–ï–ù–ò–ï –ò–ù–¢–ï–†–§–ï–ô–°–ê ==========');
    console.log('üîß –¢–∏–ø –ø–∞—Ä—ã:', pairType);
    
    const addressLabel = document.querySelector('label[for="wallet-address"]');
    const addressInput = document.getElementById('wallet-address');
    const amlSection = document.getElementById('aml-section');
    const inputHelp = document.querySelector('.input-help');
    
    console.log('üîß –ù–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:');
    console.log('üîß addressLabel:', !!addressLabel);
    console.log('üîß addressInput:', !!addressInput);
    console.log('üîß amlSection:', !!amlSection);
    console.log('üîß inputHelp:', !!inputHelp);
    
    // –£–¥–∞–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    const toAddressDiv = document.getElementById('to-address-input');
    const receivingDetailsDiv = document.getElementById('receiving-details-input');
    if (toAddressDiv) {
        console.log('üîß –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ to-address-input');
        toAddressDiv.remove();
    }
    if (receivingDetailsDiv) {
        console.log('üîß –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ receiving-details-input');
        receivingDetailsDiv.remove();
    }
    
    if (pairType === 'crypto') {
        // –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ (BTC ‚Üí ETH) - –¥–≤–∞ –∞–¥—Ä–µ—Å–∞ –ë–ï–ó AML!
        console.log('üîß ========== CRYPTO –ë–ï–ó AML ==========');
        
        if (addressLabel) {
            addressLabel.textContent = '–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏';
            console.log('üîß ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç addressLabel');
        }
        if (addressInput) {
            addressInput.placeholder = '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∫–∏';
            console.log('üîß ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω placeholder addressInput');
        }
        if (amlSection) {
            console.log('üîß ‚úÖ amlSection –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –ø–æ–ª–µ –¥–ª—è –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—É—á–µ–Ω–∏—è...');
            amlSection.style.display = 'block';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ –ø–æ–ª–µ –¥–ª—è –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ë–ï–ó AML
            const toAddressDiv = document.createElement('div');
            toAddressDiv.className = 'address-input';
            toAddressDiv.innerHTML = `
                <label for="to-wallet-address">–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è</label>
                <div class="input-group">
                    <input type="text" id="to-wallet-address" placeholder="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω–∏—è">
                    <button class="scan-button" onclick="scanQR('to')">
                        <i class="fas fa-qrcode"></i>
                    </button>
                </div>
                <div class="input-help">
                    –ê–¥—Ä–µ—Å –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞
                </div>
            `;
            toAddressDiv.id = 'to-address-input';
            amlSection.parentNode.insertBefore(toAddressDiv, amlSection);
            
            // –£–ë–ò–†–ê–ï–ú AML –°–ï–ö–¶–ò–Æ –ü–û–õ–ù–û–°–¢–¨–Æ!
            amlSection.innerHTML = '';
            amlSection.style.display = 'none';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ë–ï–ó AML
            setTimeout(() => {
                const fromInput = document.getElementById('wallet-address');
                const toInput = document.getElementById('to-wallet-address');
                
                if (fromInput) fromInput.addEventListener('input', () => validateCryptoAddresses());
                if (toInput) toInput.addEventListener('input', () => validateCryptoAddresses());
                console.log('üîß ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏–≤—è–∑–∞–Ω—ã –ë–ï–ó AML');
            }, 100);
        } else {
            console.log('üîß ‚ùå amlSection –ù–ï –ù–ê–ô–î–ï–ù–ê!');
        }
        if (inputHelp) {
            inputHelp.textContent = '–í–≤–µ–¥–∏—Ç–µ –æ–±–∞ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –æ–±–º–µ–Ω–∞';
            console.log('üîß ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç inputHelp');
        }
        
    } else if (pairType === 'crypto-to-fiat') {
        // –°–º–µ—à–∞–Ω–Ω–∞—è –ø–∞—Ä–∞ (USDT ‚Üí RUB) - –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å + —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ë–ï–ó AML!
        console.log('üîß ========== CRYPTO-TO-FIAT –ë–ï–ó AML ==========');
        
        if (addressLabel) {
            addressLabel.textContent = '–ê–¥—Ä–µ—Å –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏';
            console.log('üîß ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç addressLabel');
        }
        if (addressInput) {
            addressInput.placeholder = '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å USDT –∫–æ—à–µ–ª—å–∫–∞';
            console.log('üîß ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω placeholder addressInput');
        }
        if (amlSection) {
            console.log('üîß ‚úÖ amlSection –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –ø–æ–ª–µ –¥–ª—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤...');
            amlSection.style.display = 'block';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–∏—è
            const receivingDetailsDiv = document.createElement('div');
            receivingDetailsDiv.className = 'address-input';
            receivingDetailsDiv.innerHTML = `
                <label for="receiving-details">–£–∫–∞–∂–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤</label>
                <div class="input-group">
                    <input type="text" id="receiving-details" placeholder="–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, —Å—á–µ—Ç–∞ –∏–ª–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã">
                    <button class="scan-button" onclick="scanQR('receiving')">
                        <i class="fas fa-qrcode"></i>
                    </button>
                </div>
                <div class="input-help">
                    –£–∫–∞–∂–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–∞—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
                </div>
            `;
            receivingDetailsDiv.id = 'receiving-details-input';
            
            console.log('üîß –°–æ–∑–¥–∞–Ω–æ –ø–æ–ª–µ receivingDetailsDiv:', receivingDetailsDiv);
            console.log('üîß –í—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ amlSection...');
            amlSection.parentNode.insertBefore(receivingDetailsDiv, amlSection);
            console.log('üîß ‚úÖ –ü–æ–ª–µ –¥–ª—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ!');
            
            // –£–ë–ò–†–ê–ï–ú AML –°–ï–ö–¶–ò–Æ –ü–û–õ–ù–û–°–¢–¨–Æ!
            amlSection.innerHTML = '';
            amlSection.style.display = 'none';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ë–ï–ó AML
            setTimeout(() => {
                const cryptoInput = document.getElementById('wallet-address');
                const receivingInput = document.getElementById('receiving-details');
                
                if (cryptoInput) cryptoInput.addEventListener('input', () => validateCryptoToFiatAddresses());
                if (receivingInput) receivingInput.addEventListener('input', () => validateCryptoToFiatAddresses());
                console.log('üîß ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏–≤—è–∑–∞–Ω—ã –ë–ï–ó AML');
            }, 100);
        } else {
            console.log('üîß ‚ùå amlSection –ù–ï –ù–ê–ô–î–ï–ù–ê! –ù–µ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª–µ –¥–ª—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤');
        }
        if (inputHelp) {
            inputHelp.textContent = '–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ–ª—É—á–µ–Ω–∏—è';
            console.log('üîß ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç inputHelp');
        }
         
     } else if (pairType === 'fiat-to-crypto') {
         // –°–º–µ—à–∞–Ω–Ω–∞—è –ø–∞—Ä–∞ (RUB ‚Üí USDT) - —Ç–æ–ª—å–∫–æ –∫–æ—à–µ–ª–µ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –ë–ï–ó AML!
         console.log('üîß ========== FIAT-TO-CRYPTO –ë–ï–ó AML ==========');
         
         if (addressLabel) {
             addressLabel.textContent = '–ö–æ—à–µ–ª–µ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã';
             console.log('üîß ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç addressLabel');
         }
         if (addressInput) {
             addressInput.placeholder = `–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å ${currentCalculation?.toCurrency || 'USDT'} –∫–æ—à–µ–ª—å–∫–∞`;
             console.log('üîß ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω placeholder addressInput');
         }
         if (amlSection) {
             console.log('üîß ‚úÖ amlSection –Ω–∞–π–¥–µ–Ω–∞, —É–±–∏—Ä–∞–µ–º AML...');
             
             // –£–ë–ò–†–ê–ï–ú AML –°–ï–ö–¶–ò–Æ –ü–û–õ–ù–û–°–¢–¨–Æ!
             amlSection.innerHTML = '';
             amlSection.style.display = 'none';
             
             // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ë–ï–ó AML
             setTimeout(() => {
                 const walletInput = document.getElementById('wallet-address');
                 
                 if (walletInput) walletInput.addEventListener('input', () => validateFiatToCryptoAddresses());
                 console.log('üîß ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏–≤—è–∑–∞–Ω—ã –ë–ï–ó AML');
             }, 100);
         }
         if (inputHelp) {
             inputHelp.textContent = '–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã';
             console.log('üîß ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç inputHelp');
         }
         
          } else {
         // –§–∏–∞—Ç–Ω–∞—è –ø–∞—Ä–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
         const isSpecialCase = currentCalculation && (
             (currentCalculation.fromCurrency === 'ARS' && currentCalculation.toCurrency === 'RUB') ||
             (currentCalculation.fromCurrency === 'RUB' && currentCalculation.toCurrency === 'KZT') ||
             (currentCalculation.fromCurrency === 'RUB' && currentCalculation.toCurrency === 'UAH') ||
             (currentCalculation.fromCurrency === 'UAH' && currentCalculation.toCurrency === 'RUB')
         );
         
         if (isSpecialCase) {
             // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏: ARS ‚Üí RUB, RUB ‚Üí KZT (–ø–µ—Ä–µ–≤–æ–¥—ã –Ω–∞ –∫–∞—Ä—Ç—ã)
             if (currentCalculation.fromCurrency === 'ARS' && currentCalculation.toCurrency === 'RUB') {
                 if (addressLabel) addressLabel.textContent = '–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—É–±–ª–µ–π';
                 if (addressInput) addressInput.placeholder = '–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏–ª–∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã';
                 if (inputHelp) inputHelp.textContent = '–£–∫–∞–∂–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—É–±–ª–µ–π –Ω–∞ –∫–∞—Ä—Ç—É';
             } else if (currentCalculation.fromCurrency === 'RUB' && currentCalculation.toCurrency === 'KZT') {
                 if (addressLabel) addressLabel.textContent = '–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–Ω–≥–µ';
                 if (addressInput) addressInput.placeholder = '–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏–ª–∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã';
                 if (inputHelp) inputHelp.textContent = '–£–∫–∞–∂–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–Ω–≥–µ –Ω–∞ –∫–∞—Ä—Ç—É';
             } else if (currentCalculation.fromCurrency === 'RUB' && currentCalculation.toCurrency === 'UAH') {
                 if (addressLabel) addressLabel.textContent = '–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä–∏–≤–µ–Ω';
                 if (addressInput) addressInput.placeholder = '–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏–ª–∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã';
                 if (inputHelp) inputHelp.textContent = '–£–∫–∞–∂–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä–∏–≤–µ–Ω –Ω–∞ –∫–∞—Ä—Ç—É';
             } else if (currentCalculation.fromCurrency === 'UAH' && currentCalculation.toCurrency === 'RUB') {
                 if (addressLabel) addressLabel.textContent = '–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—É–±–ª–µ–π';
                 if (addressInput) addressInput.placeholder = '–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏–ª–∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã';
                 if (inputHelp) inputHelp.textContent = '–£–∫–∞–∂–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—É–±–ª–µ–π –Ω–∞ –∫–∞—Ä—Ç—É';
             }
         } else {
             // –û–±—ã—á–Ω—ã–µ —Ñ–∏–∞—Ç–Ω—ã–µ –ø–∞—Ä—ã (ARS ‚Üí BRL, etc.)
             if (addressLabel) addressLabel.textContent = '–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞ (CVU/Alias)';
             if (addressInput) addressInput.placeholder = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞';
             if (inputHelp) inputHelp.textContent = '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Å—á–µ—Ç–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π';
         }
         
         if (amlSection) {
             amlSection.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º AML –¥–ª—è —Ñ–∏–∞—Ç–Ω—ã—Ö –ø–∞—Ä
             amlSection.innerHTML = `
                 <button class="secondary-button" id="aml-check-button">
                     <i class="fas fa-shield-alt"></i>
                     –ü—Ä–æ–≤–µ—Ä–∏—Ç—å AML
                 </button>
                 <div class="aml-result" id="aml-result"></div>
             `;
         }
     }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –∑–∞—è–≤–∫–∏
function updateOrderSummary() {
    const summary = document.getElementById('order-summary');
    const pairType = getPairType(currentCalculation.fromCurrency, currentCalculation.toCurrency);
    
    let addressSection = '';
    
    if (pairType === 'crypto') {
        // –î–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–∞ –∞–¥—Ä–µ—Å–∞
        const fromAddress = document.getElementById('wallet-address')?.value?.trim() || ''; // –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∫–∏
        const toAddress = document.getElementById('to-wallet-address')?.value?.trim() || ''; // –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω–∏—è
        
        if (fromAddress || toAddress) {
            addressSection = `
                <div class="info-section">
                    <h4>üéØ –ê–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–æ–≤</h4>
                    ${fromAddress ? createCopyableElement(fromAddress, '–ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∫–∏', 'üì§') : ''}
                    ${toAddress ? createCopyableElement(toAddress, '–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω–∏—è', 'üì•') : ''}
                </div>
            `;
        }
    } else if (pairType === 'crypto-to-fiat') {
        // –î–ª—è —Å–º–µ—à–∞–Ω–Ω—ã—Ö –ø–∞—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å –∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
        const cryptoAddress = document.getElementById('wallet-address')?.value?.trim() || '';
        const receivingDetails = document.getElementById('receiving-details')?.value?.trim() || '';
        
        if (cryptoAddress || receivingDetails) {
            addressSection = `
                <div class="info-section">
                    <h4>üí∞ –î–µ—Ç–∞–ª–∏ –æ–±–º–µ–Ω–∞</h4>
                    ${cryptoAddress ? createCopyableElement(cryptoAddress, '–ö—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∫–∏', 'üì§') : ''}
                    ${receivingDetails ? createCopyableElement(receivingDetails, '–†–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ–ª—É—á–µ–Ω–∏—è', 'üì•') : ''}
                </div>
                         `;
         }
     } else if (pairType === 'fiat-to-crypto') {
         // –î–ª—è —Å–º–µ—à–∞–Ω–Ω—ã—Ö –ø–∞—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—à–µ–ª–µ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–∏–ø—Ç—ã
         const walletAddress = document.getElementById('wallet-address')?.value?.trim() || '';
         
         if (walletAddress) {
             addressSection = `
                 <div class="info-section">
                     <h4>üí∞ –î–µ—Ç–∞–ª–∏ –æ–±–º–µ–Ω–∞</h4>
                     ${createCopyableElement(walletAddress, '–ö–æ—à–µ–ª–µ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è', 'üì•')}
                 </div>
             `;
         }
          } else {
         // –î–ª—è —Ñ–∏–∞—Ç–Ω—ã—Ö –ø–∞—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞ –∏–ª–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
         const account = document.getElementById('wallet-address')?.value?.trim() || '';
         
         if (account) {
             // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
             const isSpecialCase = (currentCalculation.fromCurrency === 'ARS' && currentCalculation.toCurrency === 'RUB') ||
                                 (currentCalculation.fromCurrency === 'RUB' && currentCalculation.toCurrency === 'KZT') ||
                                 (currentCalculation.fromCurrency === 'RUB' && currentCalculation.toCurrency === 'UAH') ||
                                 (currentCalculation.fromCurrency === 'UAH' && currentCalculation.toCurrency === 'RUB');
                                 
             if (isSpecialCase) {
                 let currencyName, icon;
                 if (currentCalculation.fromCurrency === 'ARS' && currentCalculation.toCurrency === 'RUB') {
                     currencyName = '—Ä—É–±–ª–µ–π';
                     icon = 'üí≥';
                 } else if (currentCalculation.fromCurrency === 'RUB' && currentCalculation.toCurrency === 'KZT') {
                     currencyName = '—Ç–µ–Ω–≥–µ';
                     icon = 'üí≥';
                 } else if (currentCalculation.fromCurrency === 'RUB' && currentCalculation.toCurrency === 'UAH') {
                     currencyName = '–≥—Ä–∏–≤–µ–Ω';
                     icon = 'üí≥';
                 } else if (currentCalculation.fromCurrency === 'UAH' && currentCalculation.toCurrency === 'RUB') {
                     currencyName = '—Ä—É–±–ª–µ–π';
                     icon = 'üí≥';
                 }
                 
                 addressSection = `
                     <div class="info-section">
                         <h4>üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ–ª—É—á–µ–Ω–∏—è</h4>
                         ${createCopyableElement(account, `–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è ${currencyName}`, icon)}
                     </div>
                 `;
             } else {
                 addressSection = `
                     <div class="info-section">
                         <h4>üè¶ –ù–æ–º–µ—Ä —Å—á–µ—Ç–∞</h4>
                         ${createCopyableElement(account, 'CVU/Alias', 'üí≥')}
                     </div>
                 `;
             }
         }
     }
    
    summary.innerHTML = `
        <h3>–°–≤–æ–¥–∫–∞ –æ–±–º–µ–Ω–∞</h3>
        <div class="info-row">
            <span>–û—Ç–¥–∞–µ—Ç–µ</span>
            <span><strong>${currentCalculation.fromAmount} ${currentCalculation.fromCurrency}</strong></span>
        </div>
        <div class="info-row">
            <span>–ü–æ–ª—É—á–∞–µ—Ç–µ</span>
            <span><strong>${formatCurrencyAmount(currentCalculation.toAmount)} ${currentCalculation.toCurrency}</strong></span>
        </div>
        <div class="info-row">
            <span>–ö—É—Ä—Å –æ–±–º–µ–Ω–∞</span>
            <span>1 ${currentCalculation.fromCurrency} = ${formatCurrencyAmount(currentCalculation.exchangeRate)} ${currentCalculation.toCurrency}</span>
        </div>
        ${addressSection}
    `;
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞ (—Å—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
function validateWalletAddress() {
    const createButton = document.getElementById('create-order-button');
    const addressInput = document.getElementById('wallet-address');
    const address = addressInput?.value?.trim() || '';
    
    console.log('üîç ========== –ù–ê–ß–ê–õ–û –í–ê–õ–ò–î–ê–¶–ò–ò ==========');
    console.log('üîç createButton –Ω–∞–π–¥–µ–Ω–∞:', !!createButton);
    console.log('üîç addressInput –Ω–∞–π–¥–µ–Ω:', !!addressInput);
    console.log('üîç address:', address);
    console.log('üîç currentCalculation:', !!currentCalculation);
    console.log(`üîç validateWalletAddress: –∞–¥—Ä–µ—Å –¥–ª–∏–Ω–æ–π ${address.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    
    if (!currentCalculation) {
        console.log('‚ùå validateWalletAddress: currentCalculation –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é');
        // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –±–µ–∑ currentCalculation (–õ–Æ–ë–´–ï —Å–∏–º–≤–æ–ª—ã)
        const shouldEnable = address.length >= 1;
        console.log('üîç shouldEnable:', shouldEnable, '(–∞–¥—Ä–µ—Å –∑–∞–ø–æ–ª–Ω–µ–Ω?)');
        setCreateButtonState(shouldEnable);
        console.log(`üîÑ –ë–ê–ó–û–í–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø: –∞–¥—Ä–µ—Å ${address.length} —Å–∏–º–≤–æ–ª–æ–≤`);
        console.log('üîç ========== –ö–û–ù–ï–¶ –ë–ê–ó–û–í–û–ô –í–ê–õ–ò–î–ê–¶–ò–ò ==========');
        return;
    }
    
    const pairType = getPairType(currentCalculation.fromCurrency, currentCalculation.toCurrency);
    console.log(`üîç validateWalletAddress: ${currentCalculation.fromCurrency} ‚Üí ${currentCalculation.toCurrency} = ${pairType}`);
    
    switch (pairType) {
        case 'crypto':
            validateCryptoAddresses();
            break;
                 case 'crypto-to-fiat':
             validateCryptoToFiatAddresses();
             break;
         case 'fiat-to-crypto':
             validateFiatToCryptoAddresses();
             break;
         case 'fiat':
             validateFiatAccount();
             break;
    }
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ (–¥–≤–∞ –∞–¥—Ä–µ—Å–∞) –ë–ï–ó AML!
function validateCryptoAddresses() {
    const fromAddress = document.getElementById('wallet-address')?.value?.trim() || ''; // –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∫–∏
    const toAddress = document.getElementById('to-wallet-address')?.value?.trim() || ''; // –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω–∏—è
    
    console.log('üîÑ –í–ê–õ–ò–î–ê–¶–ò–Ø CRYPTO –ë–ï–ó AML:', { fromAddress: fromAddress.length, toAddress: toAddress.length });
    
    // –†–∞–∑—Ä–µ—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –µ—Å–ª–∏ –æ–±–∞ –∞–¥—Ä–µ—Å–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã (–õ–Æ–ë–´–ï —Å–∏–º–≤–æ–ª—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
    const shouldEnable = fromAddress.length >= 1 && toAddress.length >= 1;
    setCreateButtonState(shouldEnable);
    console.log(`üîÑ CRYPTO –í–ê–õ–ò–î–ê–¶–ò–Ø –ë–ï–ó AML: ${shouldEnable ? '‚úÖ –ê–ö–¢–ò–í–ù–ê' : '‚ùå –ù–ï–ê–ö–¢–ò–í–ù–ê'}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –∑–∞–∫–∞–∑–∞
    if (currentCalculation) {
        updateOrderSummary();
    }
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∏–∞—Ç–Ω–æ–≥–æ —Å—á–µ—Ç–∞
function validateFiatAccount() {
    const account = document.getElementById('wallet-address').value.trim();
    const createButton = document.getElementById('create-order-button');
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–∞—Ä—ã
    const isSpecialCase = currentCalculation && (
        (currentCalculation.fromCurrency === 'ARS' && currentCalculation.toCurrency === 'RUB') ||
        (currentCalculation.fromCurrency === 'RUB' && currentCalculation.toCurrency === 'KZT') ||
        (currentCalculation.fromCurrency === 'RUB' && currentCalculation.toCurrency === 'UAH') ||
        (currentCalculation.fromCurrency === 'UAH' && currentCalculation.toCurrency === 'RUB')
    );
    
    const fieldType = isSpecialCase ? '—Ä–µ–∫–≤–∏–∑–∏—Ç—ã' : '–Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞';
    
    console.log(`üè¶ –í–ê–õ–ò–î–ê–¶–ò–Ø –§–ò–ê–¢–ù–û–ì–û ${fieldType.toUpperCase()}:`, account, '–¥–ª–∏–Ω–∞:', account.length);
    
    if (createButton) {
        // –î–ª—è —Ñ–∏–∞—Ç–Ω—ã—Ö –ø–∞—Ä —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞ –∏–ª–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã (–õ–Æ–ë–´–ï —Å–∏–º–≤–æ–ª—ã)
        setCreateButtonState(account.length >= 1);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –∑–∞–∫–∞–∑–∞
    if (currentCalculation) {
        updateOrderSummary();
    }
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–º–µ—à–∞–Ω–Ω—ã—Ö –ø–∞—Ä (–∫—Ä–∏–ø—Ç–æ ‚Üí —Ñ–∏–∞—Ç) –ë–ï–ó AML!
function validateCryptoToFiatAddresses() {
    const cryptoAddress = document.getElementById('wallet-address')?.value?.trim() || ''; // USDT –∞–¥—Ä–µ—Å
    const receivingDetails = document.getElementById('receiving-details')?.value?.trim() || ''; // —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ–ª—É—á–µ–Ω–∏—è
    
    console.log('üîÑ –í–ê–õ–ò–î–ê–¶–ò–Ø CRYPTO-TO-FIAT –ë–ï–ó AML:', { cryptoAddress: cryptoAddress.length, receivingDetails: receivingDetails.length });
    
    // –†–∞–∑—Ä–µ—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –µ—Å–ª–∏ –æ–±–∞ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã (–õ–Æ–ë–´–ï —Å–∏–º–≤–æ–ª—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
    const shouldEnable = cryptoAddress.length >= 1 && receivingDetails.length >= 1;
    setCreateButtonState(shouldEnable);
    console.log(`üîÑ CRYPTO-TO-FIAT –í–ê–õ–ò–î–ê–¶–ò–Ø –ë–ï–ó AML: ${shouldEnable ? '‚úÖ –ê–ö–¢–ò–í–ù–ê' : '‚ùå –ù–ï–ê–ö–¢–ò–í–ù–ê'}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –∑–∞–∫–∞–∑–∞
    if (currentCalculation) {
        updateOrderSummary();
    }
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–º–µ—à–∞–Ω–Ω—ã—Ö –ø–∞—Ä (—Ñ–∏–∞—Ç ‚Üí –∫—Ä–∏–ø—Ç–æ) –ë–ï–ó AML!
function validateFiatToCryptoAddresses() {
    const walletAddress = document.getElementById('wallet-address')?.value?.trim() || ''; // –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–∏–ø—Ç—ã
    
    console.log('üîÑ –í–ê–õ–ò–î–ê–¶–ò–Ø FIAT-TO-CRYPTO –ë–ï–ó AML:', { walletAddress: walletAddress.length });
    
    // –†–∞–∑—Ä–µ—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –µ—Å–ª–∏ –∞–¥—Ä–µ—Å –∑–∞–ø–æ–ª–Ω–µ–Ω (–õ–Æ–ë–´–ï —Å–∏–º–≤–æ–ª—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
    const shouldEnable = walletAddress.length >= 1;
    setCreateButtonState(shouldEnable);
    console.log(`üîÑ FIAT-TO-CRYPTO –í–ê–õ–ò–î–ê–¶–ò–Ø –ë–ï–ó AML: ${shouldEnable ? '‚úÖ –ê–ö–¢–ò–í–ù–ê' : '‚ùå –ù–ï–ê–ö–¢–ò–í–ù–ê'}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –∑–∞–∫–∞–∑–∞
    if (currentCalculation) {
        updateOrderSummary();
    }
}

// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ AML –ø—Ä–æ–≤–µ—Ä–∫–∏
async function performAMLCheck(addressType = 'to') {
    let addressInput;
    
    if (addressType === 'from') {
        addressInput = document.getElementById('wallet-address');
    } else if (addressType === 'to') {
        addressInput = document.getElementById('to-wallet-address');
    } else if (addressType === 'crypto') {
        // –î–ª—è —Å–º–µ—à–∞–Ω–Ω—ã—Ö –ø–∞—Ä crypto-to-fiat
        addressInput = document.getElementById('wallet-address');
    } else if (addressType === 'wallet') {
        // –î–ª—è —Å–º–µ—à–∞–Ω–Ω—ã—Ö –ø–∞—Ä fiat-to-crypto
        addressInput = document.getElementById('wallet-address');
    } else {
        addressInput = document.getElementById('wallet-address');
    }
    
    const address = addressInput?.value?.trim();
    
    if (!address) {
        let message;
        if (addressType === 'from') {
            message = '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∫–∏';
        } else if (addressType === 'to') {
            message = '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω–∏—è';
        } else if (addressType === 'crypto') {
            message = '–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å';
        } else if (addressType === 'wallet') {
            message = '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞';
        } else {
            message = '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞';
        }
        showNotification(message, 'warning');
        return;
    }
    
    let amlButton, amlResult;
    
    if (addressType === 'from') {
        amlButton = document.getElementById('aml-check-from-button');
        amlResult = document.getElementById('aml-from-result');
    } else if (addressType === 'to') {
        amlButton = document.getElementById('aml-check-to-button');
        amlResult = document.getElementById('aml-to-result');
    } else if (addressType === 'crypto') {
        amlButton = document.getElementById('aml-check-crypto-button');
        amlResult = document.getElementById('aml-crypto-result');
    } else if (addressType === 'wallet') {
        amlButton = document.getElementById('aml-check-wallet-button');
        amlResult = document.getElementById('aml-wallet-result');
    } else {
        amlButton = document.getElementById('aml-check-button');
        amlResult = document.getElementById('aml-result');
    }
    
    if (!amlButton || !amlResult) {
        // Fallback –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        return performOldAMLCheck();
    }
    
    amlButton.disabled = true;
    amlButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> –ü—Ä–æ–≤–µ—Ä—è–µ–º...';
    
    try {
        const response = await fetch('/api/aml-check', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                address: address,
                currency: addressType === 'from' ? currentCalculation.fromCurrency : currentCalculation.toCurrency,
                type: addressType
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            const amlResult = data.data;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç AML
            if (addressType === 'from') {
                currentFromAMLResult = amlResult;
            } else {
                currentToAMLResult = amlResult;
            }
            
            displayAMLResult(amlResult, addressType);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º AML —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–¥–º–∏–Ω–∞–º –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ "approved"
            if (amlResult.status !== 'approved') {
                sendAMLAlertToAdmins(address, amlResult, addressType);
            }
        } else {
            throw new Error(data.error || '–û—à–∏–±–∫–∞ AML –ø—Ä–æ–≤–µ—Ä–∫–∏');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ AML –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ AML. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', 'error');
        
        const resultDiv = addressType === 'from' ? 
            document.getElementById('aml-from-result') : 
            document.getElementById('aml-to-result');
        
        if (resultDiv) {
            resultDiv.innerHTML = `
                <div class="aml-result error">
                    <i class="fas fa-exclamation-triangle"></i>
                    –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.
                </div>
            `;
        }
    } finally {
        let button;
        let buttonText;
        
        if (addressType === 'from') {
            button = document.getElementById('aml-check-from-button');
            buttonText = '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∫–∏';
        } else if (addressType === 'to') {
            button = document.getElementById('aml-check-to-button');
            buttonText = '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω–∏—è';
        } else if (addressType === 'crypto') {
            button = document.getElementById('aml-check-crypto-button');
            buttonText = '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å –Ω–∞ AML';
        } else if (addressType === 'wallet') {
            button = document.getElementById('aml-check-wallet-button');
            buttonText = '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ –Ω–∞ AML';
        } else {
            button = document.getElementById('aml-check-button');
            buttonText = '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å AML';
        }
        
        if (button) {
            button.disabled = false;
            button.innerHTML = `<i class="fas fa-shield-alt"></i> ${buttonText}`;
        }
    }
}

// –°—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è AML –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
async function performOldAMLCheck() {
    const address = document.getElementById('wallet-address').value.trim();
    
    if (!address) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞', 'warning');
        return;
    }
    
    const amlButton = document.getElementById('aml-check-button');
    const amlResult = document.getElementById('aml-result');
    
    if (!amlButton || !amlResult) return;
    
    amlButton.disabled = true;
    amlButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> –ü—Ä–æ–≤–µ—Ä—è–µ–º...';
    
    try {
        const response = await fetch('/api/aml-check', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                address: address,
                currency: currentCalculation.toCurrency
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            currentAMLResult = data.data;
            displayAMLResult(currentAMLResult);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º AML —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–¥–º–∏–Ω–∞–º –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ "approved"
            if (currentAMLResult.status !== 'approved') {
                sendAMLAlertToAdmins(address, currentAMLResult);
            }
        } else {
            throw new Error(data.error || '–û—à–∏–±–∫–∞ AML –ø—Ä–æ–≤–µ—Ä–∫–∏');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ AML –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ AML. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', 'error');
        
        amlResult.innerHTML = `
            <div class="aml-result error">
                <i class="fas fa-exclamation-triangle"></i>
                –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.
            </div>
        `;
    } finally {
        amlButton.disabled = false;
        amlButton.innerHTML = '<i class="fas fa-shield-alt"></i> –ü—Ä–æ–≤–µ—Ä–∏—Ç—å AML';
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ AML
function displayAMLResult(result, addressType = 'to') {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç AML –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
    if (addressType === 'from') {
        currentFromAMLResult = result;
    } else if (addressType === 'to') {
        currentToAMLResult = result;
    } else {
        // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
        currentAMLResult = result;
    }
    
    const amlResultId = addressType === 'from' ? 'aml-from-result' : 
                       addressType === 'to' ? 'aml-to-result' : 'aml-result';
    const amlResult = document.getElementById(amlResultId);
    
    if (!amlResult) return; // –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
    
    let resultClass = 'success';
    let icon = 'fas fa-check-circle';
    let message = `–ê–¥—Ä–µ—Å ${addressType === 'from' ? '–æ—Ç–ø—Ä–∞–≤–∫–∏' : '–ø–æ–ª—É—á–µ–Ω–∏—è'} –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É`;
    
    if (result.status === 'rejected') {
        resultClass = 'warning'; // –ò–∑–º–µ–Ω–∏–ª —Å error –Ω–∞ warning
        icon = 'fas fa-exclamation-triangle';
        message = `–ê–¥—Ä–µ—Å ${addressType === 'from' ? '–æ—Ç–ø—Ä–∞–≤–∫–∏' : '–ø–æ–ª—É—á–µ–Ω–∏—è'} —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è (–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å)`;
    } else if (result.status === 'manual_review') {
        resultClass = 'warning';
        icon = 'fas fa-exclamation-triangle';
        message = `–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞ ${addressType === 'from' ? '–æ—Ç–ø—Ä–∞–≤–∫–∏' : '–ø–æ–ª—É—á–µ–Ω–∏—è'} (–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å)`;
    }

    // –î–ª—è –∫—Ä–∏–ø—Ç–æ–ø–∞—Ä –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ –∞–¥—Ä–µ—Å–∞ –ø–µ—Ä–µ–¥ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
    const createButton = document.getElementById('create-order-button');
    if (createButton && currentCalculation) {
        const isCrypto = isCryptoPair(currentCalculation.fromCurrency, currentCalculation.toCurrency);
        if (isCrypto) {
            // –†–∞–∑—Ä–µ—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–±–∞ –∞–¥—Ä–µ—Å–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
            const fromAddress = document.getElementById('from-wallet-address')?.value?.trim() || '';
            const toAddress = document.getElementById('wallet-address')?.value?.trim() || '';
            setCreateButtonState(fromAddress.length > 20 && toAddress.length > 20);
        } else {
            // –î–ª—è —Ñ–∏–∞—Ç–Ω—ã—Ö –ø–∞—Ä –∫–∞–∫ —Ä–∞–Ω—å—à–µ
            setCreateButtonState(true);
        }
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
    if (result.detailedReport && result.connections) {
        const majorConnections = result.connections.filter(c => c.percent >= 1.0);
        const minorConnections = result.connections.filter(c => c.percent < 1.0);
        
        let majorConnectionsHtml = majorConnections.map(conn => {
            const riskClass = conn.risk === 'high' ? 'high-risk' : conn.risk === 'medium' ? 'medium-risk' : 'low-risk';
            return `<div class="connection-item ${riskClass}">
                        <span class="connection-name">‚Ä¢ ${conn.name}</span>
                        <span class="connection-percent">${conn.percent}%</span>
                    </div>`;
        }).join('');

        let minorConnectionsHtml = '';
        if (minorConnections.length > 0) {
            const minorList = minorConnections.map(conn => conn.name).join(', ');
            minorConnectionsHtml = `
                <div class="minor-connections">
                    <p class="minor-header">–ú–µ–Ω–µ–µ 1.0%:</p>
                    <p class="minor-list">${minorList}</p>
                </div>
            `;
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –¥–ª—è —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
        let riskColor = '#10B981'; // –∑–µ–ª–µ–Ω—ã–π
        let riskIcon = 'üü¢';
        if (result.score > 80) {
            riskColor = '#EF4444'; // –∫—Ä–∞—Å–Ω—ã–π
            riskIcon = 'üî¥';
        } else if (result.score > 50) {
            riskColor = '#F59E0B'; // –∂–µ–ª—Ç—ã–π
            riskIcon = 'üü°';
        }

        amlResult.innerHTML = `
            <div class="aml-detailed-result ${resultClass}">
                <div class="aml-header">
                    <i class="${icon}"></i>
                    <strong>${message}</strong>
                </div>
                
                <div class="aml-detailed-report">
                    <div class="address-info">
                        ${createCopyableElement(result.address || 'N/A', 'üîµ –ê–¥—Ä–µ—Å', 'üìç')}
                    </div>
                    
                    <div class="blockchain-info">
                        ‚õìÔ∏è <strong>–ë–ª–æ–∫—á–µ–π–Ω:</strong> ${result.blockchain || 'Unknown'}
                    </div>
                    
                    <div class="connections-section">
                        <h4>–°–≤—è–∑–∏ –∞–¥—Ä–µ—Å–∞:</h4>
                        <div class="connections-list">
                            ${majorConnectionsHtml}
                        </div>
                        ${minorConnectionsHtml}
                    </div>
                    
                    <div class="risk-summary" style="border-left: 4px solid ${riskColor};">
                        üìà <strong>–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:</strong> 
                        <span style="color: ${riskColor};">${result.score > 80 ? '–í—ã—Å–æ–∫–∏–π' : result.score > 50 ? '–°—Ä–µ–¥–Ω–∏–π' : '–ù–∏–∑–∫–∏–π'} (${result.score}%) ${riskIcon}</span>
                    </div>
                </div>
            </div>
        `;
    } else {
        // –ü—Ä–æ—Å—Ç–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        amlResult.innerHTML = `
            <div class="aml-result ${resultClass}">
                <i class="${icon}"></i>
                <strong>${message}</strong>
                <p>–†–∏—Å–∫: ${result.risk} (${result.score}/100)</p>
                ${result.reasons.length > 0 ? `<p>–ü—Ä–∏—á–∏–Ω—ã: ${result.reasons.join(', ')}</p>` : ''}
            </div>
        `;
    }
    
    if (result.status === 'rejected') {
        amlResult.innerHTML += `
            <div style="margin-top: 15px;">
                <button class="secondary-button" onclick="contactOperator()">
                    <i class="fas fa-phone"></i> –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
                </button>
            </div>
        `;
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
async function createOrder() {
    console.log('üöÄ ========== –ö–õ–ò–ö –ü–û –ö–ù–û–ü–ö–ï –ó–ê–Ø–í–ö–ò ==========');
    console.log('üöÄ currentCalculation:', currentCalculation);
    console.log('üöÄ currentUserId:', currentUserId);
    
    if (!currentCalculation) {
        console.log('‚ùå currentCalculation –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç! –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç.');
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π currentCalculation
        currentCalculation = {
            fromAmount: 100,
            toAmount: 102.02,
            exchangeRate: 1.0202,
            fee: 0,
            fromCurrency: fromCurrency || 'USDT',
            toCurrency: toCurrency || 'USDT'
        };
        
        console.log('‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π currentCalculation:', currentCalculation);
    }
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ userId –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
    if (!currentUserId) {
        console.log('‚ö†Ô∏è currentUserId –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π');
        currentUserId = 123456789;
    }
    
    console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å userId:', currentUserId);
    
    const createButton = document.getElementById('create-order-button');
    setCreateButtonState(false);
    createButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É...';
    
    try {
        const pairType = getPairType(currentCalculation.fromCurrency, currentCalculation.toCurrency);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Ñ–∏–∞—Ç–Ω—ã—Ö –ø–∞—Ä - –Ω—É–∂–µ–Ω –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞ –∏–ª–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
        if (pairType === 'fiat') {
            const address = document.getElementById('wallet-address').value.trim();
                         if (!address) {
                 // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–∞—Ä—ã
                 const isSpecialCase = (currentCalculation.fromCurrency === 'ARS' && currentCalculation.toCurrency === 'RUB') ||
                                     (currentCalculation.fromCurrency === 'RUB' && currentCalculation.toCurrency === 'KZT') ||
                                     (currentCalculation.fromCurrency === 'RUB' && currentCalculation.toCurrency === 'UAH') ||
                                     (currentCalculation.fromCurrency === 'UAH' && currentCalculation.toCurrency === 'RUB');
                 const message = isSpecialCase ? '–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è' : '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞';
                
                showNotification(message, 'warning');
                setCreateButtonState(true);
                createButton.innerHTML = '<i class="fas fa-check"></i> –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É';
                return;
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è fiat-to-crypto –ø–∞—Ä - –Ω—É–∂–µ–Ω –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
        if (pairType === 'fiat-to-crypto') {
            const address = document.getElementById('wallet-address').value.trim();
            if (!address) {
                showNotification('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞', 'warning');
                setCreateButtonState(true);
                createButton.innerHTML = '<i class="fas fa-check"></i> –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É';
                return;
            }
        }
        
        let orderData;
        
        if (pairType === 'crypto') {
            // –î–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä
            const fromAddress = document.getElementById('wallet-address')?.value?.trim() || ''; // –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∫–∏
            const toAddress = document.getElementById('to-wallet-address')?.value?.trim() || ''; // –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω–∏—è
            
            if (!fromAddress) {
                showNotification('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∫–∏', 'warning');
                return;
            }
            
            if (!toAddress) {
                showNotification('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω–∏—è', 'warning');
                return;
            }
            
            orderData = {
                userId: currentUserId,
                userData: currentUserData, // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                fromCurrency: currentCalculation.fromCurrency,
                toCurrency: currentCalculation.toCurrency,
                fromAmount: currentCalculation.fromAmount,
                toAmount: currentCalculation.toAmount,
                fromAddress: fromAddress,
                toAddress: toAddress,
                exchangeRate: currentCalculation.exchangeRate,
                fee: currentCalculation.fee,
                amlFromResult: currentFromAMLResult || { status: 'not_checked', risk: 'unknown' },
                amlToResult: currentToAMLResult || { status: 'not_checked', risk: 'unknown' },
                pairType: 'crypto',
                network: currentNetwork || null,
                bank: (currentCalculation.fromCurrency === 'RUB' || currentCalculation.toCurrency === 'RUB') ? currentBank : null
            };
        } else if (pairType === 'crypto-to-fiat') {
            // –î–ª—è —Å–º–µ—à–∞–Ω–Ω—ã—Ö –ø–∞—Ä (USDT ‚Üí RUB)
            const cryptoAddress = document.getElementById('wallet-address')?.value?.trim() || ''; // USDT –∞–¥—Ä–µ—Å
            const receivingDetails = document.getElementById('receiving-details')?.value?.trim() || ''; // —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ–ª—É—á–µ–Ω–∏—è
            
            if (!cryptoAddress) {
                showNotification('–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å', 'warning');
                setCreateButtonState(true);
                createButton.innerHTML = '<i class="fas fa-check"></i> –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É';
                return;
            }
            
            if (!receivingDetails) {
                showNotification('–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è', 'warning');
                setCreateButtonState(true);
                createButton.innerHTML = '<i class="fas fa-check"></i> –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É';
                return;
            }
            
            console.log('üîÑ –°–û–ó–î–ê–ù–ò–ï CRYPTO-TO-FIAT –ó–ê–Ø–í–ö–ò:', { cryptoAddress, receivingDetails });
            orderData = {
                userId: currentUserId,
                userData: currentUserData, // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                fromCurrency: currentCalculation.fromCurrency,
                toCurrency: currentCalculation.toCurrency,
                fromAmount: currentCalculation.fromAmount,
                toAmount: currentCalculation.toAmount,
                fromAddress: cryptoAddress, // USDT –∞–¥—Ä–µ—Å
                toAddress: receivingDetails, // —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ–ª—É—á–µ–Ω–∏—è
                exchangeRate: currentCalculation.exchangeRate,
                fee: currentCalculation.fee,
                amlFromResult: currentFromAMLResult || { status: 'not_checked', risk: 'unknown' },
                amlToResult: { status: 'not_required', risk: 'none' }, // –¥–ª—è —Ñ–∏–∞—Ç–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ AML –Ω–µ –Ω—É–∂–µ–Ω
                pairType: 'crypto-to-fiat',
                network: currentNetwork || null,
                bank: (currentCalculation.fromCurrency === 'RUB' || currentCalculation.toCurrency === 'RUB') ? currentBank : null
            };
            console.log('üîÑ –§–ò–ù–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï CRYPTO-TO-FIAT –ó–ê–Ø–í–ö–ò:', orderData);
        } else if (pairType === 'fiat-to-crypto') {
            // –î–ª—è —Å–º–µ—à–∞–Ω–Ω—ã—Ö –ø–∞—Ä (RUB ‚Üí USDT)
            const walletAddress = document.getElementById('wallet-address')?.value?.trim() || ''; // –∫–æ—à–µ–ª–µ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–∏–ø—Ç—ã
            
            if (!walletAddress) {
                showNotification('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞', 'warning');
                setCreateButtonState(true);
                createButton.innerHTML = '<i class="fas fa-check"></i> –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É';
                return;
            }
            
            console.log('üîÑ –°–û–ó–î–ê–ù–ò–ï FIAT-TO-CRYPTO –ó–ê–Ø–í–ö–ò:', { walletAddress });
            orderData = {
                userId: currentUserId,
                userData: currentUserData, // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                fromCurrency: currentCalculation.fromCurrency,
                toCurrency: currentCalculation.toCurrency,
                fromAmount: currentCalculation.fromAmount,
                toAmount: currentCalculation.toAmount,
                fromAddress: '', // –†–µ–∫–≤–∏–∑–∏—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –±—É–¥—É—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
                toAddress: walletAddress, // –∫–æ—à–µ–ª–µ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–∏–ø—Ç—ã
                exchangeRate: currentCalculation.exchangeRate,
                fee: currentCalculation.fee,
                amlFromResult: { status: 'not_required', risk: 'none' }, // –¥–ª—è —Ñ–∏–∞—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ AML –Ω–µ –Ω—É–∂–µ–Ω
                amlToResult: currentFromAMLResult || { status: 'not_checked', risk: 'unknown' }, // AML –∫–æ—à–µ–ª—å–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è
                pairType: 'fiat-to-crypto',
                network: currentNetwork || null,
                bank: (currentCalculation.fromCurrency === 'RUB' || currentCalculation.toCurrency === 'RUB') ? currentBank : null
            };
            console.log('üîÑ –§–ò–ù–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï FIAT-TO-CRYPTO –ó–ê–Ø–í–ö–ò:', orderData);
                } else {
             // –î–ª—è —Ñ–∏–∞—Ç–Ω—ã—Ö –ø–∞—Ä
             const address = document.getElementById('wallet-address').value.trim(); // –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞ –∏–ª–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
             
             // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—ã
             const isSpecialCase = (currentCalculation.fromCurrency === 'ARS' && currentCalculation.toCurrency === 'RUB') ||
                                 (currentCalculation.fromCurrency === 'RUB' && currentCalculation.toCurrency === 'KZT') ||
                                 (currentCalculation.fromCurrency === 'RUB' && currentCalculation.toCurrency === 'UAH') ||
                                 (currentCalculation.fromCurrency === 'UAH' && currentCalculation.toCurrency === 'RUB');
                                 
             if (isSpecialCase) {
                 const pairName = `${currentCalculation.fromCurrency}‚Üí${currentCalculation.toCurrency}`;
                                 console.log(`üí≥ –°–û–ó–î–ê–ù–ò–ï ${pairName} –ó–ê–Ø–í–ö–ò - —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:`, address);
                                orderData = {
                    userId: currentUserId,
                    userData: currentUserData, // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    fromCurrency: currentCalculation.fromCurrency,
                    toCurrency: currentCalculation.toCurrency,
                    fromAmount: currentCalculation.fromAmount,
                    toAmount: currentCalculation.toAmount,
                    fromAddress: '', // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
                    toAddress: address, // –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤
                    exchangeRate: currentCalculation.exchangeRate,
                    fee: currentCalculation.fee,
                    pairType: 'fiat',
                    bank: (currentCalculation.fromCurrency === 'RUB' || currentCalculation.toCurrency === 'RUB') ? currentBank : null
                };
                 console.log(`üí≥ –§–ò–ù–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï ${pairName} –ó–ê–Ø–í–ö–ò:`, orderData);
             } else {
                                 console.log('üè¶ –°–û–ó–î–ê–ù–ò–ï –§–ò–ê–¢–ù–û–ô –ó–ê–Ø–í–ö–ò - –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞:', address);
                                orderData = {
                    userId: currentUserId,
                    userData: currentUserData, // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    fromCurrency: currentCalculation.fromCurrency,
                    toCurrency: currentCalculation.toCurrency,
                    fromAmount: currentCalculation.fromAmount,
                    toAmount: currentCalculation.toAmount,
                    fromAddress: '', // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
                    toAddress: address, // –ù–æ–º–µ—Ä —Å—á–µ—Ç–∞ –¥–ª—è —Ñ–∏–∞—Ç–Ω—ã—Ö –ø–∞—Ä
                    exchangeRate: currentCalculation.exchangeRate,
                    fee: currentCalculation.fee,
                    pairType: 'fiat',
                    bank: (currentCalculation.fromCurrency === 'RUB' || currentCalculation.toCurrency === 'RUB') ? currentBank : null
                };
                 console.log('üè¶ –§–ò–ù–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –§–ò–ê–¢–ù–û–ô –ó–ê–Ø–í–ö–ò:', orderData);
             }
         }
        
        console.log('üöÄ ========== –û–¢–ü–†–ê–í–ö–ê –ó–ê–Ø–í–ö–ò –ù–ê –°–ï–†–í–ï–† ==========');
        console.log('üìã –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:', orderData);
        console.log('üìã JSON –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', JSON.stringify(orderData, null, 2));
        
        const response = await fetch('/api/create-order', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(orderData)
        });
        
        console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status, response.statusText);
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
            const data = await response.json();
    console.log('üìã –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', data);
    console.log('üìã data.data:', data.data);
    console.log('üìã data.data.id:', data.data.id);
    console.log('üìã data.data.orderId:', data.data.orderId);
    
    if (data.success) {
        console.log('üöÄ ========== –ó–ê–Ø–í–ö–ê –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù–ê ==========');
        console.log('‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:', data.data);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º id –∏–ª–∏ orderId –∫–∞–∫ fallback
        const orderIdToShow = data.data.id || data.data.orderId || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        console.log('üìã ID –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:', orderIdToShow);
        
        showNotification(`–ó–∞—è–≤–∫–∞ #${orderIdToShow} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!`, 'success');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
            try {
                if (tg && typeof tg.showAlert === 'function') {
                    tg.showAlert(`–ó–∞—è–≤–∫–∞ #${orderIdToShow} —Å–æ–∑–¥–∞–Ω–∞!\n\n–û–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.`);
                } else {
                    // –ï—Å–ª–∏ –Ω–µ—Ç Telegram, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    alert(`–ó–∞—è–≤–∫–∞ #${orderIdToShow} —Å–æ–∑–¥–∞–Ω–∞!\n\n–û–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.`);
                }
            } catch (alertError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', alertError);
                // Fallback —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                alert(`–ó–∞—è–≤–∫–∞ #${orderIdToShow} —Å–æ–∑–¥–∞–Ω–∞!\n\n–û–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.`);
            }
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
            setTimeout(() => {
                showScreen('calculator-screen');
                const navItem = document.querySelector('.nav-item[data-screen="calculator-screen"]');
                if (navItem) navItem.click();
                
                // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
                const fromAmountInput = document.getElementById('from-amount');
                const toAmountInput = document.getElementById('to-amount');
                if (fromAmountInput) fromAmountInput.value = '';
                if (toAmountInput) toAmountInput.value = '';
                calculateExchange();
            }, 2000);
            
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);
            throw new Error(data.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏');
        }
        
    } catch (error) {
        console.error('üöÄ ========== –û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø –ó–ê–Ø–í–ö–ò ==========');
        console.error('üöÄ –¢–∏–ø –æ—à–∏–±–∫–∏:', error.name);
        console.error('üöÄ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏:', error.message);
        console.error('üöÄ –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:', error);
        showNotification('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', 'error');
    } finally {
        console.log('üöÄ ========== –ó–ê–í–ï–†–®–ï–ù–ò–ï –°–û–ó–î–ê–ù–ò–Ø –ó–ê–Ø–í–ö–ò ==========');
        setCreateButtonState(true);
        createButton.innerHTML = '<i class="fas fa-check"></i> –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É';
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function loadUserProfile() {
    try {
        const response = await fetch(`/api/profile/${currentUserId}`);
        const data = await response.json();
        
        if (data.success) {
            userProfile = data.data;
            console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω');
        } else {
            console.log('‚ÑπÔ∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
        console.log('‚ÑπÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
function updateProfileDisplay() {
    console.log('üë§ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è...');
    console.log('üì± tg:', tg ? '–¥–æ—Å—Ç—É–ø–µ–Ω' : '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    console.log('üë§ currentUserId:', currentUserId);
    console.log('üìÑ userProfile:', userProfile);
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram WebApp API
        const telegramUser = tg?.initDataUnsafe?.user;
        console.log('üì± telegramUser:', telegramUser);
        
        // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–∞–Ω–Ω—ã–º –∏–∑ Telegram)
        const firstName = telegramUser?.first_name || userProfile?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        const lastName = telegramUser?.last_name || userProfile?.last_name || '';
        const fullName = `${firstName} ${lastName}`.trim();
        const username = telegramUser?.username || userProfile?.username || `user${currentUserId}`;
        
        console.log('‚ú® –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:', { firstName, lastName, fullName, username });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ (–ü–†–ò–û–†–ò–¢–ï–¢!)
    const headerUserName = document.getElementById('header-user-name');
    if (headerUserName) {
        headerUserName.textContent = firstName;
        console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω header-user-name:', firstName);
    } else {
        console.log('‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç header-user-name –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å (–µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
    const profileName = document.getElementById('profile-name');
    const profileUsername = document.getElementById('profile-username');
    
    if (profileName) {
        profileName.textContent = fullName;
        console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω profile-name:', fullName);
    } else {
        console.log('‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç profile-name –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    if (profileUsername) {
        profileUsername.textContent = `@${username}`;
        console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω profile-username:', `@${username}`);
    } else {
        console.log('‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç profile-username –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ñ–∏–ª—è
    const profileStatus = document.querySelector('.profile-status');
    if (profileStatus) {
        if (currentUserId && currentUserId !== 123456789) {
            profileStatus.textContent = '‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω';
            profileStatus.className = 'profile-status verified';
        } else {
            profileStatus.textContent = '–ì–æ—Å—Ç—å';
            profileStatus.className = 'profile-status guest';
        }
        console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ñ–∏–ª—è');
    }
    
    // –ê–≤–∞—Ç–∞—Ä (–µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ –≤ Telegram, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ)
    const avatarImg = document.getElementById('avatar-image');
    if (avatarImg) {
        if (telegramUser?.photo_url) {
            console.log('üñºÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤–∞—Ç–∞—Ä –∏–∑ Telegram:', telegramUser.photo_url);
            avatarImg.src = telegramUser.photo_url;
        } else if (userProfile?.avatar) {
            console.log('üñºÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤–∞—Ç–∞—Ä –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è:', userProfile.avatar);
            avatarImg.src = userProfile.avatar;
        } else {
            console.log('üñºÔ∏è –°–æ–∑–¥–∞–µ–º –∞–≤–∞—Ç–∞—Ä —Å –∏–Ω–∏—Ü–∏–∞–ª–∞–º–∏');
            // üé® –ü–†–ê–í–ò–õ–¨–ù–´–ô –ê–í–ê–¢–ê–† –° –ò–ù–ò–¶–ò–ê–õ–ê–ú–ò –ß–ï–†–ï–ó SVG
            const initials = firstName.charAt(0) + (lastName.charAt(0) || '');
            const svgAvatar = `data:image/svg+xml;charset=UTF-8,${encodeURIComponent(`
                <svg width="40" height="40" xmlns="http://www.w3.org/2000/svg">
                    <defs>
                        <linearGradient id="grad" x1="0%" y1="0%" x2="100%" y2="100%">
                            <stop offset="0%" style="stop-color:#007AFF;stop-opacity:1" />
                            <stop offset="100%" style="stop-color:#34C759;stop-opacity:1" />
                        </linearGradient>
                    </defs>
                    <circle cx="20" cy="20" r="20" fill="url(#grad)" />
                    <text x="20" y="26" font-family="Arial, sans-serif" font-size="16" font-weight="bold" text-anchor="middle" fill="white">${initials}</text>
                </svg>
            `)}`;
            avatarImg.src = svgAvatar;
            console.log('‚úÖ SVG –∞–≤–∞—Ç–∞—Ä —Å–æ–∑–¥–∞–Ω —Å –∏–Ω–∏—Ü–∏–∞–ª–∞–º–∏:', initials);
        }
    } else {
        console.log('‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç avatar-image –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ updateProfileDisplay:', error);
        // –ë–∞–∑–æ–≤–∞—è –∑–∞—â–∏—Ç–∞ - —Ö–æ—Ç—è –±—ã –∏–º—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
        try {
            const headerUserName = document.getElementById('header-user-name');
            if (headerUserName && !headerUserName.textContent) {
                headerUserName.textContent = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
            }
        } catch (e) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è:', e);
        }
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
function updateLevelDisplay(level, stats) {
    console.log('üìä –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è:', level, stats);
    
    // –í –ø—Ä–æ—Ñ–∏–ª–µ (–µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
    
    const currentLevelEl = document.getElementById('current-level');
    if (currentLevelEl) {
        currentLevelEl.innerHTML = `
            <span class="level-badge" style="background: ${level.color}">${level.level}</span>
            <span class="level-name">${level.name}</span>
        `;
    }
    
    // –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    const progress = calculateLevelProgress(level.level, stats);
    
    const progressFill = document.getElementById('level-progress-fill');
    if (progressFill) {
        progressFill.style.width = `${progress.percentage}%`;
    }
    
    const progressDesc = document.getElementById('progress-description');
    if (progressDesc) {
        progressDesc.textContent = progress.description;
    }
    
    const profileProgress = document.getElementById('profile-level-progress');
    if (profileProgress) {
        profileProgress.textContent = `${progress.percentage}%`;
    }
    
    // –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
    const nextLevelEl = document.getElementById('next-level');
    if (nextLevelEl) {
        nextLevelEl.innerHTML = `<span>–°–ª–µ–¥—É—é—â–∏–π: ${progress.nextLevel}</span>`;
    }
    
    // –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
    const benefits = level.benefits || ['–î–æ—Å—Ç—É–ø –∫ –±–∞–∑–æ–≤—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º', '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7'];
    const benefitsList = benefits.map(benefit => `<li>${benefit}</li>`).join('');
    const levelBenefits = document.getElementById('level-benefits');
    if (levelBenefits) {
        levelBenefits.innerHTML = `
            <h4>–í–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</h4>
            <ul>${benefitsList}</ul>
        `;
    }
}

// –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É—Ä–æ–≤–Ω—è
function calculateLevelProgress(currentLevel, stats) {
    const ordersCount = stats.ordersCount || 0;
    const totalVolume = stats.totalVolume || 0;
    
    let nextLevel, requirement, current, target, percentage, description;
    
    switch (currentLevel) {
        case 'NEWBIE':
            nextLevel = '–¢–†–ï–ô–î–ï–†';
            requirement = '–æ–±–º–µ–Ω–æ–≤';
            current = ordersCount;
            target = 5;
            break;
        case 'TRADER':
            nextLevel = '–ü–†–û';
            requirement = '–æ–±–º–µ–Ω–æ–≤';
            current = ordersCount;
            target = 25;
            break;
        case 'PRO':
            nextLevel = 'VIP';
            requirement = '–æ–±–º–µ–Ω–æ–≤';
            current = ordersCount;
            target = 100;
            break;
        case '–ê–î–ú–ò–ù':
            nextLevel = '–ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†';
            requirement = '';
            current = target = 1;
            break;
        default:
            nextLevel = '–ú–ê–ö–°–ò–ú–£–ú';
            requirement = '';
            current = target = 1;
    }
    
    percentage = Math.min(100, Math.round((current / target) * 100));
    
    if (currentLevel === '–ê–î–ú–ò–ù') {
        description = '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏!';
    } else {
        description = target > current ? 
            `–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: ${target - current} ${requirement}` : 
            '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!';
    }
    
    return { percentage, description, nextLevel };
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞
async function loadDashboardData(period = '7d') {
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const statsResponse = await fetch(`/api/stats/${currentUserId}?period=${period}`);
        const statsData = await statsResponse.json();
        
        if (statsData.success) {
            updateDashboardMetrics(statsData.data.summary);
            updateCharts(statsData.data.charts);
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const marketResponse = await fetch('/api/market-data');
        const marketData = await marketResponse.json();
        
        if (marketData.success) {
            updateMarketData(marketData.data);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –¥–∞—à–±–æ—Ä–¥–∞
function updateDashboardMetrics(summary) {
    document.getElementById('total-volume').textContent = `$${formatNumber(summary.totalVolume || 0)}`;
    document.getElementById('total-orders').textContent = summary.totalOrders || 0;
    document.getElementById('total-fees').textContent = `$${formatNumber(summary.totalFees || 0)}`;
    
    if (userProfile?.referralStats) {
        document.getElementById('referral-earnings').textContent = `$${formatNumber(userProfile.referralStats.total_commission || 0)}`;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
function updateCharts(chartsData) {
    // –ì—Ä–∞—Ñ–∏–∫ –æ–±—ä–µ–º–∞
    updateChart('volume-chart', {
        type: 'line',
        data: {
            labels: chartsData.volume.labels,
            datasets: [{
                label: '–û–±—ä–µ–º ($)',
                data: chartsData.volume.data,
                borderColor: '#007AFF',
                backgroundColor: 'rgba(0, 122, 255, 0.1)',
                fill: true,
                tension: 0.4
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: { display: false }
            },
            scales: {
                y: { beginAtZero: true }
            }
        }
    });
    
    // –ì—Ä–∞—Ñ–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
    updateChart('orders-chart', {
        type: 'bar',
        data: {
            labels: chartsData.orders.labels,
            datasets: [{
                label: '–û–ø–µ—Ä–∞—Ü–∏–∏',
                data: chartsData.orders.data,
                backgroundColor: 'rgba(0, 122, 255, 0.8)',
                borderColor: '#007AFF',
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: { display: false }
            },
            scales: {
                y: { beginAtZero: true }
            }
        }
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
function updateChart(canvasId, config) {
    const ctx = document.getElementById(canvasId);
    if (!ctx) return;
    
    // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≥—Ä–∞—Ñ–∏–∫
    if (charts[canvasId]) {
        charts[canvasId].destroy();
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫
    charts[canvasId] = new Chart(ctx, config);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function updateMarketData(marketData) {
    const marketGrid = document.getElementById('market-data');
    if (!marketGrid || !marketData.trends) return;
    
    marketGrid.innerHTML = marketData.trends.map(trend => `
        <div class="market-item">
            <div>
                <div class="market-currency">${trend.currency}</div>
                <div class="market-price">${trend.price}</div>
            </div>
            <div class="market-change ${trend.change24h.startsWith('+') ? 'positive' : 'negative'}">
                ${trend.change24h}
            </div>
        </div>
    `).join('');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
async function loadAchievements() {
    try {
        const response = await fetch(`/api/achievements/${currentUserId}`);
        const data = await response.json();
        
        if (data.success) {
            updateAchievementsDisplay(data.data);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function updateAchievementsDisplay(achievementsData) {
    const earned = achievementsData.earned || [];
    const available = achievementsData.available || [];
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    document.getElementById('earned-achievements').textContent = earned.length;
    document.getElementById('total-achievements').textContent = available.length;
    const progress = available.length > 0 ? Math.round((earned.length / available.length) * 100) : 0;
    document.getElementById('achievement-progress').textContent = `${progress}%`;
    
    // –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    const achievementsGrid = document.getElementById('achievements-grid');
    if (!achievementsGrid) return;
    
    const earnedIds = earned.map(a => a.achievement_id);
    
    achievementsGrid.innerHTML = available.map(achievement => {
        const isEarned = earnedIds.includes(achievement.id);
        return `
            <div class="achievement-card ${isEarned ? 'earned' : 'locked'}">
                ${isEarned ? '<div class="achievement-earned-badge">‚úì</div>' : ''}
                <div class="achievement-icon">${achievement.icon}</div>
                <div class="achievement-name">${achievement.name}</div>
                <div class="achievement-description">${achievement.description}</div>
                <div class="achievement-reward">${achievement.reward}</div>
            </div>
        `;
    }).join('');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
async function loadNews() {
    try {
        const response = await fetch('/api/news');
        const data = await response.json();
        
        if (data.success) {
            updateNewsDisplay(data.data);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
function updateNewsDisplay(news) {
    const newsList = document.getElementById('news-list');
    if (!newsList || !news.length) return;
    
    newsList.innerHTML = news.map(item => `
        <div class="news-item">
            <div class="news-header">
                <div>
                    <div class="news-title">${item.title}</div>
                    <div class="news-description">${item.description}</div>
                </div>
                <div class="news-type ${item.type}">${item.type}</div>
            </div>
            <div class="news-date">${formatDate(item.date)}</div>
        </div>
    `).join('');
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
async function saveSettings() {
    try {
        const settings = {
            notifications_enabled: document.getElementById('notifications-enabled').checked,
            language: document.getElementById('language-select').value,
            theme: document.getElementById('theme-select').value,
            currency_preference: document.getElementById('currency-preference').value,
            privacy_level: document.getElementById('privacy-level').value,
            two_fa_enabled: document.getElementById('two-fa-enabled').checked
        };
        
        const response = await fetch(`/api/profile/${currentUserId}/settings`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(settings)
        });
        
        const data = await response.json();
        
        if (data.success) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ
            localStorage.setItem('userSettings', JSON.stringify(settings));
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            applyTheme(settings.theme);
            applyLanguage(settings.language);
            
            showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!', 'success');
        } else {
            throw new Error(data.error);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
        showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫', 'error');
    }
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã
function applyTheme(theme) {
    const root = document.documentElement;
    
    console.log(`üé® –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã: ${theme}`);
    
    if (theme === 'dark') {
        // –¢–µ–º–Ω–∞—è —Ç–µ–º–∞
        root.style.setProperty('--background-color', '#000000');
        root.style.setProperty('--surface-color', '#1C1C1E');
        root.style.setProperty('--text-primary', '#FFFFFF');
        root.style.setProperty('--text-secondary', '#8E8E93');
        root.style.setProperty('--text-tertiary', '#48484A');
        root.style.setProperty('--border-color', '#38383A');
        
        document.body.classList.add('dark-theme');
    } else if (theme === 'light') {
        // –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞
        root.style.setProperty('--background-color', '#F2F2F7');
        root.style.setProperty('--surface-color', '#FFFFFF');
        root.style.setProperty('--text-primary', '#000000');
        root.style.setProperty('--text-secondary', '#8E8E93');
        root.style.setProperty('--text-tertiary', '#C7C7CC');
        root.style.setProperty('--border-color', '#E5E5EA');
        
        document.body.classList.remove('dark-theme');
    } else {
        // –ê–≤—Ç–æ —Ç–µ–º–∞ (—Å–ª–µ–¥—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–π)
        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        applyTheme(prefersDark ? 'dark' : 'light');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ Telegram WebApp
    if (tg) {
        try {
            if (tg && typeof tg.setHeaderColor === 'function') {
                tg.setHeaderColor(theme === 'dark' ? '#1C1C1E' : '#007AFF');
            }
            if (tg && typeof tg.setBackgroundColor === 'function') {
                tg.setBackgroundColor(theme === 'dark' ? '#000000' : '#F2F2F7');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–≤–µ—Ç–æ–≤ Telegram:', error);
        }
    }
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞
function applyLanguage(language) {
    console.log(`üåê –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞: ${language}`);
    
    if (language === 'en') {
        // –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã
        updateText('–ì–ª–∞–≤–Ω–∞—è', 'Main');
        updateText('–î–∞—à–±–æ—Ä–¥', 'Dashboard');
        updateText('–ò—Å—Ç–æ—Ä–∏—è', 'History');
        updateText('–ü—Ä–æ—Ñ–∏–ª—å', 'Profile');
        updateText('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'Settings');
        updateText('–û–±–º–µ–Ω –≤–∞–ª—é—Ç', 'Currency Exchange');
        updateText('–°—É–º–º–∞', 'Amount');
        updateText('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', 'Continue');
        updateText('–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', 'Create Order');
        updateText('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', 'Save Settings');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
        const amountInput = document.getElementById('from-amount');
        if (amountInput) amountInput.placeholder = 'Enter amount';
        
    } else {
        // –†—É—Å—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        updateText('Main', '–ì–ª–∞–≤–Ω–∞—è');
        updateText('Dashboard', '–î–∞—à–±–æ—Ä–¥');
        updateText('History', '–ò—Å—Ç–æ—Ä–∏—è');
        updateText('Profile', '–ü—Ä–æ—Ñ–∏–ª—å');
        updateText('Settings', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏');
        updateText('Currency Exchange', '–û–±–º–µ–Ω –≤–∞–ª—é—Ç');
        updateText('Amount', '–°—É–º–º–∞');
        updateText('Continue', '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å');
        updateText('Create Order', '–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É');
        updateText('Save Settings', '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
        
        const amountInput = document.getElementById('from-amount');
        if (amountInput) amountInput.placeholder = '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É';
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
function updateText(oldText, newText) {
    const elements = document.querySelectorAll('*');
    elements.forEach(element => {
        if (element.children.length === 0 && element.textContent.trim() === oldText) {
            element.textContent = newText;
        }
    });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
function loadSavedSettings() {
    try {
        const savedSettings = localStorage.getItem('userSettings');
        if (savedSettings) {
            const settings = JSON.parse(savedSettings);
            console.log('üìã –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', settings);
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ
            if (settings.theme) {
                const themeSelect = document.getElementById('theme-select');
                if (themeSelect) {
                    themeSelect.value = settings.theme;
                }
                applyTheme(settings.theme);
            }
            
            if (settings.language) {
                const languageSelect = document.getElementById('language-select');
                if (languageSelect) {
                    languageSelect.value = settings.language;
                }
                applyLanguage(settings.language);
            }
            
            if (settings.notifications_enabled !== undefined) {
                const notificationsToggle = document.getElementById('notifications-enabled');
                if (notificationsToggle) {
                    notificationsToggle.checked = settings.notifications_enabled;
                }
            }
            
            if (settings.currency_preference) {
                const currencySelect = document.getElementById('currency-preference');
                if (currencySelect) {
                    currencySelect.value = settings.currency_preference;
                }
            }
            
            if (settings.privacy_level) {
                const privacySelect = document.getElementById('privacy-level');
                if (privacySelect) {
                    privacySelect.value = settings.privacy_level;
                }
            }
            
            if (settings.two_fa_enabled !== undefined) {
                const twoFaToggle = document.getElementById('two-fa-enabled');
                if (twoFaToggle) {
                    twoFaToggle.checked = settings.two_fa_enabled;
                }
            }
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
function exportData() {
    if (!currentUserId) {
        console.log('‚ö†Ô∏è currentUserId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π');
        currentUserId = 123456789;
    }
    
    const data = {
        userId: currentUserId,
        timestamp: new Date().toISOString(),
        favoriteCurrencies: favoriteCurrencies,
        version: '1.0'
    };
    
    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `exmachinax_data_${currentUserId}_${Date.now()}.json`;
    link.click();
    URL.revokeObjectURL(url);
}

// üß™ –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–û–ß–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ò–ó–ë–†–ê–ù–ù–´–• –í–ê–õ–Æ–¢
window.debugFavorites = function() {
    console.log('‚≠ê ========== –û–¢–õ–ê–î–ö–ê –ò–ó–ë–†–ê–ù–ù–´–• –í–ê–õ–Æ–¢ ==========');
    console.log('‚≠ê –¢–µ–∫—É—â–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ:', favoriteCurrencies);
    console.log('‚≠ê localStorage –¥–æ—Å—Ç—É–ø–µ–Ω?', typeof Storage !== "undefined");
    
    // –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    console.log('‚≠ê –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...');
    const testArray = ['TEST1', 'TEST2', 'TEST3'];
    try {
        localStorage.setItem('test_favorites', JSON.stringify(testArray));
        const readBack = localStorage.getItem('test_favorites');
        console.log('‚≠ê –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', readBack);
        localStorage.removeItem('test_favorites');
        console.log('‚≠ê –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', readBack === JSON.stringify(testArray) ? '‚úÖ –†–ê–ë–û–¢–ê–ï–¢' : '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢');
    } catch (e) {
        console.log('‚≠ê –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ‚ùå –û–®–ò–ë–ö–ê', e);
    }
    
    // –¢–µ—Å—Ç toggleFavorite
    console.log('‚≠ê –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ ETH...');
    toggleFavorite('ETH');
    
    // –¢–µ—Å—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
    console.log('‚≠ê –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö...');
    loadFavorites();
    
    console.log('‚≠ê ========== –ö–û–ù–ï–¶ –û–¢–õ–ê–î–ö–ò ==========');
};

// –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø
function copyToClipboard(text, successMessage = '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!') {
    if (navigator.clipboard) {
        navigator.clipboard.writeText(text).then(() => {
            showNotification(successMessage, 'success');
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –≤–∏–±—Ä–∞—Ü–∏–∏ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
            if (navigator.vibrate) {
                navigator.vibrate(50);
            }
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è Telegram WebApp
            if (tg && typeof tg.HapticFeedback === 'object') {
                tg.HapticFeedback.notificationOccurred('success');
            }
        }).catch(err => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
            fallbackCopy(text, successMessage);
        });
    } else {
        fallbackCopy(text, successMessage);
    }
}

// –†–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
function fallbackCopy(text, successMessage) {
    const textArea = document.createElement('textarea');
    textArea.value = text;
    textArea.style.position = 'fixed';
    textArea.style.left = '-999999px';
    textArea.style.top = '-999999px';
    document.body.appendChild(textArea);
    textArea.focus();
    textArea.select();
    
    try {
        document.execCommand('copy');
        showNotification(successMessage, 'success');
        
        if (navigator.vibrate) {
            navigator.vibrate(50);
        }
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
        showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å', 'error');
    }
    
    document.body.removeChild(textArea);
}

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)
function copyReferralLink() {
    const linkInput = document.getElementById('referral-link-input');
    if (linkInput && linkInput.value) {
        copyToClipboard(linkInput.value, 'üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!');
    }
}

// –°–û–ó–î–ê–ù–ò–ï –ö–û–ü–ò–†–£–ï–ú–û–ì–û –≠–õ–ï–ú–ï–ù–¢–ê –° –ö–ù–û–ü–ö–û–ô
function createCopyableElement(text, label = '', icon = 'üìã') {
    return `
        <div class="copyable-item">
            <div class="copyable-content">
                ${label ? `<span class="copyable-label">${label}:</span>` : ''}
                <code class="copyable-text" onclick="copyToClipboard('${text}', '${icon} ${label || '–î–∞–Ω–Ω—ã–µ'} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã!')">${text}</code>
            </div>
            <button class="copy-btn" onclick="copyToClipboard('${text}', '${icon} ${label || '–î–∞–Ω–Ω—ã–µ'} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã!')" title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å">
                <i class="fas fa-copy"></i>
            </button>
        </div>
    `;
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
let currentStatusFilter = '';
let currentPeriodFilter = 'all';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –¥—Ä–æ–ø–¥–∞—É–Ω–æ–≤
function initCustomDropdowns() {
    const dropdowns = document.querySelectorAll('.custom-dropdown');
    
    dropdowns.forEach(dropdown => {
        const trigger = dropdown.querySelector('.dropdown-trigger');
        const items = dropdown.querySelectorAll('.dropdown-item');
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const firstItem = items[0];
        if (firstItem) {
            firstItem.classList.add('selected');
        }
        
        // –ö–ª–∏–∫ –ø–æ —Ç—Ä–∏–≥–≥–µ—Ä—É
        trigger.addEventListener('click', (e) => {
            e.stopPropagation();
            closeAllDropdowns();
            dropdown.classList.toggle('active');
        });
        
        // –ö–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É
        items.forEach(item => {
            item.addEventListener('click', (e) => {
                e.stopPropagation();
                selectDropdownItem(dropdown, item);
                dropdown.classList.remove('active');
            });
        });
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –¥—Ä–æ–ø–¥–∞—É–Ω–∞
    document.addEventListener('click', closeAllDropdowns);
}

// –í—ã–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ –¥—Ä–æ–ø–¥–∞—É–Ω–∞
function selectDropdownItem(dropdown, selectedItem) {
    const trigger = dropdown.querySelector('.dropdown-trigger');
    const valueSpan = trigger.querySelector('.dropdown-value');
    const items = dropdown.querySelectorAll('.dropdown-item');
    
    // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    items.forEach(item => item.classList.remove('selected'));
    
    // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
    selectedItem.classList.add('selected');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ —Ç—Ä–∏–≥–≥–µ—Ä–µ
    const newText = selectedItem.querySelector('span').textContent;
    valueSpan.textContent = newText;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
    const value = selectedItem.dataset.value;
    if (dropdown.id === 'status-dropdown') {
        currentStatusFilter = value;
    } else if (dropdown.id === 'period-dropdown') {
        currentPeriodFilter = value;
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
    filterHistory();
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –¥—Ä–æ–ø–¥–∞—É–Ω–æ–≤
function closeAllDropdowns() {
    const dropdowns = document.querySelectorAll('.custom-dropdown');
    dropdowns.forEach(dropdown => {
        dropdown.classList.remove('active');
    });
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏
function filterHistory() {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    console.log('–§–∏–ª—å—Ç—Ä—ã –∏—Å—Ç–æ—Ä–∏–∏:', { 
        status: currentStatusFilter, 
        period: currentPeriodFilter 
    });
    loadHistory();
}



// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–æ–≤ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
function showScreen(screenId) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
    const screens = document.querySelectorAll('.screen');
    screens.forEach(screen => screen.classList.remove('active'));
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —ç–∫—Ä–∞–Ω
    const targetScreen = document.getElementById(screenId);
    if (targetScreen) {
        targetScreen.classList.add('active');
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–∫—Ä–æ–ª–ª –∫ –Ω–∞—á–∞–ª—É —ç–∫—Ä–∞–Ω–∞
        setTimeout(() => {
            targetScreen.scrollTop = 0;
            // –¢–∞–∫–∂–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–∫—Ä–æ–ª–ª –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            const mainContent = document.querySelector('.main-content');
            if (mainContent) {
                mainContent.scrollTop = 0;
            }
            // –ò —Å–∫—Ä–æ–ª–ª –≤—Å–µ–≥–æ –æ–∫–Ω–∞
            window.scrollTo(0, 0);
        }, 10);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —ç–∫—Ä–∞–Ω–æ–≤
        if (screenId === 'history-screen') {
            loadHistory();
        } else if (screenId === 'profile-screen' && currentUserId) {
            loadUserProfile();
        } else if (screenId === 'dashboard-screen') {
            loadDashboardData();
        } else if (screenId === 'achievements-screen') {
            loadAchievements();
        } else if (screenId === 'browser-screen') {
            loadNews();
        } else if (screenId === 'order-screen') {
            // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –∫–Ω–æ–ø–∫–∏ –∑–∞—è–≤–∫–∏ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —ç–∫—Ä–∞–Ω–∞
            setTimeout(() => {
                console.log('üîÑ –≠–∫—Ä–∞–Ω –∑–∞—è–≤–∫–∏ –ø–æ–∫–∞–∑–∞–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é...');
                const addressField = document.getElementById('wallet-address');
                const address = addressField?.value?.trim() || '';
                console.log('üîç –¢–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å –≤ –ø–æ–ª–µ:', address);
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏
                setCreateButtonState(address.length > 20);
                validateWalletAddress();
                
                // üîß –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–ù–û–ü–ö–ò
                const createOrderButton = document.getElementById('create-order-button');
                if (createOrderButton) {
                    console.log('üîß ========== –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ==========');
                    console.log('üîß –ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ –∑–∞—è–≤–∫–∏');
                    console.log('üîß Disabled:', createOrderButton.disabled);
                    console.log('üîß ClassName:', createOrderButton.className);
                    console.log('üîß Style pointer-events:', getComputedStyle(createOrderButton).pointerEvents);
                    console.log('üîß Style z-index:', getComputedStyle(createOrderButton).zIndex);
                    console.log('üîß Parent element:', createOrderButton.parentElement.tagName);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ
                    const rect = createOrderButton.getBoundingClientRect();
                    const elementAtCenter = document.elementFromPoint(
                        rect.left + rect.width / 2, 
                        rect.top + rect.height / 2
                    );
                    console.log('üîß –≠–ª–µ–º–µ–Ω—Ç –≤ —Ü–µ–Ω—Ç—Ä–µ –∫–Ω–æ–ø–∫–∏:', elementAtCenter === createOrderButton ? '–ö–ù–û–ü–ö–ê' : elementAtCenter);
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ø—Ä–æ—Å—Ç–æ–π onclick
                    createOrderButton.onclick = function(event) {
                        console.log('üî• ========== –ü–†–û–°–¢–û–ô ONCLICK –°–†–ê–ë–û–¢–ê–õ ==========');
                        console.log('üî• Event:', event);
                        console.log('üî• –ó–∞–ø—É—Å–∫–∞–µ–º createOrder...');
                        try {
                            createOrder();
                        } catch (error) {
                            console.error('üî• –û—à–∏–±–∫–∞ –≤ createOrder:', error);
                            alert('–û—à–∏–±–∫–∞ createOrder: ' + error.message);
                        }
                    };
                    
                    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
                    createOrderButton.style.setProperty('pointer-events', 'auto', 'important');
                    createOrderButton.style.setProperty('cursor', 'pointer', 'important');
                    createOrderButton.style.setProperty('z-index', '999999', 'important');
                    createOrderButton.disabled = false;
                    createOrderButton.removeAttribute('disabled');
                    createOrderButton.classList.remove('disabled');
                    
                    console.log('‚úÖ –ü–†–û–°–¢–û–ô ONCLICK –î–û–ë–ê–í–õ–ï–ù + –£–ë–†–ê–ù–´ –í–°–ï –ë–õ–û–ö–ò–†–û–í–ö–ò');
                } else {
                    console.error('‚ùå –ö–Ω–æ–ø–∫–∞ –ù–ï –ù–ê–ô–î–ï–ù–ê –Ω–∞ —ç–∫—Ä–∞–Ω–µ –∑–∞—è–≤–∫–∏!');
                }
            }, 100);
            
            // üß™ –¢–ï–°–¢–û–í–ê–Ø –ê–ö–¢–ò–í–ê–¶–ò–Ø –ß–ï–†–ï–ó 2 –°–ï–ö–£–ù–î–´
            setTimeout(() => {
                console.log('üß™ –ó–ê–ü–£–°–ö–ê–ï–ú –¢–ï–°–¢–û–í–£–Æ –ê–ö–¢–ò–í–ê–¶–ò–Æ –ö–ù–û–ü–ö–ò...');
                testCreateButton();
            }, 2000);
        }
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function formatNumber(num) {
    if (num >= 1000000) {
        return (num / 1000000).toFixed(1) + 'M';
    } else if (num >= 1000) {
        return (num / 1000).toFixed(1) + 'K';
    }
    return num.toFixed(2);
}

// –£–º–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç–Ω—ã—Ö —Å—É–º–º
function formatCurrencyAmount(amount) {
    if (amount === 0) return '0';
    
    const absAmount = Math.abs(amount);
    
    // –î–ª—è –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª (>1000) - –º–∞–∫—Å–∏–º—É–º 2 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    if (absAmount >= 1000) {
        return amount.toFixed(2).replace(/\.?0+$/, '');
    }
    // –î–ª—è —Å—Ä–µ–¥–Ω–∏—Ö —á–∏—Å–µ–ª (1-1000) - –º–∞–∫—Å–∏–º—É–º 4 –∑–Ω–∞–∫–∞
    else if (absAmount >= 1) {
        return amount.toFixed(4).replace(/\.?0+$/, '');
    }
    // –î–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö —á–∏—Å–µ–ª (<1) - –º–∞–∫—Å–∏–º—É–º 6 –∑–Ω–∞–∫–æ–≤
    else if (absAmount >= 0.001) {
        return amount.toFixed(6).replace(/\.?0+$/, '');
    }
    // –î–ª—è –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏—Ö —á–∏—Å–µ–ª - –Ω–∞—É—á–Ω–∞—è –Ω–æ—Ç–∞—Ü–∏—è –∏–ª–∏ 8 –∑–Ω–∞–∫–æ–≤
    else {
        const formatted = amount.toFixed(8).replace(/\.?0+$/, '');
        return formatted === '0' ? amount.toExponential(2) : formatted;
    }
}

function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', {
        day: 'numeric',
        month: 'short',
        hour: '2-digit',
        minute: '2-digit'
    });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
async function loadHistory() {
    if (!currentUserId) return;
    
    try {
        const response = await fetch(`/api/history/${currentUserId}`);
        const data = await response.json();
        
        if (data.success) {
            displayHistory(data.data);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
        displayHistory([]);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
function displayHistory(history) {
    const historyContent = document.getElementById('history-content');
    
    if (history.length === 0) {
        historyContent.innerHTML = `
            <div class="coming-soon">
                <i class="fas fa-history"></i>
                <h3>–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞</h3>
                <p>–í–∞—à–∏ –æ–±–º–µ–Ω—ã –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å</p>
            </div>
        `;
        return;
    }
    
    historyContent.innerHTML = history.map(order => `
        <div class="history-item">
            <div class="history-header">
                <div class="history-pair">${order.from_currency} ‚Üí ${order.to_currency}</div>
                <div class="history-date">${new Date(order.created_at_local).toLocaleDateString('ru-RU')}</div>
            </div>
            <div class="history-details">
                <div class="history-detail">
                    <span>–û—Ç–¥–∞–ª:</span>
                    <span>${order.from_amount} ${order.from_currency}</span>
                </div>
                <div class="history-detail">
                    <span>–ü–æ–ª—É—á–∏–ª:</span>
                    <span>${order.to_amount} ${order.to_currency}</span>
                </div>
                <div class="history-detail">
                    <span>–ö—É—Ä—Å:</span>
                    <span>${order.exchange_rate?.toFixed(4) || 'N/A'}</span>
                </div>
            </div>
            <div class="history-status ${order.status}">
                ${getStatusText(order.status)}
            </div>
        </div>
    `).join('');
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
function getStatusText(status) {
    const statuses = {
        'pending': '–û–∂–∏–¥–∞–µ—Ç',
        'processing': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
        'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω',
        'failed': '–û—Ç–∫–ª–æ–Ω–µ–Ω',
        'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
    };
    return statuses[status] || status;
}

// –°–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º (–æ–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
function contactOperator() {
    createSupportTicket('–ü–æ–º–æ—â—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å —á–µ—Ä–µ–∑ WebApp');
}

// –û–±–º–µ–Ω –Ω–∞–ª–∏—á–Ω—ã—Ö
function requestCashExchange() {
    console.log('üí∞ –ù–ê–ñ–ê–õ–ò: –û–±–º–µ–Ω –Ω–∞–ª–∏—á–Ω—ã—Ö');
    console.log('üë§ currentUserId:', currentUserId);
    createSupportTicket('–û–±–º–µ–Ω –Ω–∞–ª–∏—á–Ω—ã—Ö', '–ó–∞—è–≤–∫–∞ –Ω–∞ –æ–±–º–µ–Ω —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –¥–µ–Ω–µ–≥ –≤ –æ—Ñ–∏—Å–∞—Ö. –ö–ª–∏–µ–Ω—Ç –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è –æ–±–º–µ–Ω–æ–º –Ω–∞–ª–∏—á–Ω—ã—Ö –≤–∞–ª—é—Ç.');
}

// –û–±–º–µ–Ω –±–µ–∑ AML
function requestNoAMLExchange() {
    console.log('üö´ –ù–ê–ñ–ê–õ–ò: –û–±–º–µ–Ω –±–µ–∑ AML');
    console.log('üë§ currentUserId:', currentUserId);
    createSupportTicket('–û–±–º–µ–Ω –±–µ–∑ AML', '–ó–∞—è–≤–∫–∞ –Ω–∞ –±—ã—Å—Ç—Ä—ã–π –æ–±–º–µ–Ω –±–µ–∑ AML –ø—Ä–æ–≤–µ—Ä–∫–∏. –ö–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–±–º–µ–Ω –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥—Ä–µ—Å–æ–≤.');
}

// üåü –û–¢–ó–´–í–´ - –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–ï–†–ï–•–û–î –í –¢–ï–õ–ï–ì–†–ê–ú
function openReviews() {
    const reviewsUrl = 'https://t.me/ExMachinaXReviews';
    
    console.log('üìù –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ—Ç–∑—ã–≤—ã –≤ Telegram:', reviewsUrl);
    
    try {
        // üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –û–¢–ö–†–´–¢–ò–ï –í TELEGRAM –ë–ï–ó –ë–†–ê–£–ó–ï–†–ê
        console.log('üì± –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã Telegram WebApp:');
        console.log('- tg.openLink:', typeof tg?.openLink);
        console.log('- tg.openTelegramLink:', typeof tg?.openTelegramLink);
        console.log('- tg.switchInlineQuery:', typeof tg?.switchInlineQuery);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º haptic feedback –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        if (tg && tg.HapticFeedback) {
            tg.HapticFeedback.impactOccurred('light');
        }
        
        // –ü—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è tg.openLink (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä–∞)
        console.log('üîó –ü–†–Ø–ú–û–ô –ø–µ—Ä–µ—Ö–æ–¥ –≤ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
        window.location.href = reviewsUrl;
        
        showNotification('–û—Ç–∫—Ä—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—É –æ—Ç–∑—ã–≤–æ–≤...', 'success');
        console.log('‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ—Ç–∑—ã–≤–∞–º –≤—ã–ø–æ–ª–Ω–µ–Ω');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –æ—Ç–∑—ã–≤–æ–≤:', error);
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π fallback
        try {
            window.location.href = reviewsUrl;
        } catch (e) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞:', e);
            showNotification('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞. –û—Ç–∫—Ä–æ–π—Ç–µ: @ExMachinaXReviews', 'error');
        }
    }
}

// OTC —Ç–æ—Ä–≥–æ–≤–ª—è
function requestOTCTrading() {
    console.log('üìà –ù–ê–ñ–ê–õ–ò: OTC —Ç–æ—Ä–≥–æ–≤–ª—è');
    console.log('üë§ currentUserId:', currentUserId);
    createSupportTicket('OTC —Ç–æ—Ä–≥–æ–≤–ª—è', '–ó–∞—è–≤–∫–∞ –Ω–∞ OTC —Ç–æ—Ä–≥–æ–≤–ª—é –±–æ–ª—å—à–∏–º–∏ –æ–±—ä–µ–º–∞–º–∏. –ö–ª–∏–µ–Ω—Ç –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è –æ–±–º–µ–Ω–æ–º –∫—Ä—É–ø–Ω—ã—Ö —Å—É–º–º —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏.');
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ AML —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º
async function sendAMLAlertToAdmins(address, amlResult, addressType = 'to') {
    try {
        if (!currentUserId) return;
        
        const riskLevel = amlResult.status === 'rejected' ? '–í–´–°–û–ö–ò–ô' : '–°–†–ï–î–ù–ò–ô';
        const addressTypeText = addressType === 'from' ? '–æ—Ç–ø—Ä–∞–≤–∫–∏' : '–ø–æ–ª—É—á–µ–Ω–∏—è';
        const subject = `üõ°Ô∏è AML –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï - ${riskLevel} –†–ò–°–ö (${addressTypeText.toUpperCase()})`;
        const message = `–ê–¥—Ä–µ—Å ${addressTypeText}: ${address}\n–°—Ç–∞—Ç—É—Å: ${amlResult.status}\n–†–∏—Å–∫: ${amlResult.risk}\n–û—Ü–µ–Ω–∫–∞: ${amlResult.score}/100\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${currentUserId}`;
        
        await createSupportTicket(subject, message);
        console.log(`üì® AML —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥—Ä–µ—Å–∞ ${addressTypeText} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∞–º`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ AML —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å —Ç–µ–º–æ–π
async function createSupportTicket(subject = '–ü–æ–º–æ—â—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞', message = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å —á–µ—Ä–µ–∑ WebApp') {
    try {
        console.log('üé´ –°–û–ó–î–ê–ù–ò–ï –ó–ê–Ø–í–ö–ò –ü–û–î–î–ï–†–ñ–ö–ò:');
        console.log('üìÇ –¢–µ–º–∞:', subject);
        console.log('üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:', message);
        console.log('üë§ currentUserId:', currentUserId);
        
        if (!currentUserId) {
            console.error('‚ùå currentUserId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!');
            showNotification('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω', 'error');
            return;
        }
        
        showNotification('–°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É...', 'info');
        
        const requestBody = {
            userId: currentUserId,
            source: tg ? 'webapp_telegram' : 'webapp_browser',
            subject: subject,
            message: message,
            timestamp: new Date().toISOString()
        };
        
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ:', requestBody);
        
        const response = await fetch('/api/support-ticket', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(requestBody)
        });
        
        console.log('üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ - —Å—Ç–∞—Ç—É—Å:', response.status);
        const data = await response.json();
        console.log('üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ - –¥–∞–Ω–Ω—ã–µ:', data);
        
        if (data.success) {
            showNotification('–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.', 'success');
            console.log('‚úÖ –¢–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–æ–∑–¥–∞–Ω:', data.data);
        } else {
            throw new Error(data.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:', error);
        showNotification('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏. –ü–∏—à–∏—Ç–µ @ExMachinaXSupport', 'error');
        
        // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º—Å—è –∫ —Å—Ç–∞—Ä–æ–º—É —Å–ø–æ—Å–æ–±—É
        if (window && window.open) {
            setTimeout(() => {
                window.open('https://t.me/ExMachinaXSupport', '_blank');
            }, 1000);
        }
    }
}

// –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR –∫–æ–¥–∞
function scanQR(addressType = 'to') {
    try {
        if (tg && typeof tg.showScanQrPopup === 'function') {
            const text = addressType === 'from' ? 
                '–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥ –∞–¥—Ä–µ—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏' : 
                '–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥ –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—É—á–µ–Ω–∏—è';
                
            tg.showScanQrPopup({
                text: text
            }, (result) => {
                const inputId = addressType === 'from' ? 'from-wallet-address' : 'wallet-address';
                const input = document.getElementById(inputId);
                
                if (input) {
                    input.value = result;
                    validateWalletAddress();
                    showNotification('QR –∫–æ–¥ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω!', 'success');
                }
                
                if (typeof tg.closeScanQrPopup === 'function') {
                    tg.closeScanQrPopup();
                }
            });
        } else {
            showNotification('–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ', 'warning');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR:', error);
        showNotification('–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR', 'error');
    }
}

// –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'info') {
    const notifications = document.getElementById('notifications');
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    
    notifications.appendChild(notification);
    
    // –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    setTimeout(() => {
        notification.style.opacity = '0';
        notification.style.transform = 'translateY(-100%)';
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }, 4000);
    
    console.log(`üì¢ ${type.toUpperCase()}: ${message}`);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
setInterval(() => {
    loadExchangeRates();
}, 30000);

        console.log('‚úÖ ExMachinaX App –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');

// ü§ñ –ê–í–¢–û–û–¢–ü–†–ê–í–ö–ê –†–ï–ö–í–ò–ó–ò–¢–û–í - –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê  
window.showOrderRequisites = function(orderId, paymentMethod, orderData) {
    const requisites = {
        'Bybit UID': {
            type: 'crypto_platform',
            name: 'Bybit UID',
            address: '47028037',
            network: 'Bybit Exchange',
            currency: 'USDT/USDC/BTC/ETH',
            emoji: 'üí∞'
        },
        '–°–±–µ—Ä–±–∞–Ω–∫': {
            type: 'bank_card',
            name: '–°–±–µ—Ä–±–∞–Ω–∫',
            card: '2202 2006 7890 1234',
            holder: '–ê–õ–ï–ö–°–ï–ô –ü–ï–¢–†–û–í',
            emoji: 'üü¢'
        },
        '–¢ –±–∞–Ω–∫': {
            type: 'bank_card', 
            name: '–¢-–ë–∞–Ω–∫',
            card: '5536 9138 4567 8901',
            holder: '–ê–õ–ï–ö–°–ï–ô –ü–ï–¢–†–û–í',
            emoji: 'üü°'
        },
        '–°–ë–ü': {
            type: 'bank_transfer',
            name: '–°–ë–ü',
            phone: '+7 900 123 45 67',
            holder: '–ê–õ–ï–ö–°–ï–ô –ü–ï–¢–†–û–í',
            emoji: '‚ö°'
        }
    };
    
    const requisite = requisites[paymentMethod];
    if (!requisite) return;
    
    const modalHtml = `
        <div style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.8); display: flex; align-items: center; justify-content: center; z-index: 10000;" id="requisites-modal">
            <div style="background: white; border-radius: 12px; padding: 20px; max-width: 400px; width: 90%;">
                <h3>${requisite.emoji} –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã</h3>
                <p><strong>–ó–∞–∫–∞–∑ #${orderId}</strong></p>
                <p><strong>–ö –æ–ø–ª–∞—Ç–µ:</strong> ${orderData.fromAmount} ${orderData.fromCurrency}</p>
                <p><strong>–ö –ø–æ–ª—É—á–µ–Ω–∏—é:</strong> ${orderData.toAmount} ${orderData.toCurrency}</p>
                <hr>
                <p><strong>${requisite.name}</strong></p>
                ${requisite.type === 'crypto_platform' ? `
                    <p><strong>UID:</strong> <code style="background: #f0f0f0; padding: 4px; border-radius: 4px;">${requisite.address}</code></p>
                ` : requisite.type === 'bank_card' ? `
                    <p><strong>–ö–∞—Ä—Ç–∞:</strong> <code style="background: #f0f0f0; padding: 4px; border-radius: 4px;">${requisite.card}</code></p>
                    <p><strong>–í–ª–∞–¥–µ–ª–µ—Ü:</strong> ${requisite.holder}</p>
                ` : `
                    <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> <code style="background: #f0f0f0; padding: 4px; border-radius: 4px;">${requisite.phone}</code></p>
                    <p><strong>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</strong> ${requisite.holder}</p>
                `}
                <button onclick="document.getElementById('requisites-modal').remove()" style="width: 100%; padding: 12px; background: #007AFF; color: white; border: none; border-radius: 8px; margin-top: 10px;">
                    ‚úÖ –ü–æ–Ω—è—Ç–Ω–æ
                </button>
            </div>
        </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', modalHtml);
}; 

// üöÄ –ë–û–ú–ë–û–í–ê–Ø –ó–ê–°–¢–ê–í–ö–ê –° –≠–¢–ê–ü–ê–ú–ò –ó–ê–ì–†–£–ó–ö–ò
let loadingProgress = 0;
let loadingStageIndex = 0;

const loadingStages = [
    {
        icon: 'fas fa-rocket',
        title: '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...',
        subtitle: '–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Å—ë –∫ —Ä–∞–±–æ—Ç–µ',
        duration: 1000
    },
    {
        icon: 'fas fa-chart-line',
        title: '–ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç...',
        subtitle: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º—Å—è —Å Google Sheets',
        duration: 1500
    },
    {
        icon: 'fas fa-user-circle',
        title: '–ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å...',
        subtitle: '–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
        duration: 1000
    },
    {
        icon: 'fas fa-shield-alt',
        title: '–ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å...',
        subtitle: '–ó–∞—â–∏—â–∞–µ–º –≤–∞—à–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏',
        duration: 700
    },
    {
        icon: 'fas fa-check-circle',
        title: '–í—Å—ë –≥–æ—Ç–æ–≤–æ!',
        subtitle: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ExMachinaX',
        duration: 300
    }
];

function updateLoadingStage(stageIndex) {
    const stage = loadingStages[stageIndex];
    if (!stage) return;
    
    const iconElement = document.getElementById('loading-stage-icon');
    const titleElement = document.getElementById('loading-stage-title');
    const subtitleElement = document.getElementById('loading-stage-subtitle');
    
    if (iconElement && titleElement && subtitleElement) {
        // –ê–Ω–∏–º–∞—Ü–∏—è —Å–º–µ–Ω—ã –∏–∫–æ–Ω–∫–∏
        iconElement.style.transform = 'scale(0)';
        setTimeout(() => {
            iconElement.className = stage.icon;
            iconElement.style.transform = 'scale(1)';
        }, 150);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è —Å–º–µ–Ω—ã —Ç–µ–∫—Å—Ç–∞
        titleElement.style.opacity = '0';
        subtitleElement.style.opacity = '0';
        
        setTimeout(() => {
            titleElement.textContent = stage.title;
            subtitleElement.textContent = stage.subtitle;
            titleElement.style.opacity = '1';
            subtitleElement.style.opacity = '1';
        }, 200);
    }
}

function updateProgress(targetProgress) {
    const progressFill = document.getElementById('progress-fill');
    const progressText = document.getElementById('progress-text');
    
    if (progressFill && progressText) {
        progressFill.style.width = targetProgress + '%';
        
        // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—á—ë—Ç—á–∏–∫
        const currentProgress = loadingProgress;
        const increment = (targetProgress - currentProgress) / 20;
        let current = currentProgress;
        
        const counter = setInterval(() => {
            current += increment;
            if (current >= targetProgress) {
                current = targetProgress;
                clearInterval(counter);
            }
            progressText.textContent = Math.round(current) + '%';
        }, 50);
        
        loadingProgress = targetProgress;
    }
}

function startLoadingSequence() {
    let currentStage = 0;
    let currentProgress = 0;
    
    function nextStage() {
        if (currentStage < loadingStages.length) {
            const stage = loadingStages[currentStage];
            updateLoadingStage(currentStage);
            
            // –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞
            const progressStep = 100 / loadingStages.length;
            currentProgress += progressStep;
            updateProgress(Math.min(currentProgress, 100));
            
            currentStage++;
            
            if (currentStage < loadingStages.length) {
                setTimeout(nextStage, stage.duration);
            } else {
                // –§–∏–Ω–∞–ª—å–Ω—ã–π —ç—Ç–∞–ø - —Å–∫—Ä—ã–≤–∞–µ–º –∑–∞—Å—Ç–∞–≤–∫—É
                setTimeout(() => {
                    hideLoadingScreen();
                }, stage.duration);
            }
        }
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    setTimeout(nextStage, 500); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞
}

function hideLoadingScreen() {
    const loadingScreen = document.getElementById('loading-screen');
    const app = document.getElementById('app');
    
    if (loadingScreen && !loadingScreen.hasAttribute('data-hidden')) {
        loadingScreen.setAttribute('data-hidden', 'true');
        loadingScreen.style.opacity = '0';
        
        setTimeout(() => {
            loadingScreen.style.display = 'none';
            if (app) {
                app.classList.remove('hidden');
            }
            console.log('üéâ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–æ!');
        }, 500);
    }
}

// üì± –ü–û–õ–ù–û–≠–ö–†–ê–ù–ù–´–ô –†–ï–ñ–ò–ú –î–õ–Ø –ú–û–ë–ò–õ–¨–ù–´–•
function setupFullscreenMode() {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã—Å–æ—Ç—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤ –∏ Telegram WebApp
    function setMobileVH() {
        let vh = window.innerHeight * 0.01;
        let viewportHeight = window.innerHeight;
        
        // –ï—Å–ª–∏ —ç—Ç–æ Telegram WebApp, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ viewport
        if (window.Telegram?.WebApp) {
            const tg = window.Telegram.WebApp;
            if (tg.viewportHeight && tg.viewportHeight > 0) {
                viewportHeight = tg.viewportHeight;
                vh = tg.viewportHeight * 0.01;
                console.log('üì± –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram viewport height:', tg.viewportHeight);
            }
        }
        
        document.documentElement.style.setProperty('--vh', `${vh}px`);
        document.documentElement.style.setProperty('--tg-viewport-height', `${viewportHeight}px`);
        
        console.log('üì± Viewport —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', viewportHeight + 'px');
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    setMobileVH();
    
    // Telegram WebApp viewport change listener
    if (window.Telegram?.WebApp) {
        window.Telegram.WebApp.onEvent('viewportChanged', () => {
            console.log('üì± Telegram viewport –∏–∑–º–µ–Ω–∏–ª—Å—è!');
            setTimeout(setMobileVH, 50);
        });
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏/—Ä–∞–∑–º–µ—Ä–∞
    window.addEventListener('resize', setMobileVH);
    window.addEventListener('orientationchange', () => {
        setTimeout(setMobileVH, 100); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
    });
    
    // –°–∫—Ä—ã—Ç—å –∞–¥—Ä–µ—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ù–ï Telegram WebApp)
    if (!window.Telegram?.WebApp) {
        window.addEventListener('load', () => {
            setTimeout(() => {
                window.scrollTo(0, 1);
            }, 100);
        });
    }
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º zoom –Ω–∞ iOS
    document.addEventListener('gesturestart', (e) => {
        e.preventDefault();
    });
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º pull-to-refresh
    document.addEventListener('touchstart', (e) => {
        if (e.touches.length > 1) {
            e.preventDefault();
        }
    }, { passive: false });
    
    let lastTouchEnd = 0;
    document.addEventListener('touchend', (e) => {
        const now = (new Date()).getTime();
        if (now - lastTouchEnd <= 300) {
            e.preventDefault();
        }
        lastTouchEnd = now;
    }, false);
    
    console.log('üì± –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω!');
}

// –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –∑–∞—Å—Ç–∞–≤–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    // setupFullscreenMode –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–µ–ø–µ—Ä—å –∏–∑ initTelegramWebApp
    startLoadingSequence();
});

// üåê –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–û–ö–ê–ó–ê –°–û–û–ë–©–ï–ù–ò–Ø –û –°–ê–ô–¢–ï –í –†–ê–ó–†–ê–ë–û–¢–ö–ï
function showWebsiteMessage() {
    if (tg && tg.showAlert) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram WebApp API
        tg.showAlert('üöß –°–∞–π—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª!');
    } else {
        // –û–±—ã—á–Ω—ã–π alert –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
        alert('üöß –°–∞–π—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª!');
    }
    
    console.log('üåê –ü–æ–∫–∞–∑–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–∞–π—Ç–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
    
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å –∫–Ω–æ–ø–∫–∏ —Å–∞–π—Ç–∞
    document.querySelectorAll('.nav-item').forEach(item => {
        item.classList.remove('active');
    });
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –Ω–∞ –≥–ª–∞–≤–Ω—É—é
    document.querySelector('[data-screen="calculator-screen"]').classList.add('active');
}

// üé® –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –¢–ï–ú–´ TELEGRAM
function applyTelegramTheme() {
    if (!tg || !tg.themeParams) {
        console.log('üé® –¢–µ–º–∞ Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é');
        return;
    }
    
    try {
        const theme = tg.themeParams;
        console.log('üé® –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É Telegram:', tg.colorScheme);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞ —Ç–µ–º—ã
        if (theme.bg_color) {
            document.documentElement.style.setProperty('--tg-theme-bg-color', theme.bg_color);
        }
        if (theme.text_color) {
            document.documentElement.style.setProperty('--tg-theme-text-color', theme.text_color);
        }
        if (theme.hint_color) {
            document.documentElement.style.setProperty('--tg-theme-hint-color', theme.hint_color);
        }
        if (theme.link_color) {
            document.documentElement.style.setProperty('--tg-theme-link-color', theme.link_color);
        }
        if (theme.button_color) {
            document.documentElement.style.setProperty('--tg-theme-button-color', theme.button_color);
        }
        if (theme.button_text_color) {
            document.documentElement.style.setProperty('--tg-theme-button-text-color', theme.button_text_color);
        }
        
        console.log('‚úÖ –¢–µ–º–∞ Telegram –ø—Ä–∏–º–µ–Ω–µ–Ω–∞');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã:', error);
    }
}

// üé® –†–£–ß–ù–ê–Ø –°–ú–ï–ù–ê –¢–ï–ú–´
function switchTheme(theme) {
    console.log('üé® –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã –Ω–∞:', theme);
    
    const root = document.documentElement;
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã —Ç–µ–º
    root.classList.remove('theme-light', 'theme-dark', 'theme-auto');
    
    if (theme === 'light') {
        root.classList.add('theme-light');
        console.log('‚òÄÔ∏è –í–∫–ª—é—á–µ–Ω–∞ —Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞');
    } else if (theme === 'dark') {
        root.classList.add('theme-dark');
        console.log('üåô –í–∫–ª—é—á–µ–Ω–∞ —Ç–µ–º–Ω–∞—è —Ç–µ–º–∞');
    } else {
        // –ê–≤—Ç–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–º—É Telegram
        root.classList.add('theme-auto');
        applyTelegramTheme();
        console.log('ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–µ–º–∞ (Telegram)');
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    try {
        localStorage.setItem('theme', theme);
        console.log('‚úÖ –¢–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', theme);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–º—ã:', error);
    }
}

// üîÑ –ó–ê–ì–†–£–ó–ö–ê –¢–ï–ú–´ –ò–ó –ù–ê–°–¢–†–û–ï–ö
function loadTheme() {
    try {
        const savedTheme = localStorage.getItem('theme') || 'auto';
        console.log('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ç–µ–º—É:', savedTheme);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–µ–ª–µ–∫—Ç–µ
        const themeSelect = document.getElementById('theme-select');
        if (themeSelect) {
            themeSelect.value = savedTheme;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            themeSelect.addEventListener('change', function() {
                switchTheme(this.value);
            });
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
        switchTheme(savedTheme);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–º—ã:', error);
        switchTheme('auto'); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
}

// üîó –ì–ï–ù–ï–†–ê–¶–ò–Ø –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–°–´–õ–ö–ò
function generateReferralLink() {
    try {
        if (!currentUserId) {
            console.log('‚ö†Ô∏è User ID –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π');
            currentUserId = 123456789;
        }
        
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    const referralLink = `https://t.me/ExMachinaX_bot?start=${currentUserId}`;
        console.log('üîó –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:', referralLink);
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ
        const referralInput = document.getElementById('referral-link-input');
        if (referralInput) {
            referralInput.value = referralLink;
            console.log('‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –≤ –ø–æ–ª–µ');
        }
        
        return referralLink;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏:', error);
        return null;
    }
}

// üìã –ö–û–ü–ò–†–û–í–ê–ù–ò–ï –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–°–´–õ–ö–ò
function copyReferralLink() {
    try {
        const referralInput = document.getElementById('referral-link-input');
        if (!referralInput || !referralInput.value) {
            console.log('‚ö†Ô∏è –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º...');
            generateReferralLink();
        }
        
        const link = referralInput.value;
        
        // –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ Telegram API
        if (tg && tg.writeToClipboard) {
            tg.writeToClipboard(link);
            showNotification('üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!', 'success');
            console.log('‚úÖ –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ Telegram API');
            return;
        }
        
        // –§–æ–ª–ª–±—ç–∫ - –æ–±—ã—á–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
        if (navigator.clipboard) {
            navigator.clipboard.writeText(link).then(() => {
                showNotification('üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!', 'success');
                console.log('‚úÖ –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ Clipboard API');
            }).catch(error => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
                fallbackCopy(link);
            });
        } else {
            fallbackCopy(link);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏:', error);
        showNotification('‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è', 'error');
    }
}

// üìã –§–û–õ–õ–ë–≠–ö –ö–û–ü–ò–†–û–í–ê–ù–ò–ï
function fallbackCopy(text) {
    try {
        const textArea = document.createElement('textarea');
        textArea.value = text;
        textArea.style.position = 'fixed';
        textArea.style.opacity = '0';
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();
        
        const successful = document.execCommand('copy');
        document.body.removeChild(textArea);
        
        if (successful) {
            showNotification('üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!', 'success');
            console.log('‚úÖ –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ execCommand');
        } else {
            showNotification('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å', 'error');
            console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ execCommand');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–ª–ª–±—ç–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        showNotification('‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è', 'error');
    }
}

// ‚öôÔ∏è –°–û–•–†–ê–ù–ï–ù–ò–ï –ù–ê–°–¢–†–û–ï–ö
function saveSettings() {
    try {
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—É
        const themeSelect = document.getElementById('theme-select');
        if (themeSelect) {
            localStorage.setItem('theme', themeSelect.value);
            console.log('‚úÖ –¢–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', themeSelect.value);
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const notificationsEnabled = document.getElementById('notifications-enabled');
        if (notificationsEnabled) {
            localStorage.setItem('notifications', notificationsEnabled.checked);
            console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', notificationsEnabled.checked);
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫
        const languageSelect = document.getElementById('language-select');
        if (languageSelect) {
            localStorage.setItem('language', languageSelect.value);
            console.log('‚úÖ –Ø–∑—ã–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', languageSelect.value);
        }
        
        showNotification('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', 'success');
        console.log('‚úÖ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
        showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫', 'error');
    }
}

// üì• –ó–ê–ì–†–£–ó–ö–ê –ù–ê–°–¢–†–û–ï–ö
function loadSettings() {
    try {
        console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–º—É
        loadTheme();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const savedNotifications = localStorage.getItem('notifications');
        if (savedNotifications !== null) {
            const notificationsEnabled = document.getElementById('notifications-enabled');
            if (notificationsEnabled) {
                notificationsEnabled.checked = savedNotifications === 'true';
                console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', savedNotifications);
            }
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —è–∑—ã–∫
        const savedLanguage = localStorage.getItem('language');
        if (savedLanguage) {
            const languageSelect = document.getElementById('language-select');
            if (languageSelect) {
                languageSelect.value = savedLanguage;
                console.log('‚úÖ –Ø–∑—ã–∫ –∑–∞–≥—Ä—É–∂–µ–Ω:', savedLanguage);
            }
        }
        
        console.log('‚úÖ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    }
}

// üì§ –≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–•
function exportData() {
    try {
        console.log('üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        
        const userData = {
            userId: currentUserId,
            profile: userProfile,
            favorites: favoriteCurrencies,
            settings: {
                theme: localStorage.getItem('theme'),
                notifications: localStorage.getItem('notifications'),
                language: localStorage.getItem('language')
            },
            timestamp: new Date().toISOString()
        };
        
        const dataStr = JSON.stringify(userData, null, 2);
        const dataBlob = new Blob([dataStr], { type: 'application/json' });
        
        const link = document.createElement('a');
        link.href = URL.createObjectURL(dataBlob);
        link.download = `exmachinax_data_${currentUserId}_${Date.now()}.json`;
        link.click();
        
        showNotification('üì§ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!', 'success');
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
        showNotification('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö', 'error');
    }
}

// üöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ù–ê–°–¢–†–û–ï–ö –ò –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–°–´–õ–ö–ò
document.addEventListener('DOMContentLoaded', function() {
    // –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    setTimeout(() => {
        loadSettings();
        generateReferralLink();
        console.log('üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }, 1000);
});

// üß™ –û–¢–õ–ê–î–û–ß–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø - –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ê–ö–¢–ò–í–ê–¶–ò–Ø –ö–ù–û–ü–ö–ò
function testCreateButton() {
    const createButton = document.getElementById('create-order-button');
    if (createButton) {
        console.log('üß™ ========== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–ù–û–ü–ö–ò ==========');
        console.log('üß™ Disabled:', createButton.disabled);
        console.log('üß™ ClassName:', createButton.className);
        console.log('üß™ Style display:', getComputedStyle(createButton).display);
        console.log('üß™ Style pointerEvents:', getComputedStyle(createButton).pointerEvents);
        console.log('üß™ Style zIndex:', getComputedStyle(createButton).zIndex);
        console.log('üß™ Style position:', getComputedStyle(createButton).position);
        console.log('üß™ Parent element:', createButton.parentElement);
        console.log('üß™ Rect:', createButton.getBoundingClientRect());
        
        createButton.removeAttribute('disabled');
        createButton.classList.remove('disabled');
        createButton.style.background = '#28a745 !important';
        createButton.style.cursor = 'pointer !important';
        createButton.style.pointerEvents = 'auto !important';
        createButton.style.opacity = '1 !important';
        createButton.style.zIndex = '9999 !important';
        createButton.style.position = 'relative !important';
        
        // üî• –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ü–ï–†–ï–û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –í–°–ï–• CSS –ë–õ–û–ö–ò–†–û–í–û–ö
        createButton.style.setProperty('pointer-events', 'auto', 'important');
        createButton.style.setProperty('cursor', 'pointer', 'important');
        createButton.style.setProperty('background', '#28a745', 'important');
        createButton.style.setProperty('opacity', '1', 'important');
        
        // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å –∏ –∞—Ç—Ä–∏–±—É—Ç disabled –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
        createButton.removeAttribute('disabled');
        createButton.disabled = false;
        createButton.classList.remove('disabled');
        
        console.log('üß™ –¢–ï–°–¢–û–í–ê–Ø –ö–ù–û–ü–ö–ê –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û!');
        console.log('üß™ –ù–æ–≤—ã–π style pointerEvents:', getComputedStyle(createButton).pointerEvents);
        console.log('üß™ –ù–æ–≤—ã–π disabled –∞—Ç—Ä–∏–±—É—Ç:', createButton.disabled);
        console.log('üß™ –ù–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã:', createButton.className);
    } else {
        console.log('‚ùå –ö–Ω–æ–ø–∫–∞ create-order-button –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
    }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
function setCreateButtonState(enabled) {
    const createButton = document.getElementById('create-order-button');
    if (createButton) {
        console.log('üîß ========== –ò–ó–ú–ï–ù–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–Ø –ö–ù–û–ü–ö–ò ==========');
        console.log('üîß –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ disabled:', createButton.disabled);
        console.log('üîß –¢–µ–∫—É—â–∏–µ –∫–ª–∞—Å—Å—ã:', createButton.className);
        console.log('üîß –ó–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', enabled);
        
        if (enabled) {
            createButton.removeAttribute('disabled');
            createButton.classList.remove('disabled');
            console.log('üîß ‚úÖ –ê–ö–¢–ò–í–ò–†–û–í–ê–õ–ò –∫–Ω–æ–ø–∫—É');
        } else {
            createButton.setAttribute('disabled', 'disabled');
            createButton.classList.add('disabled');
            console.log('üîß ‚ùå –î–ï–ê–ö–¢–ò–í–ò–†–û–í–ê–õ–ò –∫–Ω–æ–ø–∫—É');
        }
        
        console.log('üîß –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ disabled:', createButton.disabled);
        console.log('üîß –ù–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã:', createButton.className);
        console.log(`üîÑ –ö–ù–û–ü–ö–ê –ó–ê–Ø–í–ö–ò: ${enabled ? '‚úÖ –ê–ö–¢–ò–í–ù–ê' : '‚ùå –ù–ï–ê–ö–¢–ò–í–ù–ê'}`);
        console.log('üîß ========== –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø –°–û–°–¢–û–Ø–ù–ò–Ø ==========');
    } else {
        console.log('‚ùå setCreateButtonState: –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
    }
}

function updateCurrencyButtons() {
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤–∞–ª—é—Ç...');
    
    const fromButton = document.querySelector('#from-currency');
    const toButton = document.querySelector('#to-currency');
    
    if (fromButton) {
        if (fromCurrency) {
            fromButton.querySelector('.currency-icon').innerHTML = getCurrencyIcon(fromCurrency);
            fromButton.querySelector('.currency-name').textContent = fromCurrency;
        } else {
            fromButton.querySelector('.currency-icon').innerHTML = 'üí∞';
            fromButton.querySelector('.currency-name').textContent = '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É';
        }
    }
    
    if (toButton) {
        if (toCurrency) {
            toButton.querySelector('.currency-icon').innerHTML = getCurrencyIcon(toCurrency);
            toButton.querySelector('.currency-name').textContent = toCurrency;
        } else {
            toButton.querySelector('.currency-icon').innerHTML = 'üí∞';
            toButton.querySelector('.currency-name').textContent = '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É';
        }
    }
    
    console.log(`‚úÖ –ö–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${fromCurrency || '–Ω–µ –≤—ã–±—Ä–∞–Ω–∞'} ‚Üí ${toCurrency || '–Ω–µ –≤—ã–±—Ä–∞–Ω–∞'}`);
}