// === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–ò–°–¢–ï–ú–´ –†–ï–ö–í–ò–ó–ò–¢–û–í ===

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å–∞
function setupCryptoHandlers(bot, paymentDetails, chatContexts) {
    Object.keys(paymentDetails.crypto).forEach(key => {
        bot.callbackQuery(`send_crypto_${key}`, async (ctx) => {
            const detail = paymentDetails.crypto[key];
            
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞
            chatContexts.set(ctx.from.id, {
                action: 'send_crypto_details',
                detailKey: key,
                detail: detail
            });
            
            await ctx.editMessageText(
                `${detail.icon} <b>–û—Ç–ø—Ä–∞–≤–∫–∞ ${detail.name}</b>\n\n` +
                `–ê–¥—Ä–µ—Å: <code>${detail.address}</code>\n` +
                `–ö–æ–º–∏—Å—Å–∏—è: ${detail.fee}\n\n` +
                `üí¨ –ù–∞–ø–∏—à–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞ (–∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞) –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —ç—Ç–∏—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤:`,
                { parse_mode: 'HTML' }
            );
            
            await ctx.answerCallbackQuery(`–í—ã–±—Ä–∞–Ω ${detail.name}. –£–∫–∞–∂–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞.`);
        });
    });
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞
function setupBankHandlers(bot, paymentDetails, chatContexts) {
    Object.keys(paymentDetails.banks).forEach(key => {
        bot.callbackQuery(`send_bank_${key}`, async (ctx) => {
            const detail = paymentDetails.banks[key];
            
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞
            chatContexts.set(ctx.from.id, {
                action: 'send_bank_details',
                detailKey: key,
                detail: detail
            });
            
            await ctx.editMessageText(
                `${detail.icon} <b>–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ ${detail.name}</b>\n\n` +
                `–ö–∞—Ä—Ç–∞: <code>${detail.card}</code>\n` +
                `–í–ª–∞–¥–µ–ª–µ—Ü: ${detail.holder}\n\n` +
                `üí¨ –ù–∞–ø–∏—à–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞ (–∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞) –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —ç—Ç–∏—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤:`,
                { parse_mode: 'HTML' }
            );
            
            await ctx.answerCallbackQuery(`–í—ã–±—Ä–∞–Ω ${detail.name}. –£–∫–∞–∂–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞.`);
        });
    });
}

// –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
function setupBackButton(bot, createMainKeyboard) {
    bot.callbackQuery('back_to_main', async (ctx) => {
        await ctx.answerCallbackQuery();
        
        const userId = ctx.from.id;
        const keyboard = await createMainKeyboard(userId);
        
        await ctx.editMessageText(
            `ü¶ù <b>SwapCoon</b> - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n` +
            `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
            {
                parse_mode: 'HTML',
                reply_markup: keyboard
            }
        );
    });
}

// === –§–£–ù–ö–¶–ò–ò –û–¢–ü–†–ê–í–ö–ò –†–ï–ö–í–ò–ó–ò–¢–û–í ===

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—Ä–∏–ø—Ç–æ—Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç—É
async function handleSendCryptoDetails(ctx, context, bot) {
    const clientIdText = ctx.message.text.trim();
    const clientId = parseInt(clientIdText);
    
    if (isNaN(clientId)) {
        return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–ª–∏–µ–Ω—Ç–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.');
    }
    
    await sendCryptoDetailsToClient(ctx, clientId, context.detail, bot);
}

async function sendCryptoDetailsToClient(ctx, clientId, detail, bot) {
    try {
        const message = 
            `üí≥ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>\n\n` +
            `${detail.icon} <b>${detail.name}</b>\n\n` +
            `üìç <b>–ê–¥—Ä–µ—Å:</b>\n<code>${detail.address}</code>\n\n` +
            `üí∞ <b>–ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ç–∏:</b> ${detail.fee}\n` +
            `üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${detail.description}\n\n` +
            `‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b>\n` +
            `‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ USDT –≤ —Å–µ—Ç–∏ ${detail.name}\n` +
            `‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π\n` +
            `‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: $10\n\n` +
            `üìû –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞`;
        
        await bot.api.sendMessage(clientId, message, { 
            parse_mode: 'HTML'
        });
        
        await ctx.reply(`‚úÖ –†–µ–∫–≤–∏–∑–∏—Ç—ã ${detail.name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç—É ${clientId}`);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤:', error);
        await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç—É ${clientId}. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.`);
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç—É
async function handleSendBankDetails(ctx, context, bot) {
    const clientIdText = ctx.message.text.trim();
    const clientId = parseInt(clientIdText);
    
    if (isNaN(clientId)) {
        return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–ª–∏–µ–Ω—Ç–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.');
    }
    
    await sendBankDetailsToClient(ctx, clientId, context.detail, bot);
}

async function sendBankDetailsToClient(ctx, clientId, detail, bot) {
    try {
        const message = 
            `üí≥ <b>–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã</b>\n\n` +
            `${detail.icon} <b>${detail.name}</b>\n\n` +
            `üí≥ <b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:</b>\n<code>${detail.card}</code>\n\n` +
            `üë§ <b>–í–ª–∞–¥–µ–ª–µ—Ü:</b> ${detail.holder}\n` +
            `üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${detail.description}\n\n` +
            `‚ö†Ô∏è <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n` +
            `‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É\n` +
            `‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ\n` +
            `‚Ä¢ –£–≤–µ–¥–æ–º–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞\n\n` +
            `üìû –°–≤—è–∑—å: –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã`;
        
        await bot.api.sendMessage(clientId, message, { 
            parse_mode: 'HTML'
        });
        
        await ctx.reply(`‚úÖ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã ${detail.name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç—É ${clientId}`);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤:', error);
        await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç—É ${clientId}. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.`);
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç—É
async function handleSendAllDetails(ctx, paymentDetails, bot) {
    const clientIdText = ctx.message.text.trim();
    const clientId = parseInt(clientIdText);
    
    if (isNaN(clientId)) {
        return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–ª–∏–µ–Ω—Ç–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.');
    }
    
    await sendAllDetailsToClient(ctx, clientId, paymentDetails, bot);
}

async function sendAllDetailsToClient(ctx, clientId, paymentDetails, bot) {
    try {
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏
        let message = `üìú <b>–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã</b>\n\n`;
        
        // –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
        message += `üí∞ <b>–ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–´:</b>\n\n`;
        Object.keys(paymentDetails.crypto).forEach(key => {
            const detail = paymentDetails.crypto[key];
            message += `${detail.icon} <b>${detail.name}</b>\n`;
            message += `<code>${detail.address}</code>\n`;
            message += `–ö–æ–º–∏—Å—Å–∏—è: ${detail.fee}\n\n`;
        });
        
        // –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã
        message += `üè¶ <b>–ë–ê–ù–ö–û–í–°–ö–ò–ï –ö–ê–†–¢–´:</b>\n\n`;
        Object.keys(paymentDetails.banks).forEach(key => {
            const detail = paymentDetails.banks[key];
            message += `${detail.icon} <b>${detail.name}</b>\n`;
            message += `<code>${detail.card}</code>\n`;
            message += `–í–ª–∞–¥–µ–ª–µ—Ü: ${detail.holder}\n\n`;
        });
        
        message += `üì¢ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É</b>\n\n`;
        message += `‚ö†Ô∏è <b>–í–ê–ñ–ù–û:</b>\n`;
        message += `‚Ä¢ –ê–¥—Ä–µ—Å–∞ –∫–æ–ø–∏—Ä—É—é—Ç—Å—è –∫–æ—Ä–æ—Ç–∫–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º\n`;
        message += `‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å–µ—Ç—å –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π\n`;
        message += `‚Ä¢ –£–≤–µ–¥–æ–º–ª—è–π—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –æ –ø–ª–∞—Ç–µ–∂–µ\n\n`;
        message += `üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @swapcoon_support`;
        
        await bot.api.sendMessage(clientId, message, { 
            parse_mode: 'HTML'
        });
        
        await ctx.reply(`‚úÖ –í—Å–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç—É ${clientId}`);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤:', error);
        await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç—É ${clientId}. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.`);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
function handleForwardedMessage(ctx, chatContexts, paymentDetails, bot, db) {
    const userId = ctx.from.id;
    
    if (chatContexts.has(userId)) {
        const clientId = ctx.message.forward_from?.id;
        
        if (!clientId) {
            return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
        }
        
        const context = chatContexts.get(userId);
        
        if (context.action === 'send_crypto_details') {
            sendCryptoDetailsToClient(ctx, clientId, context.detail, bot);
        } else if (context.action === 'send_bank_details') {
            sendBankDetailsToClient(ctx, clientId, context.detail, bot);
        } else if (context.action === 'send_all_details') {
            sendAllDetailsToClient(ctx, clientId, paymentDetails, bot);
        }
        
        chatContexts.delete(userId);
        return true;
    }
    return false;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
function handleOperatorMessage(ctx, chatContexts, paymentDetails, bot, db) {
    const userId = ctx.from.id;
    
    if (chatContexts.has(userId)) {
        const context = chatContexts.get(userId);
        
        if (context.action === 'send_crypto_details') {
            handleSendCryptoDetails(ctx, context, bot);
        } else if (context.action === 'send_bank_details') {
            handleSendBankDetails(ctx, context, bot);
        } else if (context.action === 'send_all_details') {
            handleSendAllDetails(ctx, paymentDetails, bot);
        }
        
        chatContexts.delete(userId);
        return true;
    }
    return false;
}

module.exports = {
    setupCryptoHandlers,
    setupBankHandlers, 
    setupBackButton,
    handleSendCryptoDetails,
    handleSendBankDetails,
    handleSendAllDetails,
    handleForwardedMessage,
    handleOperatorMessage
}; 