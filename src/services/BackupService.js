const fs = require('fs');
const path = require('path');

class BackupService {
    constructor(database) {
        this.db = database;
        this.backupInterval = 6 * 60 * 60 * 1000; // 6 —á–∞—Å–æ–≤
        this.maxBackups = 10; // –•—Ä–∞–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –±—ç–∫–∞–ø–æ–≤
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –≤ Google Sheets
    async createBackup() {
        try {
            console.log('üíæ –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
            
            if (!global.googleSheetsManager || !global.googleSheetsManager.isReady()) {
                console.log('‚ö†Ô∏è Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –±—ç–∫–∞–ø–∞');
                return false;
            }

            // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
            const results = await Promise.allSettled([
                global.googleSheetsManager.exportUsers(this.db),
                global.googleSheetsManager.exportStaff(this.db),
                global.googleSheetsManager.exportDailyStats(this.db),
                global.googleSheetsManager.exportAMLMonitoring(this.db)
            ]);

            const successful = results.filter(r => r.status === 'fulfilled' && r.value === true).length;
            console.log(`‚úÖ –ë—ç–∫–∞–ø –∑–∞–≤–µ—Ä—à–µ–Ω: ${successful}/4 —Ç–∞–±–ª–∏—Ü —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ`);
            
            return successful > 0;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞:', error.message);
            return false;
        }
    }

    // –≠–∫—Å–ø–æ—Ä—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ JSON
    async exportCriticalData() {
        try {
            console.log('üì§ –≠–∫—Å–ø–æ—Ä—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...');
            
            const users = await this.db.getUsersForExport();
            const orders = await this.db.getAllOrders();
            const referrals = await this.db.getAllReferrals();
            
            const backup = {
                timestamp: new Date().toISOString(),
                version: '1.0',
                data: {
                    users: users || [],
                    orders: orders || [],
                    referrals: referrals || []
                }
            };

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª (–µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Å—Ç–æ)
            try {
                const backupPath = path.join(process.cwd(), 'data', `backup_${Date.now()}.json`);
                fs.writeFileSync(backupPath, JSON.stringify(backup, null, 2));
                console.log(`üíæ JSON –±—ç–∫–∞–ø —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${backupPath}`);
            } catch (fsError) {
                console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å JSON –±—ç–∫–∞–ø –Ω–∞ –¥–∏—Å–∫:', fsError.message);
            }

            return backup;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:', error.message);
            return null;
        }
    }

    // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –±—ç–∫–∞–ø–æ–≤
    startAutoBackup() {
        console.log('üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±—ç–∫–∞–ø–∞ (–∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤)');
        
        // –ü–µ—Ä–≤—ã–π –±—ç–∫–∞–ø —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
        setTimeout(() => {
            this.createBackup();
        }, 5 * 60 * 1000);

        // –ó–∞—Ç–µ–º –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
        setInterval(() => {
            this.createBackup();
        }, this.backupInterval);
    }

    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ JSON –±—ç–∫–∞–ø–∞ (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)
    async restoreFromJSON(backupData) {
        try {
            console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ JSON –±—ç–∫–∞–ø–∞...');
            
            let restored = 0;
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if (backupData.data.users) {
                for (const user of backupData.data.users) {
                    try {
                        await this.db.upsertUser({
                            telegramId: user.telegram_id,
                            username: user.username,
                            firstName: user.first_name,
                            lastName: user.last_name,
                            referredBy: user.referred_by
                        });
                        if (user.total_commission) {
                            await this.db.updateUserCommission(user.telegram_id);
                        }
                        restored++;
                    } catch (userError) {
                        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.telegram_id}:`, userError.message);
                    }
                }
            }

            console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${restored} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', error.message);
            return false;
        }
    }
}

module.exports = BackupService;