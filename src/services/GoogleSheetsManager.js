const { google } = require('googleapis');

class GoogleSheetsManager {
    constructor() {
        this.sheets = null;
        this.spreadsheetId = null;
        this.auth = null;
        this.isConnected = false;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets API
    async init(credentials, spreadsheetId) {
        try {
            console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets API...');
            
            this.auth = new google.auth.GoogleAuth({
                credentials: credentials,
                scopes: ['https://www.googleapis.com/auth/spreadsheets']
            });

            this.sheets = google.sheets({ version: 'v4', auth: this.auth });
            this.spreadsheetId = spreadsheetId;
            this.isConnected = true;

            console.log('‚úÖ Google Sheets API –ø–æ–¥–∫–ª—é—á–µ–Ω');
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets:', error.message);
            this.isConnected = false;
            return false;
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ª–∏—Å—Ç–æ–≤
    async createWorksheets() {
        if (!this.isConnected) {
            throw new Error('Google Sheets API –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
        }

        const worksheets = [
            {
                title: 'Orders',
                headers: ['ID –∑–∞–∫–∞–∑–∞', '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID', 'Username', '–û—Ç –≤–∞–ª—é—Ç—ã', '–°—É–º–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏', '–ö –≤–∞–ª—é—Ç–µ', '–°—É–º–º–∞ –ø–æ–ª—É—á–µ–Ω–∏—è', '–ö—É—Ä—Å –æ–±–º–µ–Ω–∞', '–ö–æ–º–∏—Å—Å–∏—è ($)', '–°—Ç–∞—Ç—É—Å', '–û–ø–µ—Ä–∞—Ç–æ—Ä ID', '–û–ø–µ—Ä–∞—Ç–æ—Ä', '–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏', 'AML —Å—Ç–∞—Ç—É—Å', '–ü—Ä–∏–±—ã–ª—å ($)', '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç', '–†–µ—Ñ. –∫–æ–º–∏—Å—Å–∏—è ($)']
            },
            {
                title: 'Staff',
                headers: ['ID –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞', '–ò–º—è', 'Username', '–†–æ–ª—å', '–ó–∞–∫–∞–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ', '–û–±—â–∞—è —Å—É–º–º–∞ ($)', '–°—Ä–µ–¥–Ω—è—è –∫–æ–º–∏—Å—Å–∏—è ($)', '–ê–∫—Ç–∏–≤–µ–Ω —Å', '–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', '–°—Ç–∞—Ç—É—Å']
            },
            {
                title: 'Daily_Stats',
                headers: ['–î–∞—Ç–∞', '–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤', '–ó–∞–≤–µ—Ä—à–µ–Ω–æ', '–û—Ç–º–µ–Ω–µ–Ω–æ', '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ', '–û–±—â–∏–π –æ–±–æ—Ä–æ—Ç ($)', '–ü—Ä–∏–±—ã–ª—å ($)', '–ù–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤', '–ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤', '–°—Ä. –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–º–∏–Ω)']
            },
            {
                title: 'Users',
                headers: ['User ID', 'Username', '–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', '–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤', '–û–±—â–∞—è —Å—É–º–º–∞ ($)', '–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑', '–°—Ç–∞—Ç—É—Å', '–†–µ—Ñ–µ—Ä–∞–ª –æ—Ç', '–ü—Ä–∏–≤–µ–ª —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤', '–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö ($)']
            },
            {
                title: 'Manual_Rates',
                headers: ['–ü–∞—Ä–∞ –≤–∞–ª—é—Ç', '–ö—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏', '–ö—É—Ä—Å –ø–æ–∫—É–ø–∫–∏', '–°–ø—Ä–µ–¥ (%)', '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ', '–°—Ç–∞—Ç—É—Å', '–ò—Å—Ç–æ—á–Ω–∏–∫', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π']
            }
        ];

        try {
            for (const worksheet of worksheets) {
                await this.createWorksheet(worksheet.title, worksheet.headers);
            }
            console.log('‚úÖ –í—Å–µ –ª–∏—Å—Ç—ã —Å–æ–∑–¥–∞–Ω—ã');
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Å—Ç–æ–≤:', error.message);
            return false;
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
    async createWorksheet(title, headers) {
        try {
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç
            await this.sheets.spreadsheets.batchUpdate({
                spreadsheetId: this.spreadsheetId,
                resource: {
                    requests: [{
                        addSheet: {
                            properties: {
                                title: title,
                                gridProperties: {
                                    rowCount: 1000,
                                    columnCount: headers.length
                                }
                            }
                        }
                    }]
                }
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            await this.updateSheet(title, [headers], 'A1');

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            await this.formatHeaders(title, headers.length);

            console.log(`‚úÖ –õ–∏—Å—Ç "${title}" —Å–æ–∑–¥–∞–Ω`);
        } catch (error) {
            if (error.message.includes('already exists')) {
                console.log(`‚ÑπÔ∏è –õ–∏—Å—Ç "${title}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
                // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                await this.updateSheet(title, [headers], 'A1');
                await this.formatHeaders(title, headers.length);
            } else {
                throw error;
            }
        }
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    async formatHeaders(sheetTitle, columnCount) {
        try {
            await this.sheets.spreadsheets.batchUpdate({
                spreadsheetId: this.spreadsheetId,
                resource: {
                    requests: [{
                        repeatCell: {
                            range: {
                                sheetId: await this.getSheetId(sheetTitle),
                                startRowIndex: 0,
                                endRowIndex: 1,
                                startColumnIndex: 0,
                                endColumnIndex: columnCount
                            },
                            cell: {
                                userEnteredFormat: {
                                    backgroundColor: { red: 0.2, green: 0.6, blue: 1.0 },
                                    textFormat: { bold: true, foregroundColor: { red: 1, green: 1, blue: 1 } }
                                }
                            },
                            fields: 'userEnteredFormat(backgroundColor,textFormat)'
                        }
                    }]
                }
            });
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –ª–∏—Å—Ç–∞ ${sheetTitle}:`, error.message);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ª–∏—Å—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    async getSheetId(sheetTitle) {
        const response = await this.sheets.spreadsheets.get({
            spreadsheetId: this.spreadsheetId
        });
        
        const sheet = response.data.sheets.find(s => s.properties.title === sheetTitle);
        return sheet ? sheet.properties.sheetId : null;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –ª–∏—Å—Ç–µ
    async updateSheet(sheetTitle, data, range = 'A2') {
        if (!this.isConnected) {
            throw new Error('Google Sheets API –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
        }

        try {
            await this.sheets.spreadsheets.values.update({
                spreadsheetId: this.spreadsheetId,
                range: `${sheetTitle}!${range}`,
                valueInputOption: 'USER_ENTERED',
                resource: {
                    values: data
                }
            });
            return true;
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏—Å—Ç–∞ ${sheetTitle}:`, error.message);
            return false;
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ –ª–∏—Å—Ç–∞ (–∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
    async clearSheet(sheetTitle) {
        try {
            await this.sheets.spreadsheets.values.clear({
                spreadsheetId: this.spreadsheetId,
                range: `${sheetTitle}!A2:Z1000`
            });
            return true;
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–∏—Å—Ç–∞ ${sheetTitle}:`, error.message);
            return false;
        }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω–µ—Ü –ª–∏—Å—Ç–∞
    async appendSheet(sheetTitle, data) {
        if (!this.isConnected) {
            throw new Error('Google Sheets API –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
        }

        try {
            await this.sheets.spreadsheets.values.append({
                spreadsheetId: this.spreadsheetId,
                range: `${sheetTitle}!A:A`,
                valueInputOption: 'USER_ENTERED',
                insertDataOption: 'INSERT_ROWS',
                resource: {
                    values: data
                }
            });
            return true;
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –ª–∏—Å—Ç ${sheetTitle}:`, error.message);
            return false;
        }
    }

    // –ü–†–û–°–¢–û–ï –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ - –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Å—Ç–æ–≤, –ø—Ä—è–º–æ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
    async logOrder(orderData) {
        console.log('üìä –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ó–ê–ö–ê–ó–ê –í GOOGLE SHEETS (–≤—Å—Ç–∞–≤–∫–∞ –≤–≤–µ—Ä—Ö—É)...');
        
        if (!this.isConnected) {
            console.log('‚ùå Google Sheets –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
            return false;
        }

        try {
            // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ç—Ä–æ–∫–∏
            const commission = orderData.referralCommission || 0;
            const rowData = [
                orderData.id || 'unknown',
                new Date().toLocaleString('ru'),
                orderData.user_id || orderData.userId || 'unknown',
                orderData.userName || 'User',
                orderData.from_currency || orderData.fromCurrency || '',
                orderData.from_amount || orderData.fromAmount || 0,
                orderData.to_currency || orderData.toCurrency || '',
                orderData.to_amount || orderData.toAmount || 0,
                orderData.exchange_rate || orderData.exchangeRate || (orderData.fromAmount && orderData.toAmount ? (orderData.toAmount / orderData.fromAmount) : 0),
                orderData.fee || 0,
                orderData.status || 'pending',
                '', // operator
                '', // operator name
                0,  // processing time
                '', // aml
                0,  // profit
                '',  // priority (removed)
                commission // Referral commission USD
            ];

            // 1) –í—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ –ø–æ–∑–∏—Ü–∏—é 2 (–ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤), —á—Ç–æ–±—ã –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –±—ã–ª–∏ —Å–≤–µ—Ä—Ö—É
            const sheetId = await this.getSheetId('Orders');
            if (sheetId) {
                await this.sheets.spreadsheets.batchUpdate({
                    spreadsheetId: this.spreadsheetId,
                    resource: {
                        requests: [
                            {
                                insertDimension: {
                                    range: {
                                        sheetId: sheetId,
                                        dimension: 'ROWS',
                                        startIndex: 1,
                                        endIndex: 2
                                    },
                                    inheritFromBefore: false
                                }
                            }
                        ]
                    }
                });
            }

            // 2) –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ç–æ–ª—å–∫–æ —á—Ç–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É A2:Q2
            await this.sheets.spreadsheets.values.update({
                spreadsheetId: this.spreadsheetId,
                range: 'Orders!A2:R2',
                valueInputOption: 'USER_ENTERED',
                resource: {
                    values: [rowData]
                }
            });

            console.log(`‚úÖ –ó–ê–ö–ê–ó #${orderData.id} –∑–∞–ø–∏—Å–∞–Ω –≤–≤–µ—Ä—Ö—É –ª–∏—Å—Ç–∞ Orders`);
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –≤–≤–µ—Ä—Ö—É:', error.message);
            console.error('   Stack:', error.stack);
            // Fallback: –æ–±—ã—á–Ω—ã–π append –≤ –∫–æ–Ω–µ—Ü, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –∑–∞–ø–∏—Å—å
            try {
                await this.sheets.spreadsheets.values.append({
                    spreadsheetId: this.spreadsheetId,
                    range: 'Orders!A:Q',
                    valueInputOption: 'USER_ENTERED',
                    insertDataOption: 'INSERT_ROWS',
                    resource: { values: [
                        [
                            orderData.id || 'unknown',
                            new Date().toLocaleString('ru'),
                            orderData.user_id || orderData.userId || 'unknown',
                            orderData.userName || 'User',
                            orderData.from_currency || orderData.fromCurrency || '',
                            orderData.from_amount || orderData.fromAmount || 0,
                            orderData.to_currency || orderData.toCurrency || '',
                            orderData.to_amount || orderData.toAmount || 0,
                            orderData.exchange_rate || orderData.exchangeRate || 0,
                            orderData.fee || 0,
                            orderData.status || 'pending',
                            '', '', 0, '', 0, '',
                            commission
                        ]
                    ] }
                });
                console.log(`‚ÑπÔ∏è Fallback: –∑–∞–∫–∞–∑ #${orderData.id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–Ω–µ—Ü –ª–∏—Å—Ç–∞`);
                return true;
            } catch (appendError) {
                console.error('üí• –û—à–∏–±–∫–∞ fallback append:', appendError.message);
                return false;
            }
        }
    }

    // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    async exportOrders(db) {
        console.log('üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤...');
        
        try {
            const orders = await db.getAllOrdersForExport();
            const data = orders.map(order => [
                order.id,
                new Date(order.created_at).toLocaleString('ru'),
                order.user_id,
                order.username || '',
                order.from_currency,
                parseFloat(order.from_amount),
                order.to_currency,
                parseFloat(order.to_amount || 0),
                parseFloat(order.exchange_rate || 0),
                parseFloat(order.commission || 0),
                order.status,
                order.operator_id || '',
                order.operator_name || '',
                0, // –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                order.aml_status || 'unknown',
                parseFloat(order.profit || 0),
                this.getPriorityFromAmount(order.from_amount)
            ]);

            await this.clearSheet('Orders');
            await this.updateSheet('Orders', data);
            console.log(`‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${data.length} –∑–∞–∫–∞–∑–æ–≤`);
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞–∫–∞–∑–æ–≤:', error.message);
            return false;
        }
    }

    // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    async exportStaff(db) {
        console.log('üë• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤...');
        
        try {
            const staff = await db.getStaffForExport();
            const data = staff.map(member => [
                member.telegram_id,
                member.first_name || '',
                member.username || '',
                member.role,
                member.orders_handled || 0,
                parseFloat(member.total_amount || 0),
                parseFloat(member.avg_commission || 0),
                new Date(member.created_at).toLocaleDateString('ru'),
                member.last_activity ? new Date(member.last_activity).toLocaleString('ru') : '',
                member.is_active ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'
            ]);

            await this.clearSheet('Staff');
            await this.updateSheet('Staff', data);
            console.log(`‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${data.length} –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤`);
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤:', error.message);
            return false;
        }
    }

    // –≠–∫—Å–ø–æ—Ä—Ç –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    async exportDailyStats(db) {
        console.log('üìà –≠–∫—Å–ø–æ—Ä—Ç –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
        
        try {
            const stats = await db.getDailyStatsForExport();
            const data = stats.map(stat => [
                stat.date,
                stat.total_orders || 0,
                stat.completed_orders || 0,
                stat.cancelled_orders || 0,
                stat.processing_orders || 0,
                parseFloat(stat.total_volume || 0),
                parseFloat(stat.total_profit || 0),
                stat.new_users || 0,
                stat.active_operators || 0,
                parseFloat(stat.avg_processing_time || 0)
            ]);

            await this.clearSheet('Daily_Stats');
            await this.updateSheet('Daily_Stats', data);
            console.log(`‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${data.length} –¥–Ω–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏`);
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
            return false;
        }
    }

    // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async exportUsers(db) {
        console.log('üë§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
        
        try {
            const users = await db.getUsersForExport();
            const data = users.map(user => [
                user.telegram_id,
                user.username || '',
                user.first_name || '',
                user.last_name || '',
                new Date(user.created_at).toLocaleDateString('ru'),
                user.total_orders || 0,
                parseFloat(user.total_amount || 0),
                user.last_order_date ? new Date(user.last_order_date).toLocaleDateString('ru') : '',
                user.is_active ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω',
                user.referred_by || '',
                user.referrals_count || 0,
                parseFloat(user.total_commission || 0)
            ]);

            await this.clearSheet('Users');
            await this.updateSheet('Users', data);
            console.log(`‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${data.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error.message);
            return false;
        }
    }

    // –≠–∫—Å–ø–æ—Ä—Ç AML –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    async exportAMLMonitoring(db) {
        console.log('üõ°Ô∏è –≠–∫—Å–ø–æ—Ä—Ç AML –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...');
        
        try {
            const amlData = await db.getAMLDataForExport();
            const data = amlData.map(record => [
                new Date(record.created_at).toLocaleString('ru'),
                record.user_id,
                record.order_id,
                parseFloat(record.amount),
                record.currency,
                record.aml_status || 'unknown',
                parseFloat(record.risk_score || 0),
                record.blockchain_analysis || '',
                record.action_taken || '',
                record.notes || ''
            ]);

            await this.clearSheet('AML_Monitoring');
            await this.updateSheet('AML_Monitoring', data);
            console.log(`‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${data.length} AML –∑–∞–ø–∏—Å–µ–π`);
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ AML –¥–∞–Ω–Ω—ã—Ö:', error.message);
            return false;
        }
    }

    // –ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    async exportAll(db) {
        console.log('üöÄ –ù–∞—á–∏–Ω–∞—é –ø–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...');
        
        const results = [];
        
        try {
            results.push(await this.exportOrders(db));
            results.push(await this.exportStaff(db));
            results.push(await this.exportDailyStats(db));
            results.push(await this.exportUsers(db));
            results.push(await this.exportAMLMonitoring(db));
            
            const successCount = results.filter(r => r).length;
            console.log(`‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: ${successCount}/5 –ª–∏—Å—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ`);
            
            return successCount === 5;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error.message);
            return false;
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    calculateProcessingTime(createdAt, updatedAt) {
        if (!updatedAt) return 0;
        const created = new Date(createdAt);
        const updated = new Date(updatedAt);
        return Math.round((updated - created) / (1000 * 60)); // –≤ –º–∏–Ω—É—Ç–∞—Ö
    }

    getPriorityFromAmount(amount) {
        const amountNum = parseFloat(amount);
        if (amountNum >= 10000) return 'üî• –í–´–°–û–ö–ò–ô';
        if (amountNum >= 1000) return 'üü° –°–†–ï–î–ù–ò–ô';
        return 'üü¢ –ù–ò–ó–ö–ò–ô';
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É
    getSpreadsheetUrl() {
        return `https://docs.google.com/spreadsheets/d/${this.spreadsheetId}`;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    isReady() {
        return Boolean(this.isConnected && this.spreadsheetId);
    }

    // üí± –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ö–£–†–°–ê–ú–ò

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –∫—É—Ä—Å–æ–≤ —Å –≤—Å–µ–º–∏ –≤–∞–ª—é—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–∏
    async initializeRatesTable() {
        if (!this.isConnected) return false;
        
        try {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Å–µ –≤–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã
            const currencyPairs = [
                // –ö—Ä–∏–ø—Ç–æ –∫ USD
                { pair: 'BTC/USD', status: 'API' },
                { pair: 'ETH/USD', status: 'API' },
                { pair: 'USDT/USD', status: 'API' },
                { pair: 'USDC/USD', status: 'API' },
                
                // –§–∏–∞—Ç –≤–∞–ª—é—Ç—ã –∫ USD
                { pair: 'USD/RUB', status: 'API' },
                { pair: 'USD/EUR', status: 'API' },
                { pair: 'USD/ARS', status: 'API' },
                { pair: 'USD/BRL', status: 'API' },
                { pair: 'USD/UAH', status: 'API' },
                { pair: 'USD/KZT', status: 'API' },
                
                // –ö—Ä–∏–ø—Ç–æ –∫ —Ñ–∏–∞—Ç (–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞—Ä—ã)
                { pair: 'BTC/RUB', status: 'API' },
                { pair: 'ETH/RUB', status: 'API' },
                { pair: 'USDT/RUB', status: 'API' },
                { pair: 'BTC/ARS', status: 'API' },
                { pair: 'USDT/ARS', status: 'API' }
            ];

            const rows = currencyPairs.map(pair => [
                pair.pair,
                '', // –ö—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏ - –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                '', // –ö—É—Ä—Å –ø–æ–∫—É–ø–∫–∏ - –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                '', // –°–ø—Ä–µ–¥ - –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                new Date().toLocaleString('ru'),
                pair.status,
                'MANUAL', 
                '–†—É—á–Ω—ã–µ –∫—É—Ä—Å—ã (AUTO –æ—Ç–∫–ª—é—á–µ–Ω–æ)'
            ]);

            await this.sheets.spreadsheets.values.update({
                spreadsheetId: this.spreadsheetId,
                range: 'Manual_Rates!A2:H' + (rows.length + 1),
                valueInputOption: 'USER_ENTERED',
                resource: { values: rows }
            });

            console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ –∫—É—Ä—Å–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å', rows.length, '–≤–∞–ª—é—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–∏');
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –∫—É—Ä—Å–æ–≤:', error.message);
            return false;
        }
    }

    // –ß—Ç–µ–Ω–∏–µ —Ä—É—á–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
    async readManualRatesFromTable() {
        if (!this.isConnected) return [];
        
        try {
            const response = await this.sheets.spreadsheets.values.get({
                spreadsheetId: this.spreadsheetId,
                range: 'Manual_Rates!A2:H1000' // –ß–∏—Ç–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            });

            const rows = response.data.values || [];
            const manualRates = [];

            for (const row of rows) {
                if (row.length >= 6 && row[0]) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –ø–∞—Ä–∞ –≤–∞–ª—é—Ç
                    const [pair, sellRate, buyRate, spread, lastUpdated, status, source, comment] = row;
                    
                    const sellPrice = parseFloat(sellRate);
                    const buyPrice = parseFloat(buyRate);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Ä—É—á–Ω–æ–π –∫—É—Ä—Å —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏
                    if (status === 'MANUAL' && !isNaN(sellPrice) && !isNaN(buyPrice) && sellPrice > 0 && buyPrice > 0) {
                        // üî• –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ü–ï–†–ï–í–û–†–ê–ß–ò–í–ê–ù–ò–ï –ü–ê–† –î–õ–Ø –ö–†–ò–ü–¢–û-–í–ê–õ–Æ–¢
                        let finalPair = pair;
                        let finalSellRate = sellPrice;
                        let finalBuyRate = buyPrice;
                        
                        // –°–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ-–≤–∞–ª—é—Ç –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ü–ï–†–í–´–ú–ò –≤ –ø–∞—Ä–∞—Ö
                        const cryptoFirst = ['BTC', 'ETH', 'USDT', 'USDC', 'BNB', 'ADA', 'DOT', 'LINK', 'LTC', 'XRP', 'SOL', 'MATIC', 'AVAX', 'BCH'];
                        
                        // –†–∞–∑–±–∏—Ä–∞–µ–º –ø–∞—Ä—É –Ω–∞ –≤–∞–ª—é—Ç—ã
                        const [fromCurrency, toCurrency] = pair.split('/');
                        
                        // –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è –≤–∞–ª—é—Ç–∞ –ù–ï –∫—Ä–∏–ø—Ç–æ, –∞ –≤—Ç–æ—Ä–∞—è –∫—Ä–∏–ø—Ç–æ - –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–∞—Ä—É
                        if (!cryptoFirst.includes(fromCurrency) && cryptoFirst.includes(toCurrency)) {
                            finalPair = `${toCurrency}/${fromCurrency}`;
                            finalSellRate = 1 / buyPrice; // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫—É—Ä—Å—ã
                            finalBuyRate = 1 / sellPrice;
                            console.log(`üîÑ –ü–ï–†–ï–í–ï–†–ù–£–õ–ò –ü–ê–†–£: ${pair} ‚Üí ${finalPair} (–∫—É—Ä—Å—ã –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã)`);
                        }
                        
                        manualRates.push({
                            pair: finalPair,
                            sellRate: finalSellRate,
                            buyRate: finalBuyRate,
                            spread: parseFloat(spread) || 0,
                            lastUpdated: lastUpdated,
                            status: status,
                            source: source || 'MANUAL',
                            comment: comment || ''
                        });
                    }
                }
            }

            console.log(`üìä –ü—Ä–æ—á–∏—Ç–∞–Ω–æ ${manualRates.length} —Ä—É—á–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã`);
            return manualRates;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã:', error.message);
            return [];
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å API)
    async syncCurrentRatesToTable(currentRates) {
        if (!this.isConnected || !currentRates) return false;
        
        try {
            // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä—É—á–Ω—ã–µ –∫—É—Ä—Å—ã
            const manualRates = await this.readManualRatesFromTable();
            const manualPairs = new Set(manualRates.map(r => r.pair));

            const updatePromises = [];

            for (const rate of currentRates) {
                // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞—Ä—É –≤–∞–ª—é—Ç –∫ USD
                const mainPair = `${rate.currency}/USD`;
                
                // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ä—É—á–Ω–æ–π –∫—É—Ä—Å, –æ–±–Ω–æ–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                if (!manualPairs.has(mainPair)) {
                    updatePromises.push(
                        this.updateRateInTable(mainPair, rate.sell, rate.buy, 'MANUAL', '–†—É—á–Ω—ã–µ –∫—É—Ä—Å—ã (AUTO –æ—Ç–∫–ª—é—á–µ–Ω–æ)')
                    );
                }
            }

            await Promise.allSettled(updatePromises);
            console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫—É—Ä—Å—ã –≤ —Ç–∞–±–ª–∏—Ü—É');
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫—É—Ä—Å–æ–≤:', error.message);
            return false;
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ
    async updateRateInTable(pair, sellRate, buyRate, status = 'MANUAL', comment = '') {
        if (!this.isConnected) return false;
        
        try {
            const response = await this.sheets.spreadsheets.values.get({
                spreadsheetId: this.spreadsheetId,
                range: 'Manual_Rates!A2:H1000'
            });

            const rows = response.data.values || [];
            let rowIndex = -1;

            for (let i = 0; i < rows.length; i++) {
                if (rows[i][0] === pair) {
                    rowIndex = i + 2; // +2 –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ–º —Å A2
                    break;
                }
            }

            if (rowIndex === -1) {
                // –ï—Å–ª–∏ –ø–∞—Ä—ã –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
                rowIndex = rows.length + 2;
            }

            const spread = sellRate > 0 ? ((sellRate - buyRate) / sellRate * 100).toFixed(2) : '0';
            const source = "MANUAL"; // üî• –í—Å–µ–≥–¥–∞ MANUAL!
            
            const updateData = [
                pair,
                sellRate,
                buyRate,
                spread,
                new Date().toLocaleString('ru'),
                status,
                source,
                comment
            ];

            await this.sheets.spreadsheets.values.update({
                spreadsheetId: this.spreadsheetId,
                range: `Manual_Rates!A${rowIndex}:H${rowIndex}`,
                valueInputOption: 'USER_ENTERED',
                resource: { values: [updateData] }
            });

            if (status === 'MANUAL') {
                console.log(`‚úÖ –†—É—á–Ω–æ–π –∫—É—Ä—Å ${pair}: –ø—Ä–æ–¥–∞–∂–∞ ${sellRate}, –ø–æ–∫—É–ø–∫–∞ ${buyRate}`);
            }
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ:', error.message);
            return false;
        }
    }
}

module.exports = GoogleSheetsManager; 