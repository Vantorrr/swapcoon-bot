const axios = require('axios');

class AMLService {
    constructor() {
        this.apiUrl = process.env.AML_API_URL;
        this.apiKey = process.env.AML_API_KEY;
        this.cache = new Map(); // –ö–µ—à –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏
        this.cacheExpiry = 60 * 60 * 1000; // 1 —á–∞—Å
    }

    async checkAddress(address, currency) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
            const cacheKey = `${address}_${currency}`;
            const cached = this.cache.get(cacheKey);
            
            if (cached && Date.now() - cached.timestamp < this.cacheExpiry) {
                console.log('‚úÖ AML —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –∫–µ—à–∞ –¥–ª—è', address);
                return cached.result;
            }

            // –ï—Å–ª–∏ –Ω–µ—Ç API –∫–ª—é—á–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if (!this.apiKey || !this.apiUrl) {
                console.log('‚ö†Ô∏è AML API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º');
                return this.getTestResult(address, currency);
            }

            // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ AML API
            const response = await axios.post(this.apiUrl, {
                address: address,
                currency: currency.toUpperCase(),
                checks: ['sanctions', 'blacklist', 'mixer', 'exchange']
            }, {
                headers: {
                    'Authorization': `Bearer ${this.apiKey}`,
                    'Content-Type': 'application/json'
                },
                timeout: 30000 // 30 —Å–µ–∫—É–Ω–¥
            });

            const result = this.parseAMLResponse(response.data);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
            this.cache.set(cacheKey, {
                result: result,
                timestamp: Date.now()
            });

            console.log('‚úÖ AML –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è', address, '- —Å—Ç–∞—Ç—É—Å:', result.status);
            return result;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ AML –ø—Ä–æ–≤–µ—Ä–∫–∏:', error.message);
            
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return {
                status: 'failed',
                risk: 'unknown',
                score: 0,
                reasons: ['–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ AML'],
                details: {
                    sanctions: false,
                    blacklist: false,
                    mixer: false,
                    exchange: false
                },
                timestamp: Date.now()
            };
        }
    }

    parseAMLResponse(data) {
        // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –æ—Ç AML —Å–µ—Ä–≤–∏—Å–∞
        const riskScore = data.risk_score || 0;
        let status = 'approved';
        let risk = 'low';

        if (riskScore > 80) {
            status = 'rejected';
            risk = 'high';
        } else if (riskScore > 50) {
            status = 'manual_review';
            risk = 'medium';
        }

        return {
            status: status,
            risk: risk,
            score: riskScore,
            reasons: data.flags || [],
            details: {
                sanctions: data.sanctions || false,
                blacklist: data.blacklist || false,
                mixer: data.mixer || false,
                exchange: data.exchange || false
            },
            timestamp: Date.now()
        };
    }

    getTestResult(address, currency) {
        // –¢–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        const addressHash = this.simpleHash(address);
        const riskScore = addressHash % 100;

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏ –∞–¥—Ä–µ—Å–∞
        const connections = this.generateDetailedConnections(addressHash);
        const blockchain = this.detectBlockchain(address, currency);

        let status = 'approved';
        let risk = 'low';
        const reasons = [];

        // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        if (riskScore > 85) {
            status = 'rejected';
            risk = 'high';
            reasons.push('–ê–¥—Ä–µ—Å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ');
        } else if (riskScore > 50) {
            status = 'manual_review';
            risk = 'medium';
            reasons.push('–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞');
        }

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if (address.includes('test-reject')) {
            status = 'rejected';
            risk = 'high';
            reasons.push('–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è');
        } else if (address.includes('test-review')) {
            status = 'manual_review';
            risk = 'medium';
            reasons.push('–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏');
        }

        return {
            status: status,
            risk: risk,
            score: riskScore,
            reasons: reasons,
            address: address,
            blockchain: blockchain,
            connections: connections,
            details: {
                sanctions: riskScore > 90,
                blacklist: riskScore > 85,
                mixer: riskScore > 70,
                exchange: riskScore > 30
            },
            timestamp: Date.now(),
            detailedReport: this.generateDetailedReport(address, blockchain, connections, riskScore)
        };
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π –∞–¥—Ä–µ—Å–∞
    generateDetailedConnections(hash) {
        const baseCategories = [
            { name: '–ë–∏—Ä–∂–∞', basePercent: 45, risk: 'low' },
            { name: '–°—É–¥–µ–±–Ω—ã–µ —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–∞', basePercent: 8, risk: 'high' },
            { name: '–°–∞–Ω–∫—Ü–∏–∏', basePercent: 5, risk: 'high' },
            { name: '–ì–æ—Ä—è—á–∏–π –∫–æ—à–µ–ª–µ–∫', basePercent: 12, risk: 'medium' },
            { name: '–ë–∏—Ä–∂–∞ —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º', basePercent: 3, risk: 'high' },
            { name: '–ú–æ—Å—Ç', basePercent: 7, risk: 'low' },
            { name: '–ì–µ–º–±–ª–∏–Ω–≥', basePercent: 4, risk: 'medium' },
            { name: '–ü—Ä–æ–≤–∞–π–¥–µ—Ä –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π', basePercent: 6, risk: 'low' },
            { name: '–ú–∏–∫—Å–µ—Ä', basePercent: 2, risk: 'high' },
            { name: 'DEX', basePercent: 5, risk: 'low' }
        ];

        const minorCategories = [
            '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å', '–õ–µ–Ω–¥–∏–Ω–≥', '–Æ—Ä–∏—Å–¥–∏–∫—Ü–∏—è —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º',
            '–£–∫—Ä–∞–¥–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞', 'P2P-–±–∏—Ä–∂–∞', '–°–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç',
            '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ', '–ü—Ä–æ—Ç–æ–∫–æ–ª –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏', '–°–∫–∞–º',
            '–ö–æ–Ω—Ñ–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞', '–ö—Ä–∏–ø—Ç–æ-–±–∞–Ω–∫–æ–º–∞—Ç', '–§–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Ä—Ä–æ—Ä–∏–∑–º–∞',
            '–ú–∞–π–Ω–∏–Ω–≥–æ–≤—ã–π –ø—É–ª', '–í—ã–º–æ–≥–∞—Ç–µ–ª—å—Å—Ç–≤–æ'
        ];

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏
        const connections = baseCategories.map(category => {
            const variation = (hash % 41) - 20; // -20 –¥–æ +20
            let percent = Math.max(0, category.basePercent + variation);
            
            return {
                name: category.name,
                percent: parseFloat(percent.toFixed(1)),
                risk: category.risk
            };
        });

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –º–∏–Ω–æ—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const numMinor = 3 + (hash % 5); // 3-7 –º–∏–Ω–æ—Ä–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        for (let i = 0; i < numMinor; i++) {
            const categoryIndex = (hash + i) % minorCategories.length;
            connections.push({
                name: minorCategories[categoryIndex],
                percent: parseFloat((Math.random() * 0.8 + 0.1).toFixed(1)), // 0.1-0.9%
                risk: Math.random() > 0.7 ? 'high' : 'medium'
            });
        }

        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã —á—Ç–æ–±—ã —Å—É–º–º–∞ –±—ã–ª–∞ ~100%
        const total = connections.reduce((sum, conn) => sum + conn.percent, 0);
        const factor = 100 / total;
        
        connections.forEach(conn => {
            conn.percent = parseFloat((conn.percent * factor).toFixed(1));
        });

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –ø—Ä–æ—Ü–µ–Ω—Ç–∞
        return connections.sort((a, b) => b.percent - a.percent);
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–ª–æ–∫—á–µ–π–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É
    detectBlockchain(address, currency) {
        const blockchains = {
            'BTC': 'Bitcoin (BTC)',
            'ETH': 'Ethereum (ETH)',
            'USDT': address.startsWith('T') ? 'Tron (TRX)' : 'Ethereum (ETH)',
            'USDC': 'Ethereum (ETH)',
            'TRX': 'Tron (TRX)',
            'BNB': 'BNB Smart Chain (BSC)',
            'SOL': 'Solana (SOL)',
            'ADA': 'Cardano (ADA)',
            'DOT': 'Polkadot (DOT)',
            'MATIC': 'Polygon (MATIC)',
            'AVAX': 'Avalanche (AVAX)'
        };

        return blockchains[currency.toUpperCase()] || `${currency.toUpperCase()} Network`;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    generateDetailedReport(address, blockchain, connections, riskScore) {
        const majorConnections = connections.filter(c => c.percent >= 1.0);
        const minorConnections = connections.filter(c => c.percent < 1.0);

        let riskLevel = '–ù–∏–∑–∫–∏–π';
        let riskEmoji = 'üü¢';
        
        if (riskScore > 80) {
            riskLevel = '–í—ã—Å–æ–∫–∏–π';
            riskEmoji = 'üî¥';
        } else if (riskScore > 50) {
            riskLevel = '–°—Ä–µ–¥–Ω–∏–π';
            riskEmoji = 'üü°';
        }

        return {
            header: `üîµ –ê–¥—Ä–µ—Å: ${address}\n\n‚õìÔ∏è –ë–ª–æ–∫—á–µ–π–Ω: ${blockchain}\n\n–°–≤—è–∑–∏ –∞–¥—Ä–µ—Å–∞:`,
            majorConnections: majorConnections,
            minorConnections: minorConnections,
            footer: `üìà –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: ${riskLevel} (${riskScore}%) ${riskEmoji}`
        };
    }

    simpleHash(str) {
        let hash = 0;
        for (let i = 0; i < str.length; i++) {
            const char = str.charCodeAt(i);
            hash = ((hash << 5) - hash) + char;
            hash = hash & hash; // Convert to 32-bit integer
        }
        return Math.abs(hash);
    }

    getRiskDescription(risk) {
        const descriptions = {
            'low': 'üü¢ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ - –∞–¥—Ä–µ—Å –±–µ–∑–æ–ø–∞—Å–µ–Ω',
            'medium': 'üü° –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º',
            'high': 'üî¥ –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ - –∞–¥—Ä–µ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
            'unknown': '‚ö™ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∏—Å–∫ - –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏'
        };

        return descriptions[risk] || descriptions['unknown'];
    }

    getStatusMessage(status) {
        const messages = {
            'approved': '‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
            'rejected': '‚ùå –ê–¥—Ä–µ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω —Å–∏—Å—Ç–µ–º–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
            'manual_review': '‚è≥ –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º',
            'failed': '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É'
        };

        return messages[status] || messages['failed'];
    }

    // –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
    clearCache() {
        this.cache.clear();
        console.log('üóëÔ∏è –ö–µ—à AML –ø—Ä–æ–≤–µ—Ä–æ–∫ –æ—á–∏—â–µ–Ω');
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à–∞
    getCacheStats() {
        return {
            size: this.cache.size,
            entries: Array.from(this.cache.keys())
        };
    }
}

module.exports = AMLService; 