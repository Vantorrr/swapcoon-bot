const axios = require('axios');

class AMLService {
    constructor() {
        this.apiUrl = process.env.AML_API_URL;
        this.apiKey = process.env.AML_API_KEY;
        this.cache = new Map(); // –ö–µ—à –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏
        this.cacheExpiry = 60 * 60 * 1000; // 1 —á–∞—Å
    }

    async checkAddress(address, currency) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
            const cacheKey = `${address}_${currency}`;
            const cached = this.cache.get(cacheKey);
            
            if (cached && Date.now() - cached.timestamp < this.cacheExpiry) {
                console.log('‚úÖ AML —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –∫–µ—à–∞ –¥–ª—è', address);
                return cached.result;
            }

            // –ï—Å–ª–∏ –Ω–µ—Ç API –∫–ª—é—á–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if (!this.apiKey || !this.apiUrl) {
                console.log('‚ö†Ô∏è AML API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º');
                return this.getTestResult(address, currency);
            }

            // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ AML API
            const response = await axios.post(this.apiUrl, {
                address: address,
                currency: currency.toUpperCase(),
                checks: ['sanctions', 'blacklist', 'mixer', 'exchange']
            }, {
                headers: {
                    'Authorization': `Bearer ${this.apiKey}`,
                    'Content-Type': 'application/json'
                },
                timeout: 30000 // 30 —Å–µ–∫—É–Ω–¥
            });

            const result = this.parseAMLResponse(response.data);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
            this.cache.set(cacheKey, {
                result: result,
                timestamp: Date.now()
            });

            console.log('‚úÖ AML –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è', address, '- —Å—Ç–∞—Ç—É—Å:', result.status);
            return result;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ AML –ø—Ä–æ–≤–µ—Ä–∫–∏:', error.message);
            
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return {
                status: 'failed',
                risk: 'unknown',
                score: 0,
                reasons: ['–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ AML'],
                details: {
                    sanctions: false,
                    blacklist: false,
                    mixer: false,
                    exchange: false
                },
                timestamp: Date.now()
            };
        }
    }

    parseAMLResponse(data) {
        // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –æ—Ç AML —Å–µ—Ä–≤–∏—Å–∞
        const riskScore = data.risk_score || 0;
        let status = 'approved';
        let risk = 'low';

        if (riskScore > 80) {
            status = 'rejected';
            risk = 'high';
        } else if (riskScore > 50) {
            status = 'manual_review';
            risk = 'medium';
        }

        return {
            status: status,
            risk: risk,
            score: riskScore,
            reasons: data.flags || [],
            details: {
                sanctions: data.sanctions || false,
                blacklist: data.blacklist || false,
                mixer: data.mixer || false,
                exchange: data.exchange || false
            },
            timestamp: Date.now()
        };
    }

    getTestResult(address, currency) {
        // –¢–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        const addressHash = this.simpleHash(address);
        const riskScore = addressHash % 100;

        let status = 'approved';
        let risk = 'low';
        const reasons = [];

        // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        if (riskScore > 85) {
            status = 'rejected';
            risk = 'high';
            reasons.push('–ê–¥—Ä–µ—Å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ');
        } else if (riskScore > 60) {
            status = 'manual_review';
            risk = 'medium';
            reasons.push('–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞');
        }

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if (address.includes('test-reject')) {
            status = 'rejected';
            risk = 'high';
            reasons.push('–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è');
        } else if (address.includes('test-review')) {
            status = 'manual_review';
            risk = 'medium';
            reasons.push('–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏');
        }

        return {
            status: status,
            risk: risk,
            score: riskScore,
            reasons: reasons,
            details: {
                sanctions: riskScore > 90,
                blacklist: riskScore > 85,
                mixer: riskScore > 70,
                exchange: riskScore > 30
            },
            timestamp: Date.now()
        };
    }

    simpleHash(str) {
        let hash = 0;
        for (let i = 0; i < str.length; i++) {
            const char = str.charCodeAt(i);
            hash = ((hash << 5) - hash) + char;
            hash = hash & hash; // Convert to 32-bit integer
        }
        return Math.abs(hash);
    }

    getRiskDescription(risk) {
        const descriptions = {
            'low': 'üü¢ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ - –∞–¥—Ä–µ—Å –±–µ–∑–æ–ø–∞—Å–µ–Ω',
            'medium': 'üü° –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º',
            'high': 'üî¥ –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ - –∞–¥—Ä–µ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
            'unknown': '‚ö™ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∏—Å–∫ - –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏'
        };

        return descriptions[risk] || descriptions['unknown'];
    }

    getStatusMessage(status) {
        const messages = {
            'approved': '‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
            'rejected': '‚ùå –ê–¥—Ä–µ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω —Å–∏—Å—Ç–µ–º–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
            'manual_review': '‚è≥ –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º',
            'failed': '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É'
        };

        return messages[status] || messages['failed'];
    }

    // –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
    clearCache() {
        this.cache.clear();
        console.log('üóëÔ∏è –ö–µ—à AML –ø—Ä–æ–≤–µ—Ä–æ–∫ –æ—á–∏—â–µ–Ω');
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à–∞
    getCacheStats() {
        return {
            size: this.cache.size,
            entries: Array.from(this.cache.keys())
        };
    }
}

module.exports = AMLService; 