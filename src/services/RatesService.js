class RatesService {
    constructor() {
        console.log('üî• –ü–†–û–°–¢–û–ô RatesService - –¢–û–õ–¨–ö–û GOOGLE SHEETS!');
    }

    async getRates() {
        console.log('üî• getRates() - –ß–ò–¢–ê–ï–ú –¢–û–õ–¨–ö–û –ò–ó GOOGLE SHEETS!');
        
        if (!global.googleSheetsManager || !global.googleSheetsManager.isReady()) {
            console.error('‚ùå Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!');
            throw new Error('Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!');
        }

        const manualRates = await global.googleSheetsManager.readManualRatesFromTable();
        console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${manualRates.length} –∫—É—Ä—Å–æ–≤ –∏–∑ Google Sheets`);
        
        if (!manualRates || manualRates.length === 0) {
            throw new Error('Google Sheets –ø—É—Å—Ç!');
        }

        const rates = [];
        for (const rate of manualRates) {
            const [fromCurrency, toCurrency] = rate.pair.split('/');
            
            console.log(`üî• –î–æ–±–∞–≤–ª—è–µ–º –∫—É—Ä—Å: ${fromCurrency} sell=${rate.sellRate}, buy=${rate.buyRate}`);
            
            rates.push({
                currency: fromCurrency,
                price: (rate.sellRate + rate.buyRate) / 2,
                sell: rate.sellRate,
                buy: rate.buyRate,
                source: 'GOOGLE_SHEETS',
                type: 'crypto',
                lastUpdate: new Date().toISOString()
            });
        }

        console.log(`üî• –í–û–ó–í–†–ê–©–ê–ï–ú ${rates.length} –ö–£–†–°–û–í –ò–ó GOOGLE SHEETS!`);
        rates.forEach(rate => {
            console.log(`   ${rate.currency}: sell=${rate.sell}, source=${rate.source}`);
        });
        
        return rates;
    }

    async syncWithGoogleSheets() {
        console.log('üî• syncWithGoogleSheets() - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –≤—Å–µ–≥–¥–∞ —á–∏—Ç–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é');
        return true;
    }

    getLastUpdateTime() {
        return new Date().toISOString();
    }
}

module.exports = RatesService;
