class RatesService {
    constructor() {
        console.log('üî• –ü–†–û–°–¢–û–ô RatesService - –¢–û–õ–¨–ö–û GOOGLE SHEETS!');
    }

    async getRates() {
        console.log('üî• getRates() - –ß–ò–¢–ê–ï–ú –¢–û–õ–¨–ö–û –ò–ó GOOGLE SHEETS!');
        
        // üî• –ü–†–û–í–ï–†–Ø–ï–ú –°–û–°–¢–û–Ø–ù–ò–ï GOOGLE SHEETS MANAGER
        console.log('üîç global.googleSheetsManager —Å—É—â–µ—Å—Ç–≤—É–µ—Ç?', !!global.googleSheetsManager);
        if (global.googleSheetsManager) {
            console.log('üîç global.googleSheetsManager.isReady():', global.googleSheetsManager.isReady());
        }
        
        // üî• –õ–û–ì–ò–ö–ê: –ï–°–õ–ò –ù–ï–¢ GLOBAL –ò–õ–ò –ù–ï –ì–û–¢–û–í - –ü–†–û–ë–£–ï–ú –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–¢–¨
        if (!global.googleSheetsManager || !global.googleSheetsManager.isReady()) {
            console.log('üî• –ù–£–ñ–ù–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø GoogleSheetsManager!');
            await this.initGoogleSheetsFromFile();
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            console.log('üîç –ü–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ - googleSheetsManager —Å—É—â–µ—Å—Ç–≤—É–µ—Ç?', !!global.googleSheetsManager);
            if (global.googleSheetsManager) {
                console.log('üîç –ü–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ - isReady():', global.googleSheetsManager.isReady());
            }
        }
        
        if (!global.googleSheetsManager || !global.googleSheetsManager.isReady()) {
            console.error('‚ùå Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–∞–∂–µ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏!');
            console.error('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –§–ò–ù–ê–õ–¨–ù–û–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø:');
            console.error('   global.googleSheetsManager:', !!global.googleSheetsManager);
            if (global.googleSheetsManager) {
                console.error('   isReady():', global.googleSheetsManager.isReady());
                console.error('   isConnected:', global.googleSheetsManager.isConnected);
            }
            throw new Error('Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!');
        }

        const manualRates = await global.googleSheetsManager.readManualRatesFromTable();
        console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${manualRates.length} –∫—É—Ä—Å–æ–≤ –∏–∑ Google Sheets`);
        
        if (!manualRates || manualRates.length === 0) {
            throw new Error('Google Sheets –ø—É—Å—Ç!');
        }

        // üî• –í–û–ó–í–†–ê–©–ê–ï–ú –§–û–†–ú–ê–¢ –°–û–í–ú–ï–°–¢–ò–ú–´–ô –° API (currency + rates)
        const currencyMap = new Map();
        
        for (const rate of manualRates) {
            const [fromCurrency, toCurrency] = rate.pair.split('/');
            console.log(`üî• –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä—É: ${rate.pair} (${fromCurrency} ‚Üí ${toCurrency})`);
            
            // –î–æ–±–∞–≤–ª—è–µ–º fromCurrency –µ—Å–ª–∏ –µ—â–µ –Ω–µ—Ç
            if (!currencyMap.has(fromCurrency)) {
                currencyMap.set(fromCurrency, {
                currency: fromCurrency,
                    price: rate.sellRate,
                sell: rate.sellRate,
                buy: rate.buyRate,
                source: 'GOOGLE_SHEETS',
                    type: fromCurrency === 'USD' || fromCurrency === 'EUR' || fromCurrency === 'RUB' || fromCurrency === 'ARS' || fromCurrency === 'BRL' ? 'fiat' : 'crypto',
                    lastUpdate: new Date().toISOString(),
                    pair: rate.pair
            });
                console.log(`üî• –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª—é—Ç—É ${fromCurrency}: sell=${rate.sellRate}, buy=${rate.buyRate}`);
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º toCurrency –µ—Å–ª–∏ –µ—â–µ –Ω–µ—Ç (—Å –æ–±—Ä–∞—Ç–Ω—ã–º –∫—É—Ä—Å–æ–º)
            if (!currencyMap.has(toCurrency)) {
                const reverseSell = 1 / rate.buyRate;
                const reverseBuy = 1 / rate.sellRate;
                currencyMap.set(toCurrency, {
                    currency: toCurrency,
                    price: reverseSell,
                    sell: reverseSell,
                    buy: reverseBuy,
                    source: 'GOOGLE_SHEETS',
                    type: toCurrency === 'USD' || toCurrency === 'EUR' || toCurrency === 'RUB' || toCurrency === 'ARS' || toCurrency === 'BRL' ? 'fiat' : 'crypto',
                    lastUpdate: new Date().toISOString(),
                    pair: `${toCurrency}/${fromCurrency}`
                });
                console.log(`üî• –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª—é—Ç—É ${toCurrency} (–æ–±—Ä–∞—Ç–Ω—ã–π): sell=${reverseSell}, buy=${reverseBuy}`);
            }
        }
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Map –≤ –º–∞—Å—Å–∏–≤
        const rates = Array.from(currencyMap.values());

        console.log(`üî• –í–û–ó–í–†–ê–©–ê–ï–ú ${rates.length} –ö–£–†–°–û–í –ò–ó GOOGLE SHEETS!`);
        rates.forEach(rate => {
            console.log(`   ${rate.currency}: sell=${rate.sell}, source=${rate.source}`);
        });
        
        return rates;
    }

    async syncWithGoogleSheets() {
        console.log('üî• syncWithGoogleSheets() - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –≤—Å–µ–≥–¥–∞ —á–∏—Ç–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é');
        return true;
    }

    getLastUpdateTime() {
        return new Date().toISOString();
    }

    // üî• –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø GOOGLE SHEETS (–ü–†–ò–û–†–ò–¢–ï–¢: –§–ê–ô–õ ‚Üí RAILWAY)
    async initGoogleSheetsFromFile() {
        console.log('üî• ‚ö° –ù–ê–ß–ò–ù–ê–ï–ú –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Æ GoogleSheetsManager...');
        
        try {
            const fs = require('fs');
            const path = require('path');
            const configPath = path.join(__dirname, '..', '..', 'config', 'google-sheets.json');
            
            console.log('üîç –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É:', configPath);
            console.log('üîç –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç?', fs.existsSync(configPath));
            
            let config = null;
            
            // –ü–û–ü–´–¢–ö–ê 1: –ß–∏—Ç–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
            if (fs.existsSync(configPath)) {
                console.log('üìÑ ‚úÖ –ù–ê–ô–î–ï–ù –õ–û–ö–ê–õ–¨–ù–´–ô –§–ê–ô–õ! –ß–∏—Ç–∞–µ–º config/google-sheets.json...');
                config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
                console.log('üìä –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω! Spreadsheet ID:', config.spreadsheet_id ? '–µ—Å—Ç—å' : '–Ω–µ—Ç');
                console.log('üìä Enabled:', config.enabled);
                console.log('üìä Credentials client_email:', config.credentials?.client_email || '–Ω–µ—Ç');
            } else {
                console.log('‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –ù–ï –ù–ê–ô–î–ï–ù');
            }
            
            // –ü–û–ü–´–¢–ö–ê 2: Railway –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç)
            if (!config) {
                console.log('üöÇ ‚ö° –ü–†–û–ë–£–ï–ú RAILWAY –ü–ï–†–ï–ú–ï–ù–ù–´–ï...');
                
                const envSpreadsheetId = process.env.GOOGLE_SHEETS_ID;
                const envCredentials = process.env.GOOGLE_SHEETS_CREDENTIALS;
                const envEnabled = process.env.GOOGLE_SHEETS_ENABLED !== 'false';
                
                console.log('üîç GOOGLE_SHEETS_ID:', envSpreadsheetId ? '–ï–°–¢–¨' : '–ù–ï–¢');
                console.log('üîç GOOGLE_SHEETS_CREDENTIALS:', envCredentials ? '–ï–°–¢–¨' : '–ù–ï–¢');
                console.log('üîç GOOGLE_SHEETS_ENABLED:', envEnabled);
                
                if (envSpreadsheetId && envCredentials && envEnabled) {
                    try {
                        console.log('üîß ‚ö° –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú RAILWAY JSON...');
                        console.log('üîç –î–ª–∏–Ω–∞ credentials:', envCredentials.length);
                        console.log('üîç –ü–µ—Ä–≤—ã–µ 20 —Å–∏–º–≤–æ–ª–æ–≤:', envCredentials.substring(0, 20));
                        
                        // –û—á–∏—Å—Ç–∫–∞ JSON
                        let cleanCredentials = envCredentials.trim();
                        if (cleanCredentials.startsWith('=')) {
                            console.log('üîß –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–π = –∏–∑ –Ω–∞—á–∞–ª–∞');
                            cleanCredentials = cleanCredentials.substring(1);
                        }
                        
                        console.log('üîß –ü–∞—Ä—Å–∏–º –æ—á–∏—â–µ–Ω–Ω—ã–π JSON...');
                        const railwayCredentials = JSON.parse(cleanCredentials);
                        console.log('‚úÖ RAILWAY JSON –£–°–ü–ï–®–ù–û –°–ü–ê–†–®–ï–ù!');
                        console.log('üìä Client email:', railwayCredentials.client_email || '–Ω–µ—Ç');
                        
                        config = {
                            enabled: true,
                            spreadsheet_id: envSpreadsheetId,
                            credentials: railwayCredentials
                        };
                        
                        console.log('‚úÖ RAILWAY –ö–û–ù–§–ò–ì –°–û–ó–î–ê–ù!');
                    } catch (railwayError) {
                        console.error('‚ùå –û–®–ò–ë–ö–ê –ü–ê–†–°–ò–ù–ì–ê RAILWAY JSON:', railwayError.message);
                        console.error('üîç –ü—Ä–æ–±–ª–µ–º–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ (–ø–µ—Ä–≤—ã–µ 100):', envCredentials?.substring(0, 100));
                        return;
                    }
                } else {
                    console.log('‚ùå RAILWAY –ü–ï–†–ï–ú–ï–ù–ù–´–ï –ù–ï–ü–û–õ–ù–´–ï!');
                    console.log('   –ù—É–∂–Ω—ã: GOOGLE_SHEETS_ID, GOOGLE_SHEETS_CREDENTIALS, GOOGLE_SHEETS_ENABLED');
                    return;
                }
            }
            
            // –ü–û–ü–´–¢–ö–ê 3: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GoogleSheetsManager
            if (config && config.enabled && config.spreadsheet_id && config.credentials) {
                console.log('üöÄ –ó–ê–ü–£–°–ö–ê–ï–ú –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Æ GOOGLESHEETSMANAGER...');
                console.log('üìä Spreadsheet ID:', config.spreadsheet_id);
                console.log('üìä Client email:', config.credentials.client_email);
                
                const GoogleSheetsManager = require('./GoogleSheetsManager');
                const manager = new GoogleSheetsManager();
                
                console.log('üîß –í—ã–∑—ã–≤–∞–µ–º manager.init()...');
                const success = await manager.init(config.credentials, config.spreadsheet_id);
                console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç manager.init():', success);
                
                if (success) {
                    console.log('üìã ‚úÖ INIT –£–°–ü–ï–®–ï–ù! –°–æ–∑–¥–∞–µ–º worksheets...');
                    await manager.createWorksheets();
                    console.log('üìã ‚úÖ WORKSHEETS –°–û–ó–î–ê–ù–´!');
                    
                    global.googleSheetsManager = manager;
                    console.log('üåê ‚úÖ GLOBAL –£–°–¢–ê–ù–û–í–õ–ï–ù!');
                    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º isReady():', manager.isReady());
                    console.log('üéâ ‚úÖ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û–õ–ù–û–°–¢–¨–Æ –ó–ê–í–ï–†–®–ï–ù–ê!');
                } else {
                    console.error('‚ùå manager.init() –í–ï–†–ù–£–õ FALSE!');
                }
            } else {
                console.error('‚ùå –ù–ï–ü–û–õ–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø!');
                console.error('   enabled:', !!config?.enabled);
                console.error('   spreadsheet_id:', !!config?.spreadsheet_id);  
                console.error('   credentials:', !!config?.credentials);
            }
        } catch (error) {
            console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò:', error.message);
            console.error('üîç Stack:', error.stack);
        }
    }
}

module.exports = RatesService;
