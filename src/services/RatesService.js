class RatesService {
    constructor() {
        console.log('üî• –ü–†–û–°–¢–û–ô RatesService - –¢–û–õ–¨–ö–û GOOGLE SHEETS!');
    }

    async getRates() {
        console.log('üî• getRates() - –ß–ò–¢–ê–ï–ú –¢–û–õ–¨–ö–û –ò–ó GOOGLE SHEETS!');
        
        // üî• –ü–†–û–°–¢–ê–Ø –õ–û–ì–ò–ö–ê: –ï–°–õ–ò –ù–ï–¢ GLOBAL - –°–û–ó–î–ê–ï–ú –°–ê–ú–ò!
        if (!global.googleSheetsManager || !global.googleSheetsManager.isReady()) {
            console.log('üî• –°–û–ó–î–ê–ï–ú GoogleSheetsManager –ò–ó config/google-sheets.json!');
            await this.initGoogleSheetsFromFile();
        }
        
        if (!global.googleSheetsManager || !global.googleSheetsManager.isReady()) {
            console.error('‚ùå Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–∞–∂–µ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏!');
            throw new Error('Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!');
        }

        const manualRates = await global.googleSheetsManager.readManualRatesFromTable();
        console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${manualRates.length} –∫—É—Ä—Å–æ–≤ –∏–∑ Google Sheets`);
        
        if (!manualRates || manualRates.length === 0) {
            throw new Error('Google Sheets –ø—É—Å—Ç!');
        }

        const rates = [];
        // üî• –í–û–ó–í–†–ê–©–ê–ï–ú –§–û–†–ú–ê–¢ –°–û–í–ú–ï–°–¢–ò–ú–´–ô –° API (currency + rates)
        const currencyMap = new Map();
        
        for (const rate of manualRates) {
            const [fromCurrency, toCurrency] = rate.pair.split('/');
            console.log(`üî• –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä—É: ${rate.pair} (${fromCurrency} ‚Üí ${toCurrency})`);
            
            // –î–æ–±–∞–≤–ª—è–µ–º fromCurrency –µ—Å–ª–∏ –µ—â–µ –Ω–µ—Ç
            if (!currencyMap.has(fromCurrency)) {
                currencyMap.set(fromCurrency, {
                    currency: fromCurrency,
                    price: rate.sellRate,
                    sell: rate.sellRate,
                    buy: rate.buyRate,
                    source: 'GOOGLE_SHEETS',
                    type: fromCurrency === 'USD' || fromCurrency === 'EUR' || fromCurrency === 'RUB' || fromCurrency === 'ARS' || fromCurrency === 'BRL' ? 'fiat' : 'crypto',
                    lastUpdate: new Date().toISOString(),
                    pair: rate.pair
                });
                console.log(`üî• –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª—é—Ç—É ${fromCurrency}: sell=${rate.sellRate}, buy=${rate.buyRate}`);
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º toCurrency –µ—Å–ª–∏ –µ—â–µ –Ω–µ—Ç (—Å –æ–±—Ä–∞—Ç–Ω—ã–º –∫—É—Ä—Å–æ–º)
            if (!currencyMap.has(toCurrency)) {
                const reverseSell = 1 / rate.buyRate;
                const reverseBuy = 1 / rate.sellRate;
                currencyMap.set(toCurrency, {
                    currency: toCurrency,
                    price: reverseSell,
                    sell: reverseSell,
                    buy: reverseBuy,
                    source: 'GOOGLE_SHEETS',
                    type: toCurrency === 'USD' || toCurrency === 'EUR' || toCurrency === 'RUB' || toCurrency === 'ARS' || toCurrency === 'BRL' ? 'fiat' : 'crypto',
                    lastUpdate: new Date().toISOString(),
                    pair: `${toCurrency}/${fromCurrency}`
                });
                console.log(`üî• –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª—é—Ç—É ${toCurrency} (–æ–±—Ä–∞—Ç–Ω—ã–π): sell=${reverseSell}, buy=${reverseBuy}`);
            }
        }
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Map –≤ –º–∞—Å—Å–∏–≤
        rates = Array.from(currencyMap.values());

        console.log(`üî• –í–û–ó–í–†–ê–©–ê–ï–ú ${rates.length} –ö–£–†–°–û–í –ò–ó GOOGLE SHEETS!`);
        rates.forEach(rate => {
            console.log(`   ${rate.currency}: sell=${rate.sell}, source=${rate.source}`);
        });
        
        return rates;
    }

    async syncWithGoogleSheets() {
        console.log('üî• syncWithGoogleSheets() - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –≤—Å–µ–≥–¥–∞ —á–∏—Ç–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é');
        return true;
    }

    getLastUpdateTime() {
        return new Date().toISOString();
    }

    // üî• –ü–†–û–°–¢–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø GOOGLE SHEETS –ò–ó –§–ê–ô–õ–ê
    async initGoogleSheetsFromFile() {
        console.log('üî• –ü–†–û–°–¢–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø GoogleSheetsManager...');
        
        try {
            const fs = require('fs');
            const path = require('path');
            const configPath = path.join(__dirname, '..', '..', 'config', 'google-sheets.json');
            
            console.log('üîç –ò—â–µ–º —Ñ–∞–π–ª:', configPath);
            console.log('üîç –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç?', fs.existsSync(configPath));
            
            if (fs.existsSync(configPath)) {
                console.log('üìÑ –ß–∏—Ç–∞–µ–º config/google-sheets.json...');
                const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
                console.log('üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞, spreadsheet_id:', config.spreadsheet_id ? '–µ—Å—Ç—å' : '–Ω–µ—Ç');
                
                if (config.enabled && config.spreadsheet_id && config.credentials) {
                    const GoogleSheetsManager = require('./GoogleSheetsManager');
                    const manager = new GoogleSheetsManager();
                    
                    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º GoogleSheetsManager...');
                    const success = await manager.init(config.credentials, config.spreadsheet_id);
                    
                    if (success) {
                        console.log('üìã –°–æ–∑–¥–∞–µ–º worksheets...');
                        await manager.createWorksheets();
                        global.googleSheetsManager = manager;
                        console.log('‚úÖ –ü–†–û–°–¢–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!');
                    } else {
                        console.log('‚ùå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ false');
                    }
                } else {
                    console.log('‚ùå –ù–µ–ø–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤ —Ñ–∞–π–ª–µ');
                }
            } else {
                console.log('‚ùå –§–∞–π–ª config/google-sheets.json –Ω–µ –Ω–∞–π–¥–µ–Ω');
                console.log('üîÑ –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway...');
                
                // FALLBACK: –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
                const envSpreadsheetId = process.env.GOOGLE_SHEETS_ID;
                const envCredentials = process.env.GOOGLE_SHEETS_CREDENTIALS;
                const envEnabled = process.env.GOOGLE_SHEETS_ENABLED !== 'false';
                
                console.log('üîç Railway –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ - ID:', envSpreadsheetId ? '–µ—Å—Ç—å' : '–Ω–µ—Ç', ', CREDENTIALS:', envCredentials ? '–µ—Å—Ç—å' : '–Ω–µ—Ç');
                
                if (envSpreadsheetId && envCredentials && envEnabled) {
                    try {
                        // –û—á–∏—â–∞–µ–º credentials –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                        let cleanCredentials = envCredentials.trim();
                        if (cleanCredentials.startsWith('=')) {
                            cleanCredentials = cleanCredentials.substring(1);
                            console.log('üîß –£–±—Ä–∞–ª –ª–∏—à–Ω–∏–π = –∏–∑ Railway –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π');
                        }
                        
                        console.log('üîß –ü–∞—Ä—Å–∏–º Railway JSON...');
                        const credentials = JSON.parse(cleanCredentials);
                        console.log('‚úÖ Railway JSON —Å–ø–∞—Ä—à–µ–Ω!');
                        
                        const GoogleSheetsManager = require('./GoogleSheetsManager');
                        const manager = new GoogleSheetsManager();
                        
                        console.log('üîß Railway –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GoogleSheetsManager...');
                        const success = await manager.init(credentials, envSpreadsheetId);
                        
                        if (success) {
                            console.log('üìã Railway —Å–æ–∑–¥–∞–Ω–∏–µ worksheets...');
                            await manager.createWorksheets();
                            global.googleSheetsManager = manager;
                            console.log('‚úÖ RAILWAY –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!');
                        } else {
                            console.log('‚ùå Railway –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ false');
                        }
                    } catch (railwayError) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ Railway –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', railwayError.message);
                    }
                } else {
                    console.log('‚ùå Railway –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–Ω—ã–µ');
                }
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error.message);
        }
    }
}

module.exports = RatesService;
