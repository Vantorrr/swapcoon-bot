const axios = require('axios');

class RatesService {
    constructor() {
        this.cache = new Map();
        this.cacheExpiry = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç
        this.lastUpdate = null;
        
        // ‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –ü–†–ò–ë–´–õ–¨–ù–û–°–¢–ò (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
        this.commission = parseFloat(process.env.EXCHANGE_COMMISSION) || 0.01; // 1% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        this.cryptoSpreads = {
            high: parseFloat(process.env.CRYPTO_SPREAD_HIGH) || 0.005,    // 0.5% –¥–ª—è BTC
            medium: parseFloat(process.env.CRYPTO_SPREAD_MEDIUM) || 0.008, // 0.8% –¥–ª—è ETH  
            stable: parseFloat(process.env.CRYPTO_SPREAD_STABLE) || 0.01,  // 1% –¥–ª—è —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–æ–≤
            low: parseFloat(process.env.CRYPTO_SPREAD_LOW) || 0.02        // 2% –¥–ª—è –¥–µ—à–µ–≤—ã—Ö
        };
        this.fiatSpread = parseFloat(process.env.FIAT_SPREAD) || 0.02;      // 2% –¥–ª—è —Ñ–∏–∞—Ç–∞
        
        console.log('üí∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏:');
        console.log(`   –ö–æ–º–∏—Å—Å–∏—è: ${(this.commission * 100).toFixed(1)}%`);
        console.log(`   –°–ø—Ä–µ–¥—ã –∫—Ä–∏–ø—Ç–æ: ${(this.cryptoSpreads.high * 100).toFixed(1)}%-${(this.cryptoSpreads.low * 100).toFixed(1)}%`);
        console.log(`   –°–ø—Ä–µ–¥ —Ñ–∏–∞—Ç: ${(this.fiatSpread * 100).toFixed(1)}%`);

        // –ú–∞–ø–ø–∏–Ω–≥ –≤–∞–ª—é—Ç
        this.currencyMapping = {
            'BTC': 'bitcoin',
            'ETH': 'ethereum', 
            'USDT': 'tether',
            'USDC': 'usd-coin'
        };
        
        // –§–∏–∞—Ç–Ω—ã–µ –≤–∞–ª—é—Ç—ã
        this.fiatRates = {
            'USD': 1.0,
            'EUR': 0.92,
            'RUB': 95.0,
            'UAH': 37.0,
            'KZT': 450.0,
            'ARS': 1000.0, // –ê—Ä–≥–µ–Ω—Ç–∏–Ω—Å–∫–∏–π –ø–µ—Å–æ
            'BRL': 5.1     // –ë—Ä–∞–∑–∏–ª—å—Å–∫–∏–π —Ä–µ–∞–ª
        };
        
        // üîß –†–£–ß–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–£–†–°–ê–ú–ò
        this.emergencySpread = 0;        // –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Å–ø—Ä–µ–¥ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        this.ratesMultiplier = 1.0;      // –û–±—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –∫—É—Ä—Å–æ–≤
        this.manualRates = new Map();    // –†—É—á–Ω—ã–µ –∫—É—Ä—Å—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç
        this.autoUpdatePaused = false;   // –ü–∞—É–∑–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        this.pauseUntil = null;         // –î–æ –∫–∞–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–∞—É–∑–∞
        
        // üìä –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° GOOGLE SHEETS
        this.googleSheetsRates = new Map(); // –ö—É—Ä—Å—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        this.lastSheetsSync = 0;            // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        this.sheetsSyncInterval = 180000;   // 3 –º–∏–Ω—É—Ç—ã (—É–º–µ–Ω—å—à–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ Google API)
        
        this.initAutoUpdate();
        this.initSheetsSync();
    }

    async getRates() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            const cached = this.cache.get('rates');
            const cacheAge = cached ? Date.now() - cached.timestamp : '–Ω–µ—Ç –∫—ç—à–∞';
            console.log(`üîç –ü–†–û–í–ï–†–ö–ê –ö–≠–®–ê: –≤–æ–∑—Ä–∞—Å—Ç ${cacheAge}ms, –ª–∏–º–∏—Ç ${this.cacheExpiry}ms`);
            
            if (cached && Date.now() - cached.timestamp < this.cacheExpiry) {
                console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—É—Ä—Å—ã –∏–∑ –∫—ç—à–∞ + –ü–†–ò–ú–ï–ù–Ø–ï–ú Google Sheets –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
                console.log(`üîç Google Sheets –≤ –ø–∞–º—è—Ç–∏: ${this.googleSheetsRates.size} –∫—É—Ä—Å–æ–≤`);
                
                // –ü–†–ò–ú–ï–ù–Ø–ï–ú Google Sheets –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞–∂–µ –∫ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫—É—Ä—Å–∞–º!
                const adjustedCachedRates = this.applyManualSettings(cached.data);
                return adjustedCachedRates;
            }
            
            console.log('üìä –ö—ç—à –∏—Å—Ç–µ–∫ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - –ø–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –∫—É—Ä—Å—ã');

            // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –∫—É—Ä—Å—ã
            const rates = await this.fetchFreshRates();
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä—É—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            console.log(`üîç –ü–ï–†–ï–î –ü–†–ò–ú–ï–ù–ï–ù–ò–ï–ú –ù–ê–°–¢–†–û–ï–ö: ${rates.length} –∫—É—Ä—Å–æ–≤`);
            console.log(`üîç Google Sheets –≤ –ø–∞–º—è—Ç–∏: ${this.googleSheetsRates.size} –∫—É—Ä—Å–æ–≤`);
            if (this.googleSheetsRates.size > 0) {
                console.log('üîç –ö—É—Ä—Å—ã –≤ Google Sheets:');
                for (const [pair, rate] of this.googleSheetsRates.entries()) {
                    console.log(`   ${pair}: –ø—Ä–æ–¥–∞–∂–∞ ${rate.sellRate}, –ø–æ–∫—É–ø–∫–∞ ${rate.buyRate}`);
                }
            }
            const adjustedRates = this.applyManualSettings(rates);
            
            // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º RUB –∫—É—Ä—Å –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
            const rubRate = adjustedRates.find(r => r.currency === 'RUB');
            if (rubRate) {
                console.log(`üîç RUB –ö–£–†–° –ü–û–°–õ–ï –ù–ê–°–¢–†–û–ï–ö: sell=${rubRate.sell}, buy=${rubRate.buy}, price=${rubRate.price}, source=${rubRate.source || 'API'}`);
            } else {
                console.log('‚ùå RUB –∫—É—Ä—Å –ù–ï –ù–ê–ô–î–ï–ù –≤ adjustedRates');
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            this.cache.set('rates', {
                data: adjustedRates,
                timestamp: Date.now()
            });
            
            this.lastUpdate = new Date();
            console.log('‚úÖ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', adjustedRates.length, '–≤–∞–ª—é—Ç');
            return adjustedRates;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤:', error.message);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            const cached = this.cache.get('rates');
            if (cached) {
                console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∫—É—Ä—Å—ã –∏–∑ –∫—ç—à–∞');
                return cached.data;
            }
            
            // –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫—É—Ä—Å—ã
            return this.getBasicRates();
        }
    }

    async fetchFreshRates() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
            const cryptoIds = Object.values(this.currencyMapping).join(',');
            const cryptoResponse = await axios.get('https://api.coingecko.com/api/v3/simple/price', {
                params: {
                    ids: cryptoIds,
                    vs_currencies: 'usd',
                    include_24hr_change: 'true',
                    include_last_updated_at: 'true'
                },
                timeout: 10000
            });

            // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–∞—Ç–Ω—ã–µ –∫—É—Ä—Å—ã (EUR, RUB –∏ —Ç.–¥.)
            const fiatResponse = await axios.get('https://api.exchangerate-api.com/v4/latest/USD', {
                timeout: 10000
            });
            
            const rates = [];
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
            for (const [symbol, id] of Object.entries(this.currencyMapping)) {
                const coinData = cryptoResponse.data[id];
                if (coinData) {
                    const price = coinData.usd;
                    const spread = this.calculateSpread(price);
                    
                    rates.push({
                        currency: symbol,
                        buy: price - spread,
                        sell: price + spread,
                        price: price,
                        change24h: coinData.usd_24h_change || 0,
                        lastUpdate: new Date(coinData.last_updated_at * 1000).toISOString(),
                        type: 'crypto'
                    });
                }
            }
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∏–∞—Ç–Ω—ã–µ –≤–∞–ª—é—Ç—ã
            const fiatData = fiatResponse.data.rates;
            for (const [currency, defaultRate] of Object.entries(this.fiatRates)) {
                let rate = defaultRate;
                
                if (currency === 'USD') {
                    rate = 1.0;
                } else if (fiatData[currency]) {
                    rate = 1 / fiatData[currency]; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ USD
                }
                
                const spread = currency === 'USD' ? 0 : this.fiatSpread; // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π —Å–ø—Ä–µ–¥ –¥–ª—è —Ñ–∏–∞—Ç–∞
                
                rates.push({
                    currency: currency,
                    buy: rate - spread,
                    sell: rate + spread,
                    price: rate,
                    change24h: 0, // –î–ª—è —Ñ–∏–∞—Ç–∞ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    lastUpdate: new Date().toISOString(),
                    type: 'fiat'
                });
            }
            
            return rates;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç API:', error.message);
            throw error;
        }
    }
    
    calculateSpread(price) {
        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å–ø—Ä–µ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–Ω—ã (–ù–ê–°–¢–†–ê–ò–í–ê–ï–ú–´–ô)
        if (price >= 50000) return price * this.cryptoSpreads.high;    // BTC –∏ –¥–æ—Ä–æ–≥–∏–µ
        if (price >= 1000) return price * this.cryptoSpreads.medium;   // ETH –∏ —Å—Ä–µ–¥–Ω–∏–µ
        if (price >= 1) return price * this.cryptoSpreads.stable;      // –°—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã
        return price * this.cryptoSpreads.low; // –î–µ—à–µ–≤—ã–µ –º–æ–Ω–µ—Ç—ã
    }
    
    getBasicRates() {
        // –ë–∞–∑–æ–≤—ã–µ –∫—É—Ä—Å—ã –Ω–∞ —Å–ª—É—á–∞–π –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–∫–∞–∑–∞ API
        return [
            { currency: 'BTC', buy: 94500, sell: 95500, price: 95000, change24h: 2.4, lastUpdate: new Date().toISOString(), type: 'crypto' },
            { currency: 'ETH', buy: 3480, sell: 3520, price: 3500, change24h: 1.8, lastUpdate: new Date().toISOString(), type: 'crypto' },
            { currency: 'USDT', buy: 0.995, sell: 1.005, price: 1.0, change24h: 0.1, lastUpdate: new Date().toISOString(), type: 'crypto' },
            { currency: 'USDC', buy: 0.995, sell: 1.005, price: 1.0, change24h: 0.0, lastUpdate: new Date().toISOString(), type: 'crypto' },
            { currency: 'USD', buy: 1.0, sell: 1.0, price: 1.0, change24h: 0, lastUpdate: new Date().toISOString(), type: 'fiat' },
            { currency: 'EUR', buy: 0.90, sell: 0.94, price: 0.92, change24h: 0, lastUpdate: new Date().toISOString(), type: 'fiat' },
            { currency: 'RUB', buy: 0.0103, sell: 0.0109, price: 0.0106, change24h: 0, lastUpdate: new Date().toISOString(), type: 'fiat' },
            { currency: 'ARS', buy: 0.00098, sell: 0.00102, price: 0.001, change24h: 0, lastUpdate: new Date().toISOString(), type: 'fiat' },
            { currency: 'BRL', buy: 0.194, sell: 0.206, price: 0.20, change24h: 0, lastUpdate: new Date().toISOString(), type: 'fiat' }
        ];
    }

    initAutoUpdate() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å—ã –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        this.updateInterval = setInterval(async () => {
            try {
                console.log('üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤...');
                await this.getRates();
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤:', error.message);
            }
        }, 5 * 60 * 1000);
        
        console.log('‚úÖ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –∑–∞–ø—É—â–µ–Ω–æ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)');
    }

    stopAutoUpdate() {
        if (this.updateInterval) {
            clearInterval(this.updateInterval);
            this.updateInterval = null;
            console.log('üõë –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        }
    }

    getLastUpdateTime() {
        return this.lastUpdate;
    }

    // –ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
    async getExchangeRate(fromCurrency, toCurrency, amount = 1) {
        console.log(`üîç –ó–ê–ü–†–û–° –ö–£–†–°–ê: ${fromCurrency} ‚Üí ${toCurrency}, —Å—É–º–º–∞: ${amount}`);
        console.log(`üîç Google Sheets –∫—É—Ä—Å–æ–≤ –≤ –ø–∞–º—è—Ç–∏: ${this.googleSheetsRates.size}`);
        
        if (this.googleSheetsRates.size > 0) {
            console.log('üîç –°–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤ –≤ Google Sheets:');
            for (const [pair, rate] of this.googleSheetsRates.entries()) {
                console.log(`   ${pair}: –ø—Ä–æ–¥–∞–∂–∞ ${rate.sellRate}, –ø–æ–∫—É–ø–∫–∞ ${rate.buyRate}`);
            }
        }
        
        // üìä –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä—É—á–Ω—ã–µ –∫—É—Ä—Å—ã –∏–∑ Google Sheets
        const sheetRate = this.getSheetRateForPair(fromCurrency, toCurrency);
        console.log(`üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –≤ Google Sheets –¥–ª—è ${fromCurrency}/${toCurrency}:`, sheetRate ? '–ù–ê–ô–î–ï–ù' : '–ù–ï –ù–ê–ô–î–ï–ù');
        if (sheetRate) {
            console.log(`üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—á–Ω–æ–π –∫—É—Ä—Å –∏–∑ Google Sheets –¥–ª—è ${fromCurrency}/${toCurrency}: –ø—Ä–æ–¥–∞–∂–∞ ${sheetRate.sellRate}, –ø–æ–∫—É–ø–∫–∞ ${sheetRate.buyRate}`);
            
            const exchangeRate = sheetRate.sellRate;
            const resultAmount = amount * exchangeRate;
            const fee = resultAmount * this.commission;
            
            return {
                fromCurrency,
                toCurrency,
                amount,
                exchangeRate,
                resultAmount: resultAmount - fee,
                fee,
                fromRate: sheetRate.sellRate,
                toRate: sheetRate.buyRate,
                timestamp: Date.now(),
                source: 'GOOGLE_SHEETS'
            };
        }
        
        // üì° –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ò—Å–ø–æ–ª—å–∑—É–µ–º API –∫—É—Ä—Å—ã
        const rates = await this.getRates();
        
        const fromRate = rates.find(r => r.currency === fromCurrency);
        const toRate = rates.find(r => r.currency === toCurrency);
        
        if (!fromRate || !toRate) {
            throw new Error(`–í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ ${fromCurrency}/${toCurrency} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`);
        }
        
        // –†–∞—Å—á–µ—Ç —á–µ—Ä–µ–∑ USD
        const fromUSD = fromCurrency === 'USD' ? 1 : fromRate.sell;
        const toUSD = toCurrency === 'USD' ? 1 : toRate.buy;
        
        const exchangeRate = fromUSD / toUSD;
        const resultAmount = amount * exchangeRate;
        const fee = resultAmount * this.commission; // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–∞—è –∫–æ–º–∏—Å—Å–∏—è
        
        return {
            fromCurrency,
            toCurrency,
            amount,
            exchangeRate,
            resultAmount: resultAmount - fee,
            fee,
            fromRate: fromRate.sell,
            toRate: toRate.buy,
            timestamp: Date.now(),
            source: 'API'
        };
    }

    // üîß –ú–ï–¢–û–î–´ –†–£–ß–ù–û–ì–û –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–£–†–°–ê–ú–ò

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞
    setEmergencySpread(emergencyPercent) {
        this.emergencySpread = emergencyPercent || 0;
        console.log(`üö® –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Å–ø—Ä–µ–¥: +${emergencyPercent}%`);
        this.cache.clear(); // –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
    }
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–Ω–æ–∂–∏—Ç–µ–ª—è –∫—É—Ä—Å–æ–≤
    setRatesMultiplier(multiplier) {
        this.ratesMultiplier = multiplier || 1.0;
        console.log(`‚ö° –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –º–Ω–æ–∂–∏—Ç–µ–ª—å –∫—É—Ä—Å–æ–≤: ${multiplier}x`);
        this.cache.clear();
    }
    
    // –†—É—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—É—Ä—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–ª—é—Ç—ã (–º–Ω–æ–∂–∏—Ç–µ–ª—å)
    setManualRate(currency, multiplier, duration = 3600000) { // 1 —á–∞—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if (!this.manualRates) this.manualRates = new Map();
        
        this.manualRates.set(currency, {
            multiplier: multiplier,
            setAt: Date.now(),
            duration: duration,
            type: 'multiplier'
        });
        
        console.log(`üí± –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä—É—á–Ω–æ–π –∫—É—Ä—Å ${currency}: ${multiplier}x –Ω–∞ ${duration/60000} –º–∏–Ω—É—Ç`);
        this.cache.clear();
    }
    
    // –†—É—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã
    async setAbsoluteRate(currency, absolutePrice, duration = 3600000) { // 1 —á–∞—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if (!this.manualRates) this.manualRates = new Map();
        
        // –ü–æ–ª—É—á–∞–µ–º –ß–ò–°–¢–´–ï –∫—É—Ä—Å—ã –±–µ–∑ —Ä—É—á–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –º–Ω–æ–∂–∏—Ç–µ–ª—è
        const freshRates = await this.fetchFreshRates();
        const currentRate = freshRates.find(r => r.currency === currency);
        
        if (!currentRate) {
            throw new Error(`–í–∞–ª—é—Ç–∞ ${currency} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        }
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω—É–∂–Ω–æ–π —Ü–µ–Ω—ã
        const multiplier = absolutePrice / currentRate.price;
        
        this.manualRates.set(currency, {
            absolutePrice: absolutePrice,
            multiplier: multiplier,
            setAt: Date.now(),
            duration: duration,
            type: 'absolute'
        });
        
        console.log(`‚úèÔ∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –∫—É—Ä—Å ${currency}: $${absolutePrice} (–º–Ω–æ–∂–∏—Ç–µ–ª—å: ${multiplier.toFixed(4)}x) –Ω–∞ ${duration/60000} –º–∏–Ω—É—Ç`);
        this.cache.clear();
    }
    
    // –ü–∞—É–∑–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    pauseAutoUpdate(duration = 3600000) { // 1 —á–∞—Å
        this.autoUpdatePaused = true;
        this.pauseUntil = Date.now() + duration;
        console.log(`‚è∏Ô∏è –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ ${duration/60000} –º–∏–Ω—É—Ç`);
    }
    
    // –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    resumeAutoUpdate() {
        this.autoUpdatePaused = false;
        this.pauseUntil = null;
        console.log(`‚ñ∂Ô∏è –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ`);
    }
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    async forceUpdate() {
        console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤...');
        this.cache.clear();
        this.autoUpdatePaused = false;
        this.pauseUntil = null;
        this.emergencySpread = 0;
        this.ratesMultiplier = 1.0;
        this.manualRates.clear();
        
        try {
            const rates = await this.fetchFreshRates();
            this.cache.set('rates', {
                data: rates,
                timestamp: Date.now()
            });
            console.log('‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
            return rates;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
            throw error;
        }
    }

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä—É—á–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –∫—É—Ä—Å–∞–º
    applyManualSettings(rates) {
        if (!rates || !Array.isArray(rates)) return rates;
        
        console.log(`üîç –ü–†–ò–ú–ï–ù–Ø–ï–ú –ù–ê–°–¢–†–û–ô–ö–ò –ö ${rates.length} –ö–£–†–°–ê–ú`);
        console.log(`üîç Google Sheets –∫—É—Ä—Å–æ–≤ –≤ –ø–∞–º—è—Ç–∏: ${this.googleSheetsRates.size}`);
        
        return rates.map(rate => {
            let adjustedRate = { ...rate };
            
            console.log(`üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞–ª—é—Ç—É: ${rate.currency}`);
            
            // üìä –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ö—É—Ä—Å—ã –∏–∑ Google Sheets (—Å–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π)
            const sheetRate = this.getSheetRateForPair(rate.currency, 'USD');
            if (sheetRate) {
                console.log(`üîç –î–û –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø ${rate.currency}: sell=${adjustedRate.sell}, buy=${adjustedRate.buy}, price=${adjustedRate.price}`);
                
                adjustedRate.sell = sheetRate.sellRate;
                adjustedRate.buy = sheetRate.buyRate;
                adjustedRate.price = (sheetRate.sellRate + sheetRate.buyRate) / 2;
                adjustedRate.source = 'GOOGLE_SHEETS';
                
                console.log(`üìä –ü—Ä–∏–º–µ–Ω–µ–Ω –∫—É—Ä—Å –∏–∑ Google Sheets –¥–ª—è ${rate.currency}: –ø—Ä–æ–¥–∞–∂–∞ ${sheetRate.sellRate}, –ø–æ–∫—É–ø–∫–∞ ${sheetRate.buyRate}`);
                console.log(`üîç –ü–û–°–õ–ï –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø ${rate.currency}: sell=${adjustedRate.sell}, buy=${adjustedRate.buy}, price=${adjustedRate.price}, source=${adjustedRate.source}`);
                
                return adjustedRate; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–∞–∑—É, Google Sheets –∏–º–µ–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            }
            
            // üîß –ü–†–ò–û–†–ò–¢–ï–¢ 2: –†—É—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ –±–æ—Ç
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
            if (this.ratesMultiplier !== 1.0) {
                adjustedRate.price *= this.ratesMultiplier;
                adjustedRate.buy *= this.ratesMultiplier;
                adjustedRate.sell *= this.ratesMultiplier;
            }
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –≤–∞–ª—é—Ç—ã
            if (this.manualRates && this.manualRates.has(rate.currency)) {
                const manual = this.manualRates.get(rate.currency);
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫
                if (Date.now() - manual.setAt < manual.duration) {
                    adjustedRate.price *= manual.multiplier;
                    adjustedRate.buy *= manual.multiplier;
                    adjustedRate.sell *= manual.multiplier;
                } else {
                    this.manualRates.delete(rate.currency); // –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
                }
            }
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Å–ø—Ä–µ–¥
            if (this.emergencySpread > 0) {
                const emergencyMultiplier = 1 + (this.emergencySpread / 100);
                const currentSpread = adjustedRate.sell - adjustedRate.buy;
                const newSpread = currentSpread * emergencyMultiplier;
                const center = (adjustedRate.sell + adjustedRate.buy) / 2;
                
                adjustedRate.buy = center - newSpread / 2;
                adjustedRate.sell = center + newSpread / 2;
            }
            
            return adjustedRate;
        });
    }
    
    // –†—É—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã
    async setAbsoluteRate(currency, absolutePrice, duration = 3600000) { // 1 —á–∞—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if (!this.manualRates) this.manualRates = new Map();
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –ë–ï–ó —Ä—É—á–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —á–∏—Å—Ç–æ–≥–æ –º–Ω–æ–∂–∏—Ç–µ–ª—è
        const freshRates = await this.fetchFreshRates();
        const currentRate = freshRates.find(r => r.currency === currency);
        
        if (!currentRate) {
            throw new Error(`–í–∞–ª—é—Ç–∞ ${currency} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        }
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω—É–∂–Ω–æ–π —Ü–µ–Ω—ã
        const multiplier = absolutePrice / currentRate.price;
        
        this.manualRates.set(currency, {
            absolutePrice: absolutePrice,
            multiplier: multiplier,
            setAt: Date.now(),
            duration: duration,
            type: 'absolute'
        });
        
        console.log(`‚úèÔ∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –∫—É—Ä—Å ${currency}: $${absolutePrice} (–º–Ω–æ–∂–∏—Ç–µ–ª—å: ${multiplier.toFixed(4)}x) –Ω–∞ ${duration/60000} –º–∏–Ω—É—Ç`);
        this.cache.clear();
    }

    // üìä –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° GOOGLE SHEETS

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google Sheets
    initSheetsSync() {
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫—É—Ä—Å—ã –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        setInterval(async () => {
            await this.syncWithGoogleSheets();
        }, this.sheetsSyncInterval);
        
        // –ü–µ—Ä–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
        setTimeout(async () => {
            await this.syncWithGoogleSheets();
        }, 5000);
        
        console.log('üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫)');
    }

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫—É—Ä—Å–æ–≤ —Å Google Sheets
    async syncWithGoogleSheets() {
        try {
            console.log('üìä –ü–û–ü–´–¢–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò —Å Google Sheets...');
            console.log('   global.googleSheetsManager:', !!global.googleSheetsManager);
            
            if (global.googleSheetsManager) {
                console.log('   googleSheetsManager.isReady():', global.googleSheetsManager.isReady());
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ Google Sheets Manager
            if (!global.googleSheetsManager || !global.googleSheetsManager.isReady()) {
                console.log('‚ùå Google Sheets –Ω–µ –≥–æ—Ç–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º...');
                return; // –¢–∏—Ö–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
            }
            
            console.log('‚úÖ Google Sheets –≥–æ—Ç–æ–≤! –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...');

            // –ß–∏—Ç–∞–µ–º —Ä—É—á–Ω—ã–µ –∫—É—Ä—Å—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
            const manualRates = await global.googleSheetsManager.readManualRatesFromTable();
            
            console.log(`üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ß–¢–ï–ù–ò–Ø: –ø–æ–ª—É—á–µ–Ω–æ ${manualRates ? manualRates.length : 0} –∫—É—Ä—Å–æ–≤`);
            if (manualRates && manualRates.length > 0) {
                console.log('üìä –ü–û–õ–£–ß–ï–ù–ù–´–ï –ö–£–†–°–´:');
                manualRates.forEach(rate => {
                    console.log(`   –ü–∞—Ä–∞: "${rate.pair}", –ø—Ä–æ–¥–∞–∂–∞: ${rate.sellRate}, –ø–æ–∫—É–ø–∫–∞: ${rate.buyRate}`);
                });
            }
            
            if (manualRates && manualRates.length > 0) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å—ã –∏–∑ Google Sheets
                console.log('üîÑ –û–ß–ò–©–ê–ï–ú —Å—Ç–∞—Ä—ã–µ –∫—É—Ä—Å—ã...');
                this.googleSheetsRates.clear();
                
                console.log('üíæ –°–û–•–†–ê–ù–Ø–ï–ú –Ω–æ–≤—ã–µ –∫—É—Ä—Å—ã:');
                for (const rate of manualRates) {
                    console.log(`   –°–æ—Ö—Ä–∞–Ω—è–µ–º: "${rate.pair}" -> –ø—Ä–æ–¥–∞–∂–∞: ${rate.sellRate}, –ø–æ–∫—É–ø–∫–∞: ${rate.buyRate}`);
                    this.googleSheetsRates.set(rate.pair, {
                        sellRate: rate.sellRate,
                        buyRate: rate.buyRate,
                        lastUpdated: rate.lastUpdated,
                        comment: rate.comment
                    });
                }
                
                console.log(`‚úÖ –°–û–•–†–ê–ù–ï–ù–û ${this.googleSheetsRates.size} –∫—É—Ä—Å–æ–≤ –≤ –ø–∞–º—è—Ç–∏`);
                console.log('üìã –°–ü–ò–°–û–ö –ö–õ–Æ–ß–ï–ô:', Array.from(this.googleSheetsRates.keys()));
                
                // –û—á–∏—â–∞–µ–º –∫—ç—à —á—Ç–æ–±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–æ–≤—ã–µ –∫—É—Ä—Å—ã
                this.cache.clear();
                this.lastSheetsSync = Date.now();
                
                console.log(`üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${manualRates.length} —Ä—É—á–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –∏–∑ Google Sheets`);
            }

            // –¢–∞–∫–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ API –∫—É—Ä—Å—ã –≤ —Ç–∞–±–ª–∏—Ü—É (–µ—Å–ª–∏ –Ω–µ—Ç —Ä—É—á–Ω—ã—Ö)
            const currentRates = await this.fetchFreshRates();
            await global.googleSheetsManager.syncCurrentRatesToTable(currentRates);
            
        } catch (error) {
            if (error.message.includes('429')) {
                console.log('‚è≥ Google API rate limit –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞...');
            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google Sheets:', error.message);
            }
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ —Å —É—á–µ—Ç–æ–º Google Sheets
    getSheetRateForPair(fromCurrency, toCurrency) {
        const pair1 = `${fromCurrency}/${toCurrency}`;
        const pair2 = `${toCurrency}/${fromCurrency}`;
        
        console.log(`üîç –ü–û–ò–°–ö –ö–£–†–°–ê –í GOOGLE SHEETS:`);
        console.log(`   –ò—â–µ–º –ø–∞—Ä—É 1: "${pair1}"`);
        console.log(`   –ò—â–µ–º –ø–∞—Ä—É 2: "${pair2}"`);
        console.log(`   –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—ã:`, Array.from(this.googleSheetsRates.keys()));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º—É—é –ø–∞—Ä—É
        if (this.googleSheetsRates.has(pair1)) {
            const rate = this.googleSheetsRates.get(pair1);
            return {
                sellRate: rate.sellRate,
                buyRate: rate.buyRate,
                source: 'GOOGLE_SHEETS',
                comment: rate.comment
            };
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é –ø–∞—Ä—É
        if (this.googleSheetsRates.has(pair2)) {
            const rate = this.googleSheetsRates.get(pair2);
            return {
                sellRate: 1 / rate.buyRate,  // –û–±—Ä–∞—â–∞–µ–º –∫—É—Ä—Å—ã
                buyRate: 1 / rate.sellRate,
                source: 'GOOGLE_SHEETS',
                comment: rate.comment
            };
        }
        
        return null;
    }
}

module.exports = RatesService; 