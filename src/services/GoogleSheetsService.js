const { GoogleSpreadsheet } = require('google-spreadsheet');
const { JWT } = require('google-auth-library');

class GoogleSheetsService {
    constructor() {
        this.doc = null;
        this.sheet = null;
        this.initSheet();
    }

    async initSheet() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            if (!process.env.GOOGLE_SHEETS_ID) {
                console.log('‚ö†Ô∏è GOOGLE_SHEETS_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
                this.sheet = null;
                return;
            }

            this.doc = new GoogleSpreadsheet(process.env.GOOGLE_SHEETS_ID);
            
            // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Service Account (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            if (process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL && process.env.GOOGLE_PRIVATE_KEY) {
                const serviceAccountAuth = new JWT({
                    email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
                    key: process.env.GOOGLE_PRIVATE_KEY?.replace(/\\n/g, '\n'),
                    scopes: [
                        'https://www.googleapis.com/auth/spreadsheets',
                    ],
                });

                this.doc.useServiceAccountAuth(serviceAccountAuth);
                
                await this.doc.loadInfo();
                this.sheet = this.doc.sheetsByIndex[0]; // –ü–µ—Ä–≤—ã–π –ª–∏—Å—Ç
                
                console.log('‚úÖ Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω:', this.doc.title);
            } else {
                console.log('‚ö†Ô∏è Google Sheets —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
                this.sheet = null;
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets:', error.message);
            console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
            // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            this.sheet = null;
        }
    }

    async getRates() {
        try {
            if (!this.sheet) {
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                return this.getTestRates();
            }

            const rows = await this.sheet.getRows();
            const rates = [];

            for (const row of rows) {
                rates.push({
                    currency: row.currency || row['–í–∞–ª—é—Ç–∞'],
                    buy: parseFloat(row.buy || row['–ü–æ–∫—É–ø–∫–∞']) || 0,
                    sell: parseFloat(row.sell || row['–ü—Ä–æ–¥–∞–∂–∞']) || 0,
                    lastUpdate: row.lastUpdate || row['–û–±–Ω–æ–≤–ª–µ–Ω–æ'] || new Date().toISOString()
                });
            }

            return rates;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –∏–∑ Google Sheets:', error);
            return this.getTestRates();
        }
    }

    getTestRates() {
        // üî• –¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï –û–¢–ö–õ–Æ–ß–ï–ù–´! –¢–û–õ–¨–ö–û GOOGLE SHEETS!
        console.log('üî• getTestRates() –û–¢–ö–õ–Æ–ß–ï–ù - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–õ–¨–ö–û Google Sheets!');
        return []; // üî• –ü–£–°–¢–û–ô –ú–ê–°–°–ò–í!
    }

    async updateRates(newRates) {
        try {
            if (!this.sheet) {
                console.log('Google Sheets –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ');
                return false;
            }

            // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            await this.sheet.clear();

            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            await this.sheet.setHeaderRow(['currency', 'buy', 'sell', 'lastUpdate']);

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫—É—Ä—Å—ã
            const rows = newRates.map(rate => ({
                currency: rate.currency,
                buy: rate.buy,
                sell: rate.sell,
                lastUpdate: new Date().toISOString()
            }));

            await this.sheet.addRows(rows);
            
            console.log('‚úÖ –ö—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ Google Sheets');
            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤ Google Sheets:', error);
            return false;
        }
    }

    async logOrder(orderData) {
        try {
            if (!this.doc) {
                console.log('Google Sheets –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ');
                return false;
            }

            // –ù–∞—Ö–æ–¥–∏–º –ª–∏—Å—Ç –¥–ª—è –ª–æ–≥–æ–≤ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            let logSheet = this.doc.sheetsByTitle['Orders'];
            if (!logSheet) {
                logSheet = await this.doc.addSheet({ title: 'Orders' });
                await logSheet.setHeaderRow([
                    'ID', 'UserID', 'FromCurrency', 'ToCurrency', 
                    'FromAmount', 'ToAmount', 'ExchangeRate', 'Fee',
                    'AMLStatus', 'Status', 'CreatedAt'
                ]);
            }

            await logSheet.addRow({
                ID: orderData.id,
                UserID: orderData.userId,
                FromCurrency: orderData.fromCurrency,
                ToCurrency: orderData.toCurrency,
                FromAmount: orderData.fromAmount,
                ToAmount: orderData.toAmount,
                ExchangeRate: orderData.exchangeRate,
                Fee: orderData.fee,
                AMLStatus: orderData.amlStatus,
                Status: orderData.status,
                CreatedAt: new Date().toISOString()
            });

            console.log('‚úÖ –ó–∞—è–≤–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ Google Sheets');
            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∑–∞—è–≤–∫–∏ –≤ Google Sheets:', error);
            return false;
        }
    }
}

module.exports = GoogleSheetsService; 