require('dotenv').config();
const express = require('express');
const cors = require('cors');
const path = require('path');

// üîç –°–ê–ú–ê–Ø –†–ê–ù–ù–Ø–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê COMBINED-SERVER
console.log('üöÄ COMBINED-SERVER.JS –ó–ê–ü–£–©–ï–ù!');
console.log('üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:', new Date().toISOString());
console.log('üåç NODE_ENV:', process.env.NODE_ENV);
console.log('üîç –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• GOOGLE SHEETS:');
console.log('   GOOGLE_SHEETS_ID:', process.env.GOOGLE_SHEETS_ID ? '–ï–°–¢–¨' : '–ù–ï–¢');
console.log('   GOOGLE_SHEETS_CREDENTIALS:', process.env.GOOGLE_SHEETS_CREDENTIALS ? '–ï–°–¢–¨' : '–ù–ï–¢');
console.log('   GOOGLE_SHEETS_ENABLED:', process.env.GOOGLE_SHEETS_ENABLED);

// ü§ñ –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –ë–û–¢–ê
let bot = null;
let notifyOperators = null;
let notifyWebsiteActivity = null;
let db = null;

// ü§ñ –ê–°–ò–ù–•–†–û–ù–ù–´–ô –ó–ê–ü–£–°–ö TELEGRAM –ë–û–¢–ê –° –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ï–ô –ê–î–ú–ò–ù–û–í
async function initializeBotAndAdmins() {
    console.log('üîç –ù–ê–ß–ê–õ–û –§–£–ù–ö–¶–ò–ò initializeBotAndAdmins()');
    console.log('ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞...');
    try {
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞
        const botModule = require('./bot');
        bot = botModule.bot;
        notifyOperators = botModule.notifyOperators;
        notifyWebsiteActivity = botModule.notifyWebsiteActivity;
        db = botModule.db;
        console.log('‚úÖ Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
        // üîç –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø GOOGLE SHEETS
        console.log('üîç –ù–ê–ß–ò–ù–ê–ï–ú –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Æ GOOGLE SHEETS –í COMBINED-SERVER...');
        try {
            // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é initGoogleSheets –Ω–∞–ø—Ä—è–º—É—é
            const fs = require('fs');
            const path = require('path');
            const GoogleSheetsManager = require('./services/GoogleSheetsManager');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            const envSpreadsheetId = process.env.GOOGLE_SHEETS_ID;
            const envCredentials = process.env.GOOGLE_SHEETS_CREDENTIALS;
            const envEnabled = process.env.GOOGLE_SHEETS_ENABLED !== 'false';
            
            console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –í COMBINED-SERVER:');
            console.log('   GOOGLE_SHEETS_ID:', envSpreadsheetId ? '–ï–°–¢–¨' : '–ù–ï–¢');
            console.log('   GOOGLE_SHEETS_CREDENTIALS:', envCredentials ? '–ï–°–¢–¨' : '–ù–ï–¢');
            console.log('   GOOGLE_SHEETS_ENABLED:', envEnabled);
            
            let config = null;
            
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            if (envSpreadsheetId && envCredentials && envEnabled) {
                console.log('üåç –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Google Sheets');
                const parsedCredentials = JSON.parse(envCredentials);
                config = {
                    credentials: parsedCredentials,
                    spreadsheet_id: envSpreadsheetId,
                    enabled: true
                };
            } else {
                // üî• FALLBACK: –ß–ò–¢–ê–ï–ú –ò–ó –§–ê–ô–õ–ê config/google-sheets.json
                console.log('üìÇ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —á–∏—Ç–∞–µ–º config/google-sheets.json...');
                const configPath = path.join(__dirname, '..', 'config', 'google-sheets.json');
                
                if (fs.existsSync(configPath)) {
                    console.log('üìÑ –§–∞–π–ª config/google-sheets.json –Ω–∞–π–¥–µ–Ω!');
                    config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
                    console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ —Ñ–∞–π–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
                    console.log('üìä Spreadsheet ID:', config.spreadsheet_id);
                    console.log('üìä Enabled:', config.enabled);
                } else {
                    console.log('‚ùå –§–∞–π–ª config/google-sheets.json –Ω–µ –Ω–∞–π–¥–µ–Ω');
                }
            }
            
            console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CONFIG:');
            console.log('   config —Å—É—â–µ—Å—Ç–≤—É–µ—Ç?', !!config);
            if (config) {
                console.log('   config.enabled:', config.enabled);
                console.log('   config.spreadsheet_id:', config.spreadsheet_id ? '–µ—Å—Ç—å' : '–Ω–µ—Ç');
                console.log('   config.credentials:', config.credentials ? '–µ—Å—Ç—å' : '–Ω–µ—Ç');
            }
            
            if (config && config.enabled) {
                console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google Sheets Manager –≤ combined-server...');
                const googleSheetsManager = new GoogleSheetsManager();
                const success = await googleSheetsManager.init(config.credentials, config.spreadsheet_id);
                
                console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç googleSheetsManager.init():', success);
                if (success) {
                    console.log('üîß –°–æ–∑–¥–∞–µ–º worksheets...');
                    await googleSheetsManager.createWorksheets();
                    global.googleSheetsManager = googleSheetsManager;
                    console.log('‚úÖ Google Sheets Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ combined-server!');
                    console.log('üîç global.googleSheetsManager —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', !!global.googleSheetsManager);
                } else {
                    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets API –≤ combined-server');
                }
            } else {
                console.log('‚ùå Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ combined-server');
                console.log('   –ü—Ä–∏—á–∏–Ω–∞: config =', !!config, ', enabled =', config?.enabled);
            }
        } catch (sheetsInitError) {
            console.error('‚ùå –û–®–ò–ë–ö–ê –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets –≤ combined-server:', sheetsInitError.message);
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google Sheets Manager –≥–ª–æ–±–∞–ª—å–Ω–æ
        try {
            console.log('üîç –ü–†–û–í–ï–†–Ø–ï–ú BOTMODULE:');
            console.log('   botModule —Å—É—â–µ—Å—Ç–≤—É–µ—Ç?', !!botModule);
            console.log('   botModule.googleSheetsManager —Å—É—â–µ—Å—Ç–≤—É–µ—Ç?', !!botModule.googleSheetsManager);
            
            if (botModule.googleSheetsManager) {
                global.googleSheetsManager = botModule.googleSheetsManager;
                console.log('üìä Google Sheets Manager –¥–æ—Å—Ç—É–ø–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ –∏–∑ botModule');
                console.log('üîç global.googleSheetsManager —Ç–µ–ø–µ—Ä—å:', !!global.googleSheetsManager);
            } else {
                console.log('‚ö†Ô∏è Google Sheets Manager –ù–ï –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ botModule');
            }
        } catch (error) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets Manager:', error.message);
        }
        
        // üîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê
        console.log('üîç –ò–¢–û–ì–û–í–û–ï –°–û–°–¢–û–Ø–ù–ò–ï global.googleSheetsManager:', !!global.googleSheetsManager);
        
        // üî• –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ï–°–õ–ò –ù–ï –£–î–ê–õ–û–°–¨
        if (!global.googleSheetsManager) {
            console.log('üî• –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø Google Sheets...');
            try {
                const fs = require('fs');
                const path = require('path');
                const configPath = path.join(__dirname, '..', 'config', 'google-sheets.json');
                
                if (fs.existsSync(configPath)) {
                    console.log('üî• –ß–∏—Ç–∞–µ–º config/google-sheets.json –Ω–∞–ø—Ä—è–º—É—é...');
                    const forceConfig = JSON.parse(fs.readFileSync(configPath, 'utf8'));
                    
                    console.log('üî• –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥:');
                    console.log('   enabled:', forceConfig.enabled);
                    console.log('   spreadsheet_id:', forceConfig.spreadsheet_id ? '–µ—Å—Ç—å' : '–Ω–µ—Ç');
                    console.log('   credentials:', forceConfig.credentials ? '–µ—Å—Ç—å' : '–Ω–µ—Ç');
                    
                    if (forceConfig.enabled && forceConfig.spreadsheet_id && forceConfig.credentials) {
                        const GoogleSheetsManager = require('./services/GoogleSheetsManager');
                        const forceManager = new GoogleSheetsManager();
                        const forceSuccess = await forceManager.init(forceConfig.credentials, forceConfig.spreadsheet_id);
                        
                        console.log('üî• –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', forceSuccess);
                        if (forceSuccess) {
                            await forceManager.createWorksheets();
                            global.googleSheetsManager = forceManager;
                            console.log('üî• ‚úÖ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê!');
                        } else {
                            console.log('üî• ‚ùå –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å');
                        }
                    } else {
                        console.log('üî• ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤ —Ñ–∞–π–ª–µ');
                    }
                } else {
                    console.log('üî• ‚ùå –§–∞–π–ª config/google-sheets.json –Ω–µ –Ω–∞–π–¥–µ–Ω');
                }
            } catch (forceError) {
                console.error('üî• ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', forceError.message);
            }
        }
        
        // üëë –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–û–í (–í–°–ï–ì–î–ê –†–ê–ë–û–¢–ê–ï–¢)
        console.log('üëë –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–æ–≤...');
        
        // –°–ü–ò–°–û–ö –í–°–ï–• –ê–î–ú–ò–ù–û–í - –î–û–ë–ê–í–õ–Ø–ï–ú –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û
        const allAdmins = [
            { id: 8141463258, name: '–ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω', username: 'main_admin' },
            { id: 461759951, name: '–ê–¥–º–∏–Ω –ü–∞–≤–µ–ª', username: 'pavel_admin' },
            { id: 280417617, name: '–ê–¥–º–∏–Ω 3', username: null }
        ];
        
        for (const adminData of allAdmins) {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ
                const existing = await db.getStaffById(adminData.id);
                if (existing) {
                    console.log(`   ‚úÖ –ê–¥–º–∏–Ω ${adminData.name} (${adminData.id}) —É–∂–µ –µ—Å—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ`);
                    continue;
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞
                await db.addStaff({
                    telegramId: adminData.id,
                    username: adminData.username,
                    firstName: adminData.name,
                    lastName: null,
                    role: 'admin',
                    addedBy: 8141463258
                });
                console.log(`‚úÖ –î–û–ë–ê–í–õ–ï–ù –∞–¥–º–∏–Ω ${adminData.name} (${adminData.id})`);
                
            } catch (addError) {
                console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ ${adminData.name}:`, addError.message);
                
                // –ö–†–ò–¢–ò–ß–ù–û! –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å - –ø—Ä–æ–±—É–µ–º –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ existing
                try {
                    await db.addStaff({
                        telegramId: adminData.id,
                        username: adminData.username,
                        firstName: adminData.name,
                        lastName: null,
                        role: 'admin',
                        addedBy: 8141463258
                    });
                    console.log(`‚úÖ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –¥–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω ${adminData.name} (${adminData.id})`);
                } catch (forceError) {
                    console.log(`‚ùå –ö–†–ò–¢–ò–ß–ù–û! –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞ ${adminData.name}:`, forceError.message);
                }
            }
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
        try {
            const finalStaffList = await db.getStaffList();
            const finalAdmins = finalStaffList.filter(s => s.role === 'admin');
            console.log(`üëë –ò–¢–û–ì–û –ê–î–ú–ò–ù–û–í –í –°–ò–°–¢–ï–ú–ï: ${finalAdmins.length}`);
            finalAdmins.forEach(admin => {
                console.log(`   - ${admin.first_name} (@${admin.username || 'null'}) - ID: ${admin.telegram_id}`);
            });
        } catch (error) {
            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:', error.message);
        }
        
        // üë®‚Äçüíº –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–û–í
        console.log('üë®‚Äçüíº –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤...');
        try {
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
            const knownOperators = [
                {
                    telegramId: 7692725312,
                    username: 'ExMachinaXSupport',
                    firstName: '–û–ø–µ—Ä–∞—Ç–æ—Ä',
                    lastName: 'ExMachinaX'
                }
            ];
            
            for (const operator of knownOperators) {
                try {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ
                    const existing = await db.getStaffById(operator.telegramId);
                    if (existing) {
                        console.log(`   ‚úÖ –û–ø–µ—Ä–∞—Ç–æ—Ä @${operator.username} (${operator.telegramId}) —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
                        continue;
                    }
                    
                    await db.addStaff({
                        telegramId: operator.telegramId,
                        username: operator.username,
                        firstName: operator.firstName,
                        lastName: operator.lastName,
                        role: 'operator',
                        addedBy: 8141463258
                    });
                    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä @${operator.username} (${operator.telegramId})`);
                } catch (addError) {
                    console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ @${operator.username}:`, addError.message);
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
            const finalStaffList = await db.getStaffList();
            const operators = finalStaffList.filter(s => s.role === 'operator');
            console.log(`üë®‚Äçüíº –ù–∞–π–¥–µ–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤: ${operators.length}`);
            operators.forEach(op => {
                console.log(`   - ${op.first_name} @${op.username || 'null'} (ID: ${op.telegram_id})`);
            });
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤:', error.message);
        }
        
        // üî• –ó–ê–ü–£–°–ö–ê–ï–ú –ë–û–¢ –°–†–ê–ó–£ - –ù–ï –ñ–î–ï–ú!
        console.log('üîÑ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –°–ï–ô–ß–ê–° –ñ–ï...');
        await bot.start();
        console.log('‚úÖ –ö–†–ò–¢–ò–ß–ù–û! –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
        console.log('üéØ –ë–û–¢ –ó–ê–ü–£–©–ï–ù! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ...');
        
        // üì® –£–í–ï–î–û–ú–õ–Ø–ï–ú –ê–î–ú–ò–ù–û–í –û –ó–ê–ü–£–°–ö–ï –° –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–û–ô
        console.log('üì§ üî• –ù–ê–ß–ê–õ–ê–°–¨ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞–º –æ –∑–∞–ø—É—Å–∫–µ...');
        console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:');
        console.log('   - bot —Å—É—â–µ—Å—Ç–≤—É–µ—Ç?', !!bot);
        console.log('   - bot.api —Å—É—â–µ—Å—Ç–≤—É–µ—Ç?', !!bot.api);
        console.log('   - db —Å—É—â–µ—Å—Ç–≤—É–µ—Ç?', !!db);
        console.log('   - db.getStaffList —Ñ—É–Ω–∫—Ü–∏—è?', typeof db.getStaffList);
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            console.log('üîç –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –∏–∑ –ë–î...');
            const staffList = await db.getStaffList();
            console.log(`üìä –í—Å–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –≤ –ë–î: ${staffList.length}`);
            
            const admins = staffList.filter(s => s.role === 'admin');
            const operators = staffList.filter(s => s.role === 'operator');
            console.log(`üëë –ù–∞–π–¥–µ–Ω–æ –∞–¥–º–∏–Ω–æ–≤ –≤ –ë–î: ${admins.length}`);
            console.log(`üë®‚Äçüíº –ù–∞–π–¥–µ–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –ë–î: ${operators.length}`);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
            console.log('üìã –°–ü–ò–°–û–ö –ê–î–ú–ò–ù–û–í:');
            admins.forEach((admin, index) => {
                console.log(`   ${index + 1}. ${admin.first_name} (@${admin.username || 'null'}) - ID: ${admin.telegram_id}`);
            });
            
            if (admins.length === 0) {
                console.log('‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–û! –ê–î–ú–ò–ù–´ –ù–ï –ù–ê–ô–î–ï–ù–´ –í –ë–î! –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤–∞—Ä–∏–π–Ω—ã–π —Å–ø–∏—Å–æ–∫');
                const emergencyAdmins = [8141463258, 461759951, 280417617];
                for (const adminId of emergencyAdmins) {
                    admins.push({ telegram_id: adminId, first_name: `–ê–¥–º–∏–Ω ${adminId}` });
                }
                console.log(`üÜò –î–æ–±–∞–≤–ª–µ–Ω–æ –∞–≤–∞—Ä–∏–π–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤: ${admins.length}`);
            }
            
            const startupMessage = `üöÄ <b>ExMachinaX –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!</b>\n\n` +
                `‚úÖ –í–µ–±-—Å–µ—Ä–≤–µ—Ä: –ê–∫—Ç–∏–≤–µ–Ω\n` +
                `‚úÖ Telegram –±–æ—Ç: –†–ê–ë–û–¢–ê–ï–¢\n` +
                `‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–ö–õ–Æ–ß–ï–ù–´\n` +
                `üëë –ê–¥–º–∏–Ω–æ–≤: ${admins.length}\n` +
                `üë®‚Äçüíº –û–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤: ${operators.length}\n` +
                `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`;
            
            console.log('üìù –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É...');
            
            let successCount = 0;
            let errorCount = 0;
            
            for (const admin of admins) {
                try {
                    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É ${admin.telegram_id} (${admin.first_name})...`);
                    
                    const result = await bot.api.sendMessage(admin.telegram_id, startupMessage, { 
                        parse_mode: 'HTML',
                        disable_web_page_preview: true 
                    });
                    
                    console.log(`‚úÖ –£–°–ü–ï–•! –ê–¥–º–∏–Ω ${admin.telegram_id} –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ! Message ID: ${result.message_id}`);
                    successCount++;
                    
                } catch (error) {
                    console.error(`‚ùå –ü–†–û–í–ê–õ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${admin.telegram_id}:`, error.message);
                    console.error(`üî• –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:`, error);
                    errorCount++;
                }
            }
            
            console.log(`üìä –ò–¢–û–ì–ò –û–¢–ü–†–ê–í–ö–ò:`);
            console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}`);
            console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
            console.log(`   üì® –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: ${admins.length}`);
            console.log('üì® üéâ –ó–ê–í–ï–†–®–ï–ù–ê –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–ø—É—Å–∫–µ');
            
        } catch (dbError) {
            console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ë–î:', dbError.message);
            console.error('üî• –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –ë–î:', dbError);
            
            // –ü—Ä–æ–±—É–µ–º –∞–≤–∞—Ä–∏–π–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
            console.log('üÜò –ü—Ä–æ–±—É–µ–º –∞–≤–∞—Ä–∏–π–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É...');
            const emergencyAdmins = [8141463258, 461759951, 280417617];
            for (const adminId of emergencyAdmins) {
                try {
                    await bot.api.sendMessage(adminId, 'üö® ExMachinaX –∑–∞–ø—É—â–µ–Ω (–∞–≤–∞—Ä–∏–π–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ)', { 
                        parse_mode: 'HTML' 
                    });
                    console.log(`‚úÖ –ê–≤–∞—Ä–∏–π–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É ${adminId}`);
                } catch (error) {
                    console.error(`‚ùå –ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è ${adminId}:`, error.message);
                }
            }
        }
        
    } catch (error) {
        console.error('‚ùå –ö–†–ò–¢–ò–ß–ù–û! –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error.message);
        console.error('üî• –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
        console.log('üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç—É –ë–ï–ó —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–ø—É—Å–∫–µ');
    }
}

// üß™ –§–£–ù–ö–¶–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–£–°–¢–û–ô –°–¢–ê–¢–ò–°–¢–ò–ö–ò
async function fixEmptyStats() {
    try {
        console.log('üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
        
        // –ñ–¥–µ–º –ø–æ–∫–∞ db –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
        if (!db) {
            console.log('‚è≥ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ
        const stats = await new Promise((resolve, reject) => {
            db.db.get(`
                SELECT 
                    (SELECT COUNT(*) FROM users) as users,
                    (SELECT COUNT(*) FROM orders) as orders
            `, (err, row) => {
                if (err) reject(err);
                else resolve(row);
            });
        });
        
        console.log('üìä –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', stats.users, ', –ó–∞–∫–∞–∑–æ–≤:', stats.orders);
        
        if (stats.users === 0 && stats.orders === 0) {
            console.log('üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–∞–∑–∞ –ø—É—Å—Ç–∞—è! –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...');
            
            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await new Promise((resolve, reject) => {
                db.db.run(`
                    INSERT OR IGNORE INTO users 
                    (telegram_id, first_name, username, created_at, updated_at)
                    VALUES (?, ?, ?, datetime('now'), datetime('now'))
                `, [888999777, '–¢–µ—Å—Ç –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'test_stats'], function(err) {
                    if (err) reject(err);
                    else {
                        console.log('‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω');
                        resolve();
                    }
                });
            });
            
            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
            const testOrders = [
                [null, 888999777, 'USDT', 'RUB', 100.0, 10000.0, null, null, 100.0, 0, null, 'completed', 'web'],
                [null, 888999777, 'BTC', 'USDT', 0.001, 95.0, null, null, 95000.0, 0, null, 'pending', 'bot'],
                [null, 888999777, 'ETH', 'ARS', 1.0, 3500000.0, null, null, 3500000.0, 0, null, 'processing', 'web'],
                [null, 888999777, 'USDT', 'USD', 50.0, 50.0, null, null, 1.0, 0, null, 'completed', 'bot']
            ];
            
            for (let i = 0; i < testOrders.length; i++) {
                const order = testOrders[i];
                await new Promise((resolve, reject) => {
                    db.db.run(`
                        INSERT OR IGNORE INTO orders 
                        (id, user_id, from_currency, to_currency, from_amount, to_amount, 
                         from_address, to_address, exchange_rate, fee, aml_status, status, source, created_at)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, datetime('now'))
                    `, order, function(err) {
                        if (err) reject(err);
                        else {
                            console.log(`‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ ${i + 1} —Å–æ–∑–¥–∞–Ω (${order[7]}, ${order[8]})`);
                            resolve();
                        }
                    });
                });
            }
            
            console.log('üéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã!');
            console.log('üìä –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –±–æ—Ç–µ –¥–æ–ª–∂–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å:');
            console.log('   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 1');
            console.log('   üìã –ó–∞–∫–∞–∑–æ–≤ –≤—Å–µ–≥–æ: 4');
            console.log('   ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: 2');
            console.log('   ‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏: 1');
            console.log('   üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: 1');
            console.log('üí° –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—É—Å—Ç–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Ä–µ—à–µ–Ω–∞!');
            
        } else {
            console.log('‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ, —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º');
        }
        
    } catch (error) {
        console.error('‚ùå –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–æ—Ç–∞
initializeBotAndAdmins().catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ –∏ –∞–¥–º–∏–Ω–æ–≤:', error.message);
    console.log('üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç—É –±–µ–∑ –±–æ—Ç–∞');
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
setTimeout(() => {
    fixEmptyStats().catch(error => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
    });
}, 5000);

// üåê –ó–ê–ü–£–°–ö –í–ï–ë-–°–ï–†–í–ï–†–ê
let ratesService;
try {
    console.log('üì° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RatesService...');
    const RatesService = require('./services/RatesService');
    ratesService = new RatesService();
    global.ratesService = ratesService; // –î–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ
    console.log('‚úÖ RatesService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ');
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RatesService:', error.message);
    console.log('üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ RatesService - –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–≥–ª—É—à–∫–∏');
    ratesService = null;
}

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, 'webapp')));
app.use('/assets', express.static(path.join(__dirname, '..', 'assets')));

// –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'webapp', 'index.html'));
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
app.get('/api/rates', async (req, res) => {
    console.log('üìà –ó–∞–ø—Ä–æ—Å –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç...');
    
    try {
        // üî• –¢–û–õ–¨–ö–û GLOBAL.RATESSERVICE!!! –ù–ò–ö–ê–ö–ò–• FALLBACK –ù–ê –¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï!
        if (!global.ratesService) {
            console.error('‚ùå GLOBAL.RATESSERVICE –ù–ï –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù!');
            return res.status(500).json({ 
                success: false, 
                error: 'RatesService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω',
                message: 'Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
            });
        }

        console.log('üì° –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ GLOBAL.RatesService —Å Google Sheets...');
        const rates = await global.ratesService.getRates();
        console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${rates.length} –∫—É—Ä—Å–æ–≤ –∏–∑ global.ratesService`);
        
        console.log('üî•üî•üî• –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–£–†–°–û–í –î–õ–Ø API:');
        rates.forEach(rate => {
            console.log(`üìä API: ${rate.currency} = sell:${rate.sell}, buy:${rate.buy}, price:${rate.price}, source:"${rate.source || 'API'}"`);
            if (rate.currency === 'BTC') {
                console.log(`üî• BTC –î–ï–¢–ê–õ–¨–ù–û: sell=${rate.sell}, buy=${rate.buy}, source="${rate.source}"`);
            }
        });
        
        // –ù–ê–ô–î–ï–ú BTC –ö–£–†–° –°–ü–ï–¶–ò–ê–õ–¨–ù–û
        const btcRate = rates.find(r => r.currency === 'BTC');
        if (btcRate) {
            console.log(`üî•üî•üî• BTC –ö–£–†–° –ù–ê–ô–î–ï–ù: sell=${btcRate.sell}, source="${btcRate.source}"`);
            console.log(`üî• –î–û–õ–ñ–ï–ù –õ–ò FRONTEND –ù–ê–ô–¢–ò –ï–ì–û? source.includes('GOOGLE')=${btcRate.source && btcRate.source.includes('GOOGLE')}`);
        } else {
            console.log(`‚ùå‚ùå‚ùå BTC –ö–£–†–° –ù–ï –ù–ê–ô–î–ï–ù –í RATES!`);
        }
        
        res.json({ 
            success: true, 
            data: rates,
            lastUpdate: global.ratesService.getLastUpdateTime(),
            source: '–¢–û–õ–¨–ö–û_GOOGLE_SHEETS'
        });
        console.log('‚úÖ –ö—É—Ä—Å—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã:', rates.length, '–≤–∞–ª—é—Ç');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤:', error.message);
        // üî• –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–ú –¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï! –í–û–ó–í–†–ê–©–ê–ï–ú –û–®–ò–ë–ö–£!
        res.status(500).json({ 
            success: false, 
            error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –∏–∑ Google Sheets',
            message: error.message
        });
    }
});

// API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
app.post('/api/support-ticket', async (req, res) => {
    try {
        console.log('üé´ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:', req.body);
        
        const { userId, source, subject, message, timestamp } = req.body;
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
        const ticketId = `TICKET_${Date.now()}`;
        
        console.log(`üìã –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:
        ID: ${ticketId}
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId}
        –¢–µ–º–∞: ${subject}
        –°–æ–æ–±—â–µ–Ω–∏–µ: ${message}
        –ò—Å—Ç–æ—á–Ω–∏–∫: ${source}
        –í—Ä–µ–º—è: ${timestamp}`);
        
        // üö® –û–¢–ü–†–ê–í–õ–Ø–ï–ú –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –í–°–ï–ú –ê–î–ú–ò–ù–ê–ú - –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê!
        console.log('üîç –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ë–û–¢–ê:');
        console.log('   - bot —Å—É—â–µ—Å—Ç–≤—É–µ—Ç?', !!bot);
        console.log('   - bot.api —Å—É—â–µ—Å—Ç–≤—É–µ—Ç?', !!(bot && bot.api));
        console.log('   - bot.isInited?', !!(bot && bot.isInited));
        console.log('   - typeof bot:', typeof bot);
        console.log('   - bot.constructor.name:', bot?.constructor?.name);
        
        // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –û–¢–ü–†–ê–í–ö–ê –î–ê–ñ–ï –ï–°–õ–ò –ë–û–¢ –ù–ï –ì–û–¢–û–í
        if (!bot) {
            console.log('‚ùå –ö–†–ò–¢–ò–ß–ù–û! –ë–û–¢ –ù–ï –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù!');
            // –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        } else if (!bot.api) {
            console.log('‚ùå –ö–†–ò–¢–ò–ß–ù–û! BOT API –ù–ï–î–û–°–¢–£–ü–ï–ù!');
            // –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        } else {
        }
        
        // üî• –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ü–û–ü–´–¢–ö–ê –û–¢–ü–†–ê–í–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
        try {
            console.log('üì® –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –û–¢–ü–†–ê–í–ö–ê —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞–º...');
            console.log('üéØ –ö–†–ò–¢–ò–ß–ù–û: User ID –∑–∞—è–≤–∫–∏:', userId);
            console.log('üéØ –ö–†–ò–¢–ò–ß–ù–û: –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π ID?', userId === 123456789 ? '–î–ê (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ Railway)' : '–ù–ï–¢ (—Ä–µ–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)');
            const adminIds = [8141463258, 461759951, 280417617]; // ID –∞–¥–º–∏–Ω–æ–≤
            
            for (const adminId of adminIds) {
                const notificationMessage = `üé´ <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ü–û–î–î–ï–†–ñ–ö–ò</b>\n\n` +
                    `üìã <b>ID:</b> <code>${ticketId}</code>\n` +
                    `üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${userId}\n` +
                    `üìÇ <b>–¢–µ–º–∞:</b> ${subject}\n` +
                    `üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> ${message}\n` +
                    `üåê <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> ${source}\n` +
                    `‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date(timestamp).toLocaleString('ru-RU')}`;
                
                try {
                    console.log(`üì§ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É ${adminId}...`);
                    
                    if (!bot || !bot.api) {
                        console.log(`‚ùå –ë–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∞–¥–º–∏–Ω–∞ ${adminId}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                        continue;
                    }
                    
                    const result = await bot.api.sendMessage(adminId, notificationMessage, { 
                        parse_mode: 'HTML',
                        disable_web_page_preview: true,
                        reply_markup: {
                            inline_keyboard: [[
                                { text: 'üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É', url: `tg://user?id=${userId}` },
                                { text: '‚úÖ –ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç', callback_data: `close_ticket_${ticketId}` }
                            ]]
                        }
                    });
                    console.log(`‚úÖ –£–°–ü–ï–®–ù–û –û–¢–ü–†–ê–í–õ–ï–ù–û –∞–¥–º–∏–Ω—É ${adminId}! Message ID: ${result.message_id}`);
                    console.log(`üéØ Telegram –æ—Ç–≤–µ—Ç–∏–ª:`, result);
                } catch (error) {
                    console.error(`‚ùå –ü–†–û–í–ê–õ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É ${adminId}:`, error.message);
                    console.error(`üî• –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:`, error);
                    
                    // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê - –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω?
                    if (error.message.includes('bot was blocked')) {
                        console.error(`üö´ –ê–î–ú–ò–ù ${adminId} –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–õ –ë–û–¢–ê!`);
                    } else if (error.message.includes('chat not found')) {
                        console.error(`üëª –ê–î–ú–ò–ù ${adminId} –ù–ï –ù–ê–ô–î–ï–ù –í TELEGRAM!`);
                    } else {
                        console.error(`üí• –ù–ï–ò–ó–í–ï–°–¢–ù–ê–Ø –û–®–ò–ë–ö–ê –¥–ª—è –∞–¥–º–∏–Ω–∞ ${adminId}`);
                    }
                }
            }
            
            console.log('üì® –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω');
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error.message);
        }
        
        res.json({ 
            success: true, 
            data: {
                ticketId: ticketId,
                status: 'created',
                message: '–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º.'
            }
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:', error.message);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏' });
    }
});

// üö® –ü–†–û–°–¢–ï–ô–®–ò–ô –¢–ï–°–¢ –ñ–ò–í–û–°–¢–ò –°–ï–†–í–ï–†–ê
app.get('/health', (req, res) => {
    res.json({ 
        status: 'OK', 
        time: new Date().toISOString(),
        version: '2024-07-19-FINAL',
        bot: bot ? 'READY' : 'NOT_READY'
    });
});

// üß™ –¢–ï–°–¢–û–í–´–ô ENDPOINT –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
app.get('/test-notification', async (req, res) => {
    try {
        console.log('üß™ –¢–ï–°–¢ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –ó–ê–ü–£–©–ï–ù');
        console.log('üîç BOT_TOKEN –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', process.env.BOT_TOKEN ? '–ï–°–¢–¨' : '–ù–ï–¢');
        console.log('üîç Bot –æ–±—ä–µ–∫—Ç:', bot ? '–ï–°–¢–¨' : '–ù–ï–¢');
        console.log('üîç Bot.api:', bot?.api ? '–ï–°–¢–¨' : '–ù–ï–¢');
        
        if (!bot || !bot.api) {
            return res.json({ success: false, error: '–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' });
        }
        
        const testMessage = `üß™ <b>–¢–ï–°–¢ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô</b>\n\n` +
            `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n` +
            `üåê –ò—Å—Ç–æ—á–Ω–∏–∫: Railway Test\n` +
            `‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!`;
            
        const result = await bot.api.sendMessage(8141463258, testMessage, { 
            parse_mode: 'HTML' 
        });
        
        console.log('‚úÖ –¢–ï–°–¢ –£–°–ü–ï–®–ï–ù! Message ID:', result.message_id);
        res.json({ success: true, messageId: result.message_id });
        
    } catch (error) {
        console.error('‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù:', error.message);
        res.json({ success: false, error: error.message });
    }
});

// API –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/profile/:userId', async (req, res) => {
    try {
        const { userId } = req.params;
        console.log('üë§ –ó–∞–ø—Ä–æ—Å –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
        
        // –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userProfile = {
            id: userId,
            first_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            last_name: '',
            username: `user${userId}`,
            level: 1,
            experience: 0,
            total_volume: 0,
            successful_orders: 0,
            avatar: null,
            created_at: new Date().toISOString()
        };
        
        console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', userProfile);
        res.json({ success: true, data: userProfile });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error.message);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è' });
    }
});

// API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
app.post('/api/create-order', async (req, res) => {
    try {
        console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ (–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º):', req.body);
        console.log('üö® === –ü–ï–†–ï–î –í–´–ó–û–í–û–ú notifyOperators ===');
        
        const {
            userId,
            fromCurrency,
            toCurrency,
            fromAmount,
            toAmount,
            fromAddress,
            toAddress,
            exchangeRate,
            fee,
            amlFromResult,
            amlToResult,
            pairType
        } = req.body;

        // –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ò–ó–í–õ–ï–ß–ï–ù–ù–´–• –î–ê–ù–ù–´–•
        console.log('üîç –ò–ó–í–õ–ï–ß–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï:');
        console.log('  userId:', userId);
        console.log('  fromCurrency:', fromCurrency);
        console.log('  toCurrency:', toCurrency);
        console.log('  fromAmount:', fromAmount);
        console.log('  toAmount:', toAmount);
        console.log('  fromAddress:', fromAddress);
        console.log('  toAddress:', toAddress);
        console.log('  exchangeRate:', exchangeRate);
        console.log('  pairType:', pairType);

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞—è–≤–∫–∏
        const orderId = `EM${Date.now()}${Math.floor(Math.random() * 1000).toString().padStart(3, '0')}`;
        console.log('üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID –∑–∞—è–≤–∫–∏:', orderId);

        // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        let realOrderId = orderId; // fallback –∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É ID
        if (db && db.createOrder) {
            try {
                const order = await db.createOrder({
                    userId: userId,                    // ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: camelCase
                    fromCurrency: fromCurrency,       // ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: camelCase
                    toCurrency: toCurrency,           // ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: camelCase
                    fromAmount: fromAmount,           // ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: camelCase
                    toAmount: toAmount,               // ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: camelCase
                    fromAddress: fromAddress || '',   // ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: camelCase
                    toAddress: toAddress || '',       // ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: camelCase
                    exchangeRate: exchangeRate,       // ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: camelCase
                    fee: fee || 0,
                    amlStatus: JSON.stringify({ from: amlFromResult, to: amlToResult }),  // ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: camelCase
                    status: 'pending',
                    source: 'web'
                });
                console.log('‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ –±–∞–∑–µ:', order.id);
                realOrderId = order.id; // ‚Üê –°–û–•–†–ê–ù–Ø–ï–ú –†–ï–ê–õ–¨–ù–´–ô ID –ò–ó –ë–ê–ó–´!
            } catch (dbError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É:', dbError);
            }
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        let user = null;
        if (db && db.getUser) {
            try {
                user = await db.getUser(userId);
            } catch (userError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userError);
            }
        }
        
        user = user || {
            first_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            username: `user${userId}`
        };

        console.log('üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', {
            realOrderId,
            orderId,
            userName: user.first_name || user.username,
            fromAmount,
            fromCurrency,
            toCurrency
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º
        if (notifyOperators) {
            try {
                await notifyOperators({
                    id: realOrderId,                          // ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –†–ï–ê–õ–¨–ù–´–ô ID –∏–∑ –±–∞–∑—ã!
                    userName: user.first_name || user.username || `User_${userId}`,
                    fromAmount: fromAmount,
                    fromCurrency: fromCurrency,
                    toCurrency: toCurrency,
                    fromAddress: fromAddress || '',
                    toAddress: toAddress || '',
                    pairType: pairType || 'fiat'
                });
                console.log('‚úÖ –í–´–ó–û–í notifyOperators –ó–ê–í–ï–†–®–ï–ù');
            } catch (notifyError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤:', notifyError);
            }
        } else {
            console.error('‚ùå notifyOperators –ù–ï –î–û–°–¢–£–ü–ï–ù!');
        }
        
        res.json({ 
            success: true, 
            data: {
                id: realOrderId,        // ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –†–ï–ê–õ–¨–ù–´–ô ID –∏–∑ –±–∞–∑—ã!
                orderId: orderId,       // ‚Üê –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                status: 'pending',
                message: '–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞'
            }
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:', error);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏' });
    }
});

// üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –§–ê–ô–õ–û–í
app.get('/api/check-files', (req, res) => {
    const fs = require('fs');
    const assetsPath = path.join(__dirname, '..', 'assets', 'images', 'currencies');
    
    try {
        const files = fs.readdirSync(assetsPath);
        const pngFiles = files.filter(f => f.endsWith('.png'));
        
        res.json({
            success: true,
            assetsPath: assetsPath,
            totalFiles: files.length,
            pngFiles: pngFiles,
            first5: pngFiles.slice(0, 5)
        });
    } catch (error) {
        res.json({
            success: false,
            error: error.message,
            assetsPath: assetsPath
        });
    }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üåê –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üì± –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: http://localhost:${PORT}`);
    console.log(`ü§ñ Telegram –±–æ—Ç: –ê–ö–¢–ò–í–ï–ù`);
    console.log(`üì° RatesService —Å—Ç–∞—Ç—É—Å:`, ratesService ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)');
    console.log(`üöÄ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!`);
}).on('error', (err) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err.message);
    if (err.code === 'EADDRINUSE') {
        console.log(`‚ö†Ô∏è –ü–æ—Ä—Ç ${PORT} –∑–∞–Ω—è—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç.`);
    }
    process.exit(1);
}); 