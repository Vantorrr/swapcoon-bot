require('dotenv').config();
const express = require('express');
const cors = require('cors');
const path = require('path');

console.log('üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ (–ë–û–¢ + –í–ï–ë)...');
console.log('üìÇ __dirname:', __dirname);
console.log('üåç NODE_ENV:', process.env.NODE_ENV || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
console.log('üîå PORT:', process.env.PORT || 3000);
console.log('üîë BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω?', process.env.BOT_TOKEN ? '–î–ê' : '–ù–ï–¢');
console.log('üîë BOT_TOKEN –¥–ª–∏–Ω–∞:', process.env.BOT_TOKEN ? process.env.BOT_TOKEN.length : 0);
console.log('üîë BOT_TOKEN –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å:', process.env.BOT_TOKEN ? process.env.BOT_TOKEN.substring(0, 10) + '...' : '–ù–ï–¢');

// ü§ñ –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –ë–û–¢–ê
let bot = null;
let notifyOperators = null;
let notifyWebsiteActivity = null;
let db = null;

// ü§ñ –ê–°–ò–ù–•–†–û–ù–ù–´–ô –ó–ê–ü–£–°–ö TELEGRAM –ë–û–¢–ê –° –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ï–ô –ê–î–ú–ò–ù–û–í
async function initializeBotAndAdmins() {
    console.log('ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞...');
    try {
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞
        const botModule = require('./bot');
        bot = botModule.bot;
        notifyOperators = botModule.notifyOperators;
        notifyWebsiteActivity = botModule.notifyWebsiteActivity;
        db = botModule.db;
        console.log('‚úÖ Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
        // üëë –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ê–î–ú–ò–ù–û–í –ò–ó –ü–ï–†–ï–ú–ï–ù–ù–´–• –°–†–ï–î–´
        console.log('üëë –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã...');
        try {
            await db.initializeMainAdmin();
            console.log('‚úÖ –ê–¥–º–∏–Ω—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–æ–≤ –¥–æ–±–∞–≤–∏–ª–æ—Å—å
            const staffList = await db.getStaffList();
            const admins = staffList.filter(s => s.role === 'admin');
            console.log(`üëë –ù–∞–π–¥–µ–Ω–æ –∞–¥–º–∏–Ω–æ–≤: ${admins.length}`);
            admins.forEach(admin => {
                console.log(`   - ${admin.first_name} (ID: ${admin.telegram_id})`);
            });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–æ–≤:', error.message);
            console.log('üîß –î–æ–±–∞–≤–ª—è—é –∞–¥–º–∏–Ω–æ–≤ –Ω–∞–ø—Ä—è–º—É—é...');
            
            // –ê–í–ê–†–ò–ô–ù–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–û–í –ù–ê–ü–†–Ø–ú–£–Æ
            const emergencyAdmins = [8141463258, 461759951, 280417617];
            for (const adminId of emergencyAdmins) {
                try {
                    await db.addStaff({
                        telegramId: adminId,
                        username: null,
                        firstName: `–ê–¥–º–∏–Ω ${adminId}`,
                        lastName: null,
                        role: 'admin',
                        addedBy: 8141463258
                    });
                    console.log(`‚úÖ –ê–≤–∞—Ä–∏–π–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω ${adminId}`);
                } catch (addError) {
                    console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞ ${adminId}:`, addError.message);
                }
            }
        }
        
        // üî• –ó–ê–ü–£–°–ö–ê–ï–ú –ë–û–¢ –°–†–ê–ó–£ - –ù–ï –ñ–î–ï–ú!
        console.log('üîÑ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –°–ï–ô–ß–ê–° –ñ–ï...');
        await bot.start();
        console.log('‚úÖ –ö–†–ò–¢–ò–ß–ù–û! –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
        console.log('üéØ –ë–û–¢ –ó–ê–ü–£–©–ï–ù! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ...');
        
        // üì® –£–í–ï–î–û–ú–õ–Ø–ï–ú –ê–î–ú–ò–ù–û–í –û –ó–ê–ü–£–°–ö–ï –°–†–ê–ó–£
        console.log('üì§ –ù–ê–ß–ê–õ–ê–°–¨ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞–º –æ –∑–∞–ø—É—Å–∫–µ...');
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º bot.api –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:', !!bot.api);
        
        // –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const staffList = await db.getStaffList();
        const admins = staffList.filter(s => s.role === 'admin');
        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –∞–¥–º–∏–Ω–æ–≤ –≤ –ë–î: ${admins.length}`);
        
        if (admins.length === 0) {
            console.log('‚ö†Ô∏è –ê–î–ú–ò–ù–´ –ù–ï –ù–ê–ô–î–ï–ù–´ –í –ë–î! –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤–∞—Ä–∏–π–Ω—ã–π —Å–ø–∏—Å–æ–∫');
            // –ê–≤–∞—Ä–∏–π–Ω—ã–π —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ –≤ –ë–î –Ω–µ—Ç –∞–¥–º–∏–Ω–æ–≤
            const emergencyAdmins = [8141463258, 461759951, 280417617];
            for (const adminId of emergencyAdmins) {
                admins.push({ telegram_id: adminId, first_name: `–ê–¥–º–∏–Ω ${adminId}` });
            }
        }
        
        const startupMessage = `üöÄ <b>SwapCoon –∑–∞–ø—É—â–µ–Ω —Å –∞–¥–º–∏–Ω–∞–º–∏!</b>\n\n` +
            `‚úÖ –í–µ–±-—Å–µ—Ä–≤–µ—Ä: –ê–∫—Ç–∏–≤–µ–Ω\n` +
            `‚úÖ Telegram –±–æ—Ç: –†–ê–ë–û–¢–ê–ï–¢ –°–ï–ô–ß–ê–°\n` +
            `‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–ö–õ–Æ–ß–ï–ù–´ –ú–ì–ù–û–í–ï–ù–ù–û\n` +
            `üëë –ê–¥–º–∏–Ω–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: ${admins.length}\n` +
            `‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${new Date().toLocaleString('ru-RU')}`;
        
        for (const admin of admins) {
            try {
                const result = await bot.api.sendMessage(admin.telegram_id, startupMessage, { 
                    parse_mode: 'HTML',
                    disable_web_page_preview: true 
                });
                console.log(`‚úÖ –£–°–ü–ï–®–ù–û! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É ${admin.telegram_id}! Message ID: ${result.message_id}`);
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É ${admin.telegram_id}:`, error.message);
            }
        }
        console.log('üì® –ó–ê–í–ï–†–®–ï–ù–ê –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–ø—É—Å–∫–µ');
        
    } catch (error) {
        console.error('‚ùå –ö–†–ò–¢–ò–ß–ù–û! –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error.message);
        console.error('üî• –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
        console.log('üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç—É –ë–ï–ó —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–ø—É—Å–∫–µ');
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–æ—Ç–∞
initializeBotAndAdmins().catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ –∏ –∞–¥–º–∏–Ω–æ–≤:', error.message);
    console.log('üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç—É –±–µ–∑ –±–æ—Ç–∞');
});

// üåê –ó–ê–ü–£–°–ö –í–ï–ë-–°–ï–†–í–ï–†–ê
let ratesService;
try {
    console.log('üì° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RatesService...');
    const RatesService = require('./services/RatesService');
    ratesService = new RatesService();
    console.log('‚úÖ RatesService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RatesService:', error.message);
    console.log('üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ RatesService - –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–≥–ª—É—à–∫–∏');
    ratesService = null;
}

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, 'webapp')));
app.use('/assets', express.static(path.join(__dirname, '..', 'assets')));

// –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'webapp', 'index.html'));
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
app.get('/api/rates', async (req, res) => {
    console.log('üìà –ó–∞–ø—Ä–æ—Å –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç...');
    
    try {
        if (ratesService) {
            console.log('üì° –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã —á–µ—Ä–µ–∑ RatesService...');
            const rates = await ratesService.getRates();
            res.json({ 
                success: true, 
                data: rates,
                lastUpdate: ratesService.getLastUpdateTime(),
                source: 'live_api'
            });
            console.log('‚úÖ –ö—É—Ä—Å—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã:', rates.length, '–≤–∞–ª—é—Ç');
        } else {
            console.log('üîÑ RatesService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫—É—Ä—Å—ã...');
            const testRates = getTestRates();
            res.json({ 
                success: true, 
                data: testRates,
                lastUpdate: new Date().toISOString(),
                source: 'test_data'
            });
            console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –∫—É—Ä—Å—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã:', testRates.length, '–≤–∞–ª—é—Ç');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤:', error.message);
        console.log('üîÑ Fallback –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ –∫—É—Ä—Å—ã...');
        const testRates = getTestRates();
        res.json({ 
            success: true, 
            data: testRates,
            lastUpdate: new Date().toISOString(),
            source: 'fallback_data'
        });
    }
});

// API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
app.post('/api/support-ticket', async (req, res) => {
    try {
        console.log('üé´ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:', req.body);
        
        const { userId, source, subject, message, timestamp } = req.body;
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
        const ticketId = `TICKET_${Date.now()}`;
        
        console.log(`üìã –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:
        ID: ${ticketId}
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId}
        –¢–µ–º–∞: ${subject}
        –°–æ–æ–±—â–µ–Ω–∏–µ: ${message}
        –ò—Å—Ç–æ—á–Ω–∏–∫: ${source}
        –í—Ä–µ–º—è: ${timestamp}`);
        
        // üö® –û–¢–ü–†–ê–í–õ–Ø–ï–ú –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –í–°–ï–ú –ê–î–ú–ò–ù–ê–ú - –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê!
        console.log('üîç –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ë–û–¢–ê:');
        console.log('   - bot —Å—É—â–µ—Å—Ç–≤—É–µ—Ç?', !!bot);
        console.log('   - bot.api —Å—É—â–µ—Å—Ç–≤—É–µ—Ç?', !!(bot && bot.api));
        console.log('   - bot.isInited?', !!(bot && bot.isInited));
        console.log('   - typeof bot:', typeof bot);
        console.log('   - bot.constructor.name:', bot?.constructor?.name);
        
        // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –û–¢–ü–†–ê–í–ö–ê –î–ê–ñ–ï –ï–°–õ–ò –ë–û–¢ –ù–ï –ì–û–¢–û–í
        if (!bot) {
            console.log('‚ùå –ö–†–ò–¢–ò–ß–ù–û! –ë–û–¢ –ù–ï –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù!');
            // –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        } else if (!bot.api) {
            console.log('‚ùå –ö–†–ò–¢–ò–ß–ù–û! BOT API –ù–ï–î–û–°–¢–£–ü–ï–ù!');
            // –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        } else {
        }
        
        // üî• –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ü–û–ü–´–¢–ö–ê –û–¢–ü–†–ê–í–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
        try {
            console.log('üì® –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –û–¢–ü–†–ê–í–ö–ê —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞–º...');
            console.log('üéØ –ö–†–ò–¢–ò–ß–ù–û: User ID –∑–∞—è–≤–∫–∏:', userId);
            console.log('üéØ –ö–†–ò–¢–ò–ß–ù–û: –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π ID?', userId === 123456789 ? '–î–ê (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ Railway)' : '–ù–ï–¢ (—Ä–µ–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)');
            const adminIds = [8141463258, 461759951, 280417617]; // ID –∞–¥–º–∏–Ω–æ–≤
            
            for (const adminId of adminIds) {
                const notificationMessage = `üé´ <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ü–û–î–î–ï–†–ñ–ö–ò</b>\n\n` +
                    `üìã <b>ID:</b> <code>${ticketId}</code>\n` +
                    `üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${userId}\n` +
                    `üìÇ <b>–¢–µ–º–∞:</b> ${subject}\n` +
                    `üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> ${message}\n` +
                    `üåê <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> ${source}\n` +
                    `‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date(timestamp).toLocaleString('ru-RU')}`;
                
                try {
                    console.log(`üì§ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É ${adminId}...`);
                    
                    if (!bot || !bot.api) {
                        console.log(`‚ùå –ë–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∞–¥–º–∏–Ω–∞ ${adminId}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                        continue;
                    }
                    
                    const result = await bot.api.sendMessage(adminId, notificationMessage, { 
                        parse_mode: 'HTML',
                        disable_web_page_preview: true,
                        reply_markup: {
                            inline_keyboard: [[
                                { text: 'üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É', url: `tg://user?id=${userId}` },
                                { text: '‚úÖ –ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç', callback_data: `close_ticket_${ticketId}` }
                            ]]
                        }
                    });
                    console.log(`‚úÖ –£–°–ü–ï–®–ù–û –û–¢–ü–†–ê–í–õ–ï–ù–û –∞–¥–º–∏–Ω—É ${adminId}! Message ID: ${result.message_id}`);
                    console.log(`üéØ Telegram –æ—Ç–≤–µ—Ç–∏–ª:`, result);
                } catch (error) {
                    console.error(`‚ùå –ü–†–û–í–ê–õ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É ${adminId}:`, error.message);
                    console.error(`üî• –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:`, error);
                    
                    // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê - –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω?
                    if (error.message.includes('bot was blocked')) {
                        console.error(`üö´ –ê–î–ú–ò–ù ${adminId} –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–õ –ë–û–¢–ê!`);
                    } else if (error.message.includes('chat not found')) {
                        console.error(`üëª –ê–î–ú–ò–ù ${adminId} –ù–ï –ù–ê–ô–î–ï–ù –í TELEGRAM!`);
                    } else {
                        console.error(`üí• –ù–ï–ò–ó–í–ï–°–¢–ù–ê–Ø –û–®–ò–ë–ö–ê –¥–ª—è –∞–¥–º–∏–Ω–∞ ${adminId}`);
                    }
                }
            }
            
            console.log('üì® –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω');
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error.message);
        }
        
        res.json({ 
            success: true, 
            data: {
                ticketId: ticketId,
                status: 'created',
                message: '–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º.'
            }
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:', error.message);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏' });
    }
});

// üö® –ü–†–û–°–¢–ï–ô–®–ò–ô –¢–ï–°–¢ –ñ–ò–í–û–°–¢–ò –°–ï–†–í–ï–†–ê
app.get('/health', (req, res) => {
    res.json({ 
        status: 'OK', 
        time: new Date().toISOString(),
        version: '2024-07-19-FINAL',
        bot: bot ? 'READY' : 'NOT_READY'
    });
});

// üß™ –¢–ï–°–¢–û–í–´–ô ENDPOINT –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
app.get('/test-notification', async (req, res) => {
    try {
        console.log('üß™ –¢–ï–°–¢ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –ó–ê–ü–£–©–ï–ù');
        console.log('üîç BOT_TOKEN –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', process.env.BOT_TOKEN ? '–ï–°–¢–¨' : '–ù–ï–¢');
        console.log('üîç Bot –æ–±—ä–µ–∫—Ç:', bot ? '–ï–°–¢–¨' : '–ù–ï–¢');
        console.log('üîç Bot.api:', bot?.api ? '–ï–°–¢–¨' : '–ù–ï–¢');
        
        if (!bot || !bot.api) {
            return res.json({ success: false, error: '–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' });
        }
        
        const testMessage = `üß™ <b>–¢–ï–°–¢ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô</b>\n\n` +
            `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n` +
            `üåê –ò—Å—Ç–æ—á–Ω–∏–∫: Railway Test\n` +
            `‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!`;
            
        const result = await bot.api.sendMessage(8141463258, testMessage, { 
            parse_mode: 'HTML' 
        });
        
        console.log('‚úÖ –¢–ï–°–¢ –£–°–ü–ï–®–ï–ù! Message ID:', result.message_id);
        res.json({ success: true, messageId: result.message_id });
        
    } catch (error) {
        console.error('‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù:', error.message);
        res.json({ success: false, error: error.message });
    }
});

// API –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/profile/:userId', async (req, res) => {
    try {
        const { userId } = req.params;
        console.log('üë§ –ó–∞–ø—Ä–æ—Å –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
        
        // –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userProfile = {
            id: userId,
            first_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            last_name: '',
            username: `user${userId}`,
            level: 1,
            experience: 0,
            total_volume: 0,
            successful_orders: 0,
            avatar: null,
            created_at: new Date().toISOString()
        };
        
        console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', userProfile);
        res.json({ success: true, data: userProfile });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error.message);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è' });
    }
});

// API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
app.post('/api/create-order', async (req, res) => {
    try {
        console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ (–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º):', req.body);
        
        // –ò–º–∏—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
        const orderId = Date.now();
        
        res.json({ 
            success: true, 
            data: {
                orderId: orderId,
                status: 'pending',
                message: '–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞'
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:', error);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏' });
    }
});

// –¢–µ—Å—Ç–æ–≤—ã–µ –∫—É—Ä—Å—ã –∫–∞–∫ fallback
function getTestRates() {
    return [
        // ü™ô –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–´
        { currency: 'BTC', price: 95000, buy: 95000, sell: 96000, change24h: 2.5, lastUpdate: new Date().toISOString(), type: 'crypto' },
        { currency: 'ETH', price: 3500, buy: 3500, sell: 3520, change24h: 1.8, lastUpdate: new Date().toISOString(), type: 'crypto' },
        { currency: 'USDT', price: 1.0, buy: 1.0, sell: 1.02, change24h: 0.1, lastUpdate: new Date().toISOString(), type: 'crypto' },
        { currency: 'USDC', price: 1.0, buy: 1.0, sell: 1.02, change24h: 0.0, lastUpdate: new Date().toISOString(), type: 'crypto' },
        { currency: 'BNB', price: 650, buy: 650, sell: 655, change24h: -0.8, lastUpdate: new Date().toISOString(), type: 'crypto' },
        
        // üí∞ –§–ò–ê–¢–ù–´–ï –í–ê–õ–Æ–¢–´
        { currency: 'USD', price: 1.0, buy: 1.0, sell: 1.0, change24h: 0.0, lastUpdate: new Date().toISOString(), type: 'fiat' },
        { currency: 'EUR', price: 0.92, buy: 0.92, sell: 0.94, change24h: 0.2, lastUpdate: new Date().toISOString(), type: 'fiat' },
        { currency: 'RUB', price: 0.0105, buy: 0.0098, sell: 0.0102, change24h: -0.5, lastUpdate: new Date().toISOString(), type: 'fiat' }
    ];
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üåê –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üì± –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: http://localhost:${PORT}`);
    console.log(`ü§ñ Telegram –±–æ—Ç: –ê–ö–¢–ò–í–ï–ù`);
    console.log(`üì° RatesService —Å—Ç–∞—Ç—É—Å:`, ratesService ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)');
    console.log(`üöÄ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!`);
}).on('error', (err) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err.message);
    if (err.code === 'EADDRINUSE') {
        console.log(`‚ö†Ô∏è –ü–æ—Ä—Ç ${PORT} –∑–∞–Ω—è—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç.`);
    }
    process.exit(1);
}); 