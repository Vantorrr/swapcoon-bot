require('dotenv').config();
const express = require('express');
const cors = require('cors');
const path = require('path');

console.log('üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ (–ë–û–¢ + –í–ï–ë)...');
console.log('üìÇ __dirname:', __dirname);
console.log('üåç NODE_ENV:', process.env.NODE_ENV || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
console.log('üîå PORT:', process.env.PORT || 3000);

// ü§ñ –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –ë–û–¢–ê
let bot = null;
let notifyOperators = null;
let notifyWebsiteActivity = null;
let db = null;

// ü§ñ –ó–ê–ü–£–°–ö TELEGRAM –ë–û–¢–ê
console.log('ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞...');
try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞ –ù–û –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    const botModule = require('./bot');
    bot = botModule.bot;
    notifyOperators = botModule.notifyOperators;
    notifyWebsiteActivity = botModule.notifyWebsiteActivity;
    db = botModule.db;
    console.log('‚úÖ Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –í –§–û–ù–ï
    setTimeout(() => {
        try {
            console.log('üîÑ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...');
            bot.start().then(() => {
                console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
            }).catch(error => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ (–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É):', error.message);
            });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error.message);
        }
    }, 2000);
    
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ (–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –±–æ—Ç–∞):', error.message);
}

// üåê –ó–ê–ü–£–°–ö –í–ï–ë-–°–ï–†–í–ï–†–ê
let ratesService;
try {
    console.log('üì° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RatesService...');
    const RatesService = require('./services/RatesService');
    ratesService = new RatesService();
    console.log('‚úÖ RatesService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RatesService:', error.message);
    console.log('üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ RatesService - –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–≥–ª—É—à–∫–∏');
    ratesService = null;
}

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, 'webapp')));
app.use('/assets', express.static(path.join(__dirname, '..', 'assets')));

// –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'webapp', 'index.html'));
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
app.get('/api/rates', async (req, res) => {
    console.log('üìà –ó–∞–ø—Ä–æ—Å –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç...');
    
    try {
        if (ratesService) {
            console.log('üì° –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã —á–µ—Ä–µ–∑ RatesService...');
            const rates = await ratesService.getRates();
            res.json({ 
                success: true, 
                data: rates,
                lastUpdate: ratesService.getLastUpdateTime(),
                source: 'live_api'
            });
            console.log('‚úÖ –ö—É—Ä—Å—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã:', rates.length, '–≤–∞–ª—é—Ç');
        } else {
            console.log('üîÑ RatesService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫—É—Ä—Å—ã...');
            const testRates = getTestRates();
            res.json({ 
                success: true, 
                data: testRates,
                lastUpdate: new Date().toISOString(),
                source: 'test_data'
            });
            console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –∫—É—Ä—Å—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã:', testRates.length, '–≤–∞–ª—é—Ç');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤:', error.message);
        console.log('üîÑ Fallback –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ –∫—É—Ä—Å—ã...');
        const testRates = getTestRates();
        res.json({ 
            success: true, 
            data: testRates,
            lastUpdate: new Date().toISOString(),
            source: 'fallback_data'
        });
    }
});

// API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
app.post('/api/support-ticket', async (req, res) => {
    try {
        console.log('üé´ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:', req.body);
        
        const { userId, source, subject, message, timestamp } = req.body;
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
        const ticketId = `TICKET_${Date.now()}`;
        
        console.log(`üìã –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:
        ID: ${ticketId}
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId}
        –¢–µ–º–∞: ${subject}
        –°–æ–æ–±—â–µ–Ω–∏–µ: ${message}
        –ò—Å—Ç–æ—á–Ω–∏–∫: ${source}
        –í—Ä–µ–º—è: ${timestamp}`);
        
        // üö® –û–¢–ü–†–ê–í–õ–Ø–ï–ú –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –í–°–ï–ú –ê–î–ú–ò–ù–ê–ú
        try {
            if (!bot) {
                console.log('‚ö†Ô∏è –ë–æ—Ç –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
            } else if (!bot.api) {
                console.log('‚ö†Ô∏è Bot API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
            } else {
                console.log('üì® –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞–º...');
                const adminIds = [8141463258, 461759951, 280417617]; // ID –∞–¥–º–∏–Ω–æ–≤
                
                for (const adminId of adminIds) {
                    const notificationMessage = `üé´ <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ü–û–î–î–ï–†–ñ–ö–ò</b>\n\n` +
                        `üìã <b>ID:</b> <code>${ticketId}</code>\n` +
                        `üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${userId}\n` +
                        `üìÇ <b>–¢–µ–º–∞:</b> ${subject}\n` +
                        `üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> ${message}\n` +
                        `üåê <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> ${source}\n` +
                        `‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date(timestamp).toLocaleString('ru-RU')}`;
                    
                    try {
                        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É ${adminId}...`);
                        await bot.api.sendMessage(adminId, notificationMessage, { 
                            parse_mode: 'HTML',
                            disable_web_page_preview: true 
                        });
                        console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É ${adminId}`);
                    } catch (error) {
                        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É ${adminId}:`, error.message);
                    }
                }
                
                console.log('üì® –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω');
            }
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error.message);
        }
        
        res.json({ 
            success: true, 
            data: {
                ticketId: ticketId,
                status: 'created',
                message: '–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º.'
            }
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:', error.message);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏' });
    }
});

// API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
app.post('/api/create-order', async (req, res) => {
    try {
        console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ (–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º):', req.body);
        
        // –ò–º–∏—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
        const orderId = Date.now();
        
        res.json({ 
            success: true, 
            data: {
                orderId: orderId,
                status: 'pending',
                message: '–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞'
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:', error);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏' });
    }
});

// –¢–µ—Å—Ç–æ–≤—ã–µ –∫—É—Ä—Å—ã –∫–∞–∫ fallback
function getTestRates() {
    return [
        // ü™ô –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–´
        { currency: 'BTC', price: 95000, buy: 95000, sell: 96000, change24h: 2.5, lastUpdate: new Date().toISOString(), type: 'crypto' },
        { currency: 'ETH', price: 3500, buy: 3500, sell: 3520, change24h: 1.8, lastUpdate: new Date().toISOString(), type: 'crypto' },
        { currency: 'USDT', price: 1.0, buy: 1.0, sell: 1.02, change24h: 0.1, lastUpdate: new Date().toISOString(), type: 'crypto' },
        { currency: 'USDC', price: 1.0, buy: 1.0, sell: 1.02, change24h: 0.0, lastUpdate: new Date().toISOString(), type: 'crypto' },
        { currency: 'BNB', price: 650, buy: 650, sell: 655, change24h: -0.8, lastUpdate: new Date().toISOString(), type: 'crypto' },
        
        // üí∞ –§–ò–ê–¢–ù–´–ï –í–ê–õ–Æ–¢–´
        { currency: 'USD', price: 1.0, buy: 1.0, sell: 1.0, change24h: 0.0, lastUpdate: new Date().toISOString(), type: 'fiat' },
        { currency: 'EUR', price: 0.92, buy: 0.92, sell: 0.94, change24h: 0.2, lastUpdate: new Date().toISOString(), type: 'fiat' },
        { currency: 'RUB', price: 0.0105, buy: 0.0098, sell: 0.0102, change24h: -0.5, lastUpdate: new Date().toISOString(), type: 'fiat' }
    ];
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üåê –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üì± –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: http://localhost:${PORT}`);
    console.log(`ü§ñ Telegram –±–æ—Ç: –ê–ö–¢–ò–í–ï–ù`);
    console.log(`üì° RatesService —Å—Ç–∞—Ç—É—Å:`, ratesService ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)');
    console.log(`üöÄ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!`);
}).on('error', (err) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err.message);
    if (err.code === 'EADDRINUSE') {
        console.log(`‚ö†Ô∏è –ü–æ—Ä—Ç ${PORT} –∑–∞–Ω—è—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç.`);
    }
    process.exit(1);
}); 