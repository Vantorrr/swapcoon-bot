require('dotenv').config();
const express = require('express');
const cors = require('cors');
const path = require('path');
const RatesService = require('./services/RatesService');

const app = express();
const PORT = process.env.PORT || 3000;

// ะะฝะธัะธะฐะปะธะทะฐัะธั ัะตัะฒะธัะฐ ะบัััะพะฒ
const ratesService = new RatesService();

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, 'webapp')));
app.use('/assets', express.static(path.join(__dirname, '..', 'assets')));

// ะัะฝะพะฒะฝะพะน ะผะฐััััั ะดะปั ะผะธะฝะธ-ะฟัะธะปะพะถะตะฝะธั
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'webapp', 'index.html'));
});

// API ะดะปั ะฟะพะปััะตะฝะธั ะบัััะพะฒ ะฒะฐะปัั
app.get('/api/rates', async (req, res) => {
    try {
        const rates = await ratesService.getRates();
        res.json({ 
            success: true, 
            data: rates,
            lastUpdate: ratesService.getLastUpdateTime(),
            source: 'live_api'
        });
    } catch (error) {
        console.error('ะัะธะฑะบะฐ ะฟะพะปััะตะฝะธั ะบัััะพะฒ:', error);
        res.status(500).json({ success: false, error: 'ะัะธะฑะบะฐ ะฟะพะปััะตะฝะธั ะบัััะพะฒ' });
    }
});

// ะะฐะณะปััะบะฐ ะดะปั ัะพะทะดะฐะฝะธั ะทะฐัะฒะบะธ (ะฑะตะท ะฑะพัะฐ)
app.post('/api/create-order', async (req, res) => {
    try {
        console.log('๐ ะกะพะทะดะฐะฝะธะต ะทะฐัะฒะบะธ (ัะตััะพะฒัะน ัะตะถะธะผ):', req.body);
        
        // ะะผะธัะฐัะธั ััะฟะตัะฝะพะณะพ ัะพะทะดะฐะฝะธั ะทะฐัะฒะบะธ
        const orderId = Date.now();
        
        res.json({ 
            success: true, 
            data: {
                orderId: orderId,
                status: 'pending',
                message: 'ะะฐัะฒะบะฐ ัะพะทะดะฐะฝะฐ ะฒ ัะตััะพะฒะพะผ ัะตะถะธะผะต'
            }
        });
    } catch (error) {
        console.error('ะัะธะฑะบะฐ ัะพะทะดะฐะฝะธั ะทะฐัะฒะบะธ:', error);
        res.status(500).json({ success: false, error: 'ะัะธะฑะบะฐ ัะพะทะดะฐะฝะธั ะทะฐัะฒะบะธ' });
    }
});

// ะะฐะฟััะบ ัะตัะฒะตัะฐ
app.listen(PORT, () => {
    console.log(`๐ ะัะพััะพะน ะฒะตะฑ-ัะตัะฒะตั ะทะฐะฟััะตะฝ ะฝะฐ ะฟะพััั ${PORT}`);
    console.log(`๐ฑ ะะตะฑ-ะฟัะธะปะพะถะตะฝะธะต: http://localhost:${PORT}`);
    console.log(`๐ฏ ะขะพะปัะบะพ ััะพะฝัะตะฝะด, ะฑะตะท Telegram ะฑะพัะฐ`);
}); 