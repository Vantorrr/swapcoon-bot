require('dotenv').config();
const express = require('express');
const cors = require('cors');
const path = require('path');

console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...');
console.log('üìÇ __dirname:', __dirname);
console.log('üåç NODE_ENV:', process.env.NODE_ENV || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
console.log('üîå PORT:', process.env.PORT || 3000);

let ratesService;
try {
    console.log('üì° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RatesService...');
    const RatesService = require('./services/RatesService');
    ratesService = new RatesService();
    console.log('‚úÖ RatesService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RatesService:', error.message);
    console.log('üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ RatesService - –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–≥–ª—É—à–∫–∏');
    ratesService = null;
}

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, 'webapp')));
app.use('/assets', express.static(path.join(__dirname, '..', 'assets')));

// –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'webapp', 'index.html'));
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
app.get('/api/rates', async (req, res) => {
    console.log('üìà –ó–∞–ø—Ä–æ—Å –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç...');
    
    try {
        if (ratesService) {
            console.log('üì° –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã —á–µ—Ä–µ–∑ RatesService...');
            const rates = await ratesService.getRates();
            res.json({ 
                success: true, 
                data: rates,
                lastUpdate: ratesService.getLastUpdateTime(),
                source: 'live_api'
            });
            console.log('‚úÖ –ö—É—Ä—Å—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã:', rates.length, '–≤–∞–ª—é—Ç');
        } else {
            console.log('üîÑ RatesService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫—É—Ä—Å—ã...');
            const testRates = getTestRates();
            res.json({ 
                success: true, 
                data: testRates,
                lastUpdate: new Date().toISOString(),
                source: 'test_data'
            });
            console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –∫—É—Ä—Å—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã:', testRates.length, '–≤–∞–ª—é—Ç');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤:', error.message);
        console.log('üîÑ Fallback –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ –∫—É—Ä—Å—ã...');
        const testRates = getTestRates();
        res.json({ 
            success: true, 
            data: testRates,
            lastUpdate: new Date().toISOString(),
            source: 'fallback_data'
        });
    }
});

// üî• –¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï –û–¢–ö–õ–Æ–ß–ï–ù–´ –ù–ê–í–°–ï–ì–î–ê!
function getTestRates() {
    console.log("üî• getTestRates() –û–¢–ö–õ–Æ–ß–ï–ù - –ù–ï–¢ –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•!");
    return []; // üî• –ü–£–°–¢–û–ô –ú–ê–°–°–ò–í!
}

// API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
app.post('/api/support-ticket', async (req, res) => {
    try {
        console.log('üé´ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º):', req.body);
        
        const { userId, source, subject, message, timestamp } = req.body;
        
        // –ò–º–∏—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
        const ticketId = `TICKET_${Date.now()}`;
        
        console.log(`üìã –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:
        ID: ${ticketId}
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId}
        –¢–µ–º–∞: ${subject}
        –°–æ–æ–±—â–µ–Ω–∏–µ: ${message}
        –ò—Å—Ç–æ—á–Ω–∏–∫: ${source}
        –í—Ä–µ–º—è: ${timestamp}`);
        
        res.json({ 
            success: true, 
            data: {
                ticketId: ticketId,
                status: 'created',
                message: '–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞. –í —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º.'
            }
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:', error.message);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏' });
    }
});

// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ (–±–µ–∑ –±–æ—Ç–∞)
app.post('/api/create-order', async (req, res) => {
    try {
        console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º):', req.body);
        
        // –ò–º–∏—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
        const orderId = Date.now();
        
        res.json({ 
            success: true, 
            data: {
                orderId: orderId,
                status: 'pending',
                message: '–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ'
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:', error);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏' });
    }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üåê –ü—Ä–æ—Å—Ç–æ–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üì± –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: http://localhost:${PORT}`);
    console.log(`üéØ –¢–æ–ª—å–∫–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥, –±–µ–∑ Telegram –±–æ—Ç–∞`);
    console.log(`üì° RatesService —Å—Ç–∞—Ç—É—Å:`, ratesService ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)');
    console.log(`üöÄ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!`);
}).on('error', (err) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err.message);
    if (err.code === 'EADDRINUSE') {
        console.log(`‚ö†Ô∏è –ü–æ—Ä—Ç ${PORT} –∑–∞–Ω—è—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç.`);
    }
    process.exit(1);
}); 